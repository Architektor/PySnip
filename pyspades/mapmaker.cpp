/* Generated by Cython 0.24 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "pyspades/classicgen_c.cpp", 
            "pyspades/vxl_c.cpp"
        ], 
        "extra_compile_args": [
            "-std=c++11"
        ], 
        "include_dirs": [
            "./pyspades"
        ], 
        "language": "c++"
    }
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_24"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
  #define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pyspades__mapmaker
#define __PYX_HAVE_API__pyspades__mapmaker
#include "vxl_c.cpp"
#include "classicgen_c.cpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "pyspades/mapmaker.pyx",
  "pyspades/vxl.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_8pyspades_3vxl_VXLData;
struct __pyx_obj_8pyspades_8mapmaker_BiomeMap;
struct __pyx_obj_8pyspades_8mapmaker_HeightMap;
struct __pyx_opt_args_8pyspades_3vxl_7VXLData_get_z;
struct __pyx_opt_args_8pyspades_3vxl_7VXLData_check_node;

/* "vxl.pxd":36
 *     cpdef get_color(self, int x, int y, int z)
 *     cpdef tuple get_random_point(self, int x1, int y1, int x2, int y2)
 *     cpdef int get_z(self, int x, int y, int start = ?)             # <<<<<<<<<<<<<<
 *     cpdef int get_height(self, int x, int y)
 *     cpdef bint has_neighbors(self, int x, int y, int z)
 */
struct __pyx_opt_args_8pyspades_3vxl_7VXLData_get_z {
  int __pyx_n;
  int start;
};

/* "vxl.pxd":41
 *     cpdef bint is_surface(self, int x, int y, int z)
 *     cpdef list get_neighbors(self, int x, int y, int z)
 *     cpdef bint check_node(self, int x, int y, int z, bint destroy = ?)             # <<<<<<<<<<<<<<
 *     cpdef bint build_point(self, int x, int y, int z, tuple color)
 *     cpdef bint set_column_fast(self, int x, int y, int start_z,
 */
struct __pyx_opt_args_8pyspades_3vxl_7VXLData_check_node {
  int __pyx_n;
  int destroy;
};
struct __pyx_opt_args_8pyspades_8mapmaker_8BiomeMap_random_points;
struct __pyx_opt_args_8pyspades_8mapmaker_9HeightMap_midpoint_displace;

/* "pyspades/mapmaker.pyx":79
 *         for idx in xrange(len(self.tmap)):
 *             self.tmap[idx] = random.choice(self.biomes)
 *     cpdef random_points(self, qty, biome, x=0, y=0, w=None,             # <<<<<<<<<<<<<<
 *                        h=None):
 *         """Generate some points for point_flood()"""
 */
struct __pyx_opt_args_8pyspades_8mapmaker_8BiomeMap_random_points {
  int __pyx_n;
  PyObject *x;
  PyObject *y;
  PyObject *w;
  PyObject *h;
};

/* "pyspades/mapmaker.pyx":216
 *                 center = self.hmap[x+y*self.width]
 *                 self.hmap[x+y*self.width] = (top + left + right + bot + center)/5
 *     cpdef midpoint_displace(self, double jittervalue, \             # <<<<<<<<<<<<<<
 *                           double spanscalingmultiplier, \
 *                             int skip=0):
 */
struct __pyx_opt_args_8pyspades_8mapmaker_9HeightMap_midpoint_displace {
  int __pyx_n;
  int skip;
};

/* "vxl.pxd":30
 *     bint is_valid_position(int x, int y, int z)
 * 
 * cdef class VXLData:             # <<<<<<<<<<<<<<
 *     cdef MapData * map
 * 
 */
struct __pyx_obj_8pyspades_3vxl_VXLData {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pyspades_3vxl_VXLData *__pyx_vtab;
  struct MapData *map;
};


/* "pyspades/mapmaker.pyx":48
 * 
 * @cython.final
 * cdef class BiomeMap:             # <<<<<<<<<<<<<<
 *     """
 *     A tilemap containing biome data for a HeightMap.
 */
struct __pyx_obj_8pyspades_8mapmaker_BiomeMap {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pyspades_8mapmaker_BiomeMap *__pyx_vtab;
  int width;
  int height;
  int twidth;
  int theight;
  PyObject *biomes;
  PyObject *tmap;
  PyObject *gradients;
};


/* "pyspades/mapmaker.pyx":153
 * 
 * @cython.final
 * cdef class HeightMap:             # <<<<<<<<<<<<<<
 *     cdef public int width
 *     cdef public int height
 */
struct __pyx_obj_8pyspades_8mapmaker_HeightMap {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *__pyx_vtab;
  int width;
  int height;
  PyObject *hmap;
  PyObject *cmap;
};



/* "vxl.pxd":30
 *     bint is_valid_position(int x, int y, int z)
 * 
 * cdef class VXLData:             # <<<<<<<<<<<<<<
 *     cdef MapData * map
 * 
 */

struct __pyx_vtabstruct_8pyspades_3vxl_VXLData {
  PyObject *(*get_solid)(struct __pyx_obj_8pyspades_3vxl_VXLData *, int, int, int, int __pyx_skip_dispatch);
  PyObject *(*get_color)(struct __pyx_obj_8pyspades_3vxl_VXLData *, int, int, int, int __pyx_skip_dispatch);
  PyObject *(*get_random_point)(struct __pyx_obj_8pyspades_3vxl_VXLData *, int, int, int, int, int __pyx_skip_dispatch);
  int (*get_z)(struct __pyx_obj_8pyspades_3vxl_VXLData *, int, int, int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_3vxl_7VXLData_get_z *__pyx_optional_args);
  int (*get_height)(struct __pyx_obj_8pyspades_3vxl_VXLData *, int, int, int __pyx_skip_dispatch);
  int (*has_neighbors)(struct __pyx_obj_8pyspades_3vxl_VXLData *, int, int, int, int __pyx_skip_dispatch);
  int (*is_surface)(struct __pyx_obj_8pyspades_3vxl_VXLData *, int, int, int, int __pyx_skip_dispatch);
  PyObject *(*get_neighbors)(struct __pyx_obj_8pyspades_3vxl_VXLData *, int, int, int, int __pyx_skip_dispatch);
  int (*check_node)(struct __pyx_obj_8pyspades_3vxl_VXLData *, int, int, int, int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_3vxl_7VXLData_check_node *__pyx_optional_args);
  int (*build_point)(struct __pyx_obj_8pyspades_3vxl_VXLData *, int, int, int, PyObject *, int __pyx_skip_dispatch);
  int (*set_column_fast)(struct __pyx_obj_8pyspades_3vxl_VXLData *, int, int, int, int, int, int, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_8pyspades_3vxl_VXLData *__pyx_vtabptr_8pyspades_3vxl_VXLData;


/* "pyspades/mapmaker.pyx":48
 * 
 * @cython.final
 * cdef class BiomeMap:             # <<<<<<<<<<<<<<
 *     """
 *     A tilemap containing biome data for a HeightMap.
 */

struct __pyx_vtabstruct_8pyspades_8mapmaker_BiomeMap {
  PyObject *(*get_repeat)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, int, int, int __pyx_skip_dispatch);
  PyObject *(*set_repeat)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, int, int, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*noise)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, int __pyx_skip_dispatch);
  PyObject *(*random_points)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_8mapmaker_8BiomeMap_random_points *__pyx_optional_args);
  PyObject *(*point_flood)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*jitter)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, int __pyx_skip_dispatch);
  PyObject *(*create_heightmap)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, int __pyx_skip_dispatch);
  PyObject *(*rect_of_point)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, PyObject *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_8pyspades_8mapmaker_BiomeMap *__pyx_vtabptr_8pyspades_8mapmaker_BiomeMap;
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_get_repeat(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, int, int, int __pyx_skip_dispatch);
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_set_repeat(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, int, int, PyObject *, int __pyx_skip_dispatch);
static PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_noise(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, int __pyx_skip_dispatch);
static PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_random_points(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_8mapmaker_8BiomeMap_random_points *__pyx_optional_args);
static PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_point_flood(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, PyObject *, int __pyx_skip_dispatch);
static PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_jitter(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, int __pyx_skip_dispatch);
static PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_create_heightmap(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, int __pyx_skip_dispatch);
static PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_rect_of_point(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, PyObject *, PyObject *, int __pyx_skip_dispatch);


/* "pyspades/mapmaker.pyx":153
 * 
 * @cython.final
 * cdef class HeightMap:             # <<<<<<<<<<<<<<
 *     cdef public int width
 *     cdef public int height
 */

struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap {
  double (*get)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int __pyx_skip_dispatch);
  double (*get_repeat)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int __pyx_skip_dispatch);
  PyObject *(*set)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, double, int __pyx_skip_dispatch);
  PyObject *(*set_repeat)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, double, int __pyx_skip_dispatch);
  PyObject *(*add_repeat)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, double, int __pyx_skip_dispatch);
  int (*get_col)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int __pyx_skip_dispatch);
  int (*get_col_repeat)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int __pyx_skip_dispatch);
  PyObject *(*set_col_repeat)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int __pyx_skip_dispatch);
  PyObject *(*fill_col)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int __pyx_skip_dispatch);
  PyObject *(*mult_repeat)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, double, int __pyx_skip_dispatch);
  PyObject *(*seed)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, double, int __pyx_skip_dispatch);
  PyObject *(*peaking)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch);
  PyObject *(*dipping)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch);
  PyObject *(*rolling)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch);
  PyObject *(*smoothing)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch);
  PyObject *(*midpoint_displace)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, double, int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_8mapmaker_9HeightMap_midpoint_displace *__pyx_optional_args);
  PyObject *(*jitter_heights)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, int __pyx_skip_dispatch);
  PyObject *(*jitter_colors)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, int __pyx_skip_dispatch);
  PyObject *(*level_against_heightmap)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, int __pyx_skip_dispatch);
  PyObject *(*blend_heightmaps)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch);
  PyObject *(*rect_solid)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int, double, int __pyx_skip_dispatch);
  PyObject *(*rect_noise)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int, double, double, int __pyx_skip_dispatch);
  PyObject *(*rect_color)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int, int, int __pyx_skip_dispatch);
  PyObject *(*truncate)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch);
  PyObject *(*offset_z)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, int __pyx_skip_dispatch);
  PyObject *(*rescale_z)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, int __pyx_skip_dispatch);
  PyObject *(*paint_gradient_fill)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*rewrite_gradient_fill)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*rgb_noise_colors)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, PyObject *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*smooth_colors)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch);
  PyObject *(*write_vxl)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch);
  PyObject *(*line_add)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int, int, double, int __pyx_skip_dispatch);
  PyObject *(*line_set)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int, int, double, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *__pyx_vtabptr_8pyspades_8mapmaker_HeightMap;
static CYTHON_INLINE double __pyx_f_8pyspades_8mapmaker_9HeightMap_get(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int __pyx_skip_dispatch);
static CYTHON_INLINE double __pyx_f_8pyspades_8mapmaker_9HeightMap_get_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int __pyx_skip_dispatch);
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_set(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, double, int __pyx_skip_dispatch);
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_set_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, double, int __pyx_skip_dispatch);
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_add_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, double, int __pyx_skip_dispatch);
static CYTHON_INLINE int __pyx_f_8pyspades_8mapmaker_9HeightMap_get_col(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int __pyx_skip_dispatch);
static CYTHON_INLINE int __pyx_f_8pyspades_8mapmaker_9HeightMap_get_col_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int __pyx_skip_dispatch);
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_set_col_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int __pyx_skip_dispatch);
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_fill_col(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int __pyx_skip_dispatch);
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_mult_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, double, int __pyx_skip_dispatch);
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_seed(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, double, int __pyx_skip_dispatch);
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_peaking(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch);
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_dipping(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch);
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_rolling(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch);
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_smoothing(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch);
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_midpoint_displace(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, double, int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_8mapmaker_9HeightMap_midpoint_displace *__pyx_optional_args);
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_jitter_heights(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, int __pyx_skip_dispatch);
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_jitter_colors(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, int __pyx_skip_dispatch);
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_level_against_heightmap(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, int __pyx_skip_dispatch);
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_blend_heightmaps(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch);
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_rect_solid(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int, double, int __pyx_skip_dispatch);
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_rect_noise(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int, double, double, int __pyx_skip_dispatch);
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_rect_color(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int, int, int __pyx_skip_dispatch);
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_truncate(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch);
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_offset_z(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, int __pyx_skip_dispatch);
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_rescale_z(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, int __pyx_skip_dispatch);
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_paint_gradient_fill(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, PyObject *, int __pyx_skip_dispatch);
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_rewrite_gradient_fill(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, PyObject *, int __pyx_skip_dispatch);
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_rgb_noise_colors(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, PyObject *, PyObject *, int __pyx_skip_dispatch);
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_smooth_colors(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch);
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_write_vxl(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch);
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_line_add(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int, int, double, int __pyx_skip_dispatch);
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_line_set(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int, int, double, int __pyx_skip_dispatch);

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyObjectSetAttrStr.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* None.proto */
static CYTHON_INLINE long __Pyx_div_long(long, long);

/* UnaryNegOverflows.proto */
#define UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

/* ListCompAppend.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ListAppend.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* None.proto */
static CYTHON_INLINE int __Pyx_mod_int(int, int);

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyIntBinop.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* PyIntBinop.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyThreadStateGet.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyFloatBinop.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyFloat_SubtractObjC(PyObject *op1, PyObject *op2, double floatval, int inplace);
#else
#define __Pyx_PyFloat_SubtractObjC(op1, op2, floatval, inplace)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* None.proto */
static CYTHON_INLINE int __Pyx_div_int(int, int);

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* None.proto */
static CYTHON_INLINE Py_ssize_t __Pyx_mod_Py_ssize_t(Py_ssize_t, Py_ssize_t);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* None.proto */
static CYTHON_INLINE long __Pyx_mod_long(long, long);

/* abs_int.proto */
static CYTHON_INLINE unsigned int __Pyx_abs_int(int x) {
    if (unlikely(x == -INT_MAX-1))
        return ((unsigned int)INT_MAX) + 1U;
    return (unsigned int) abs(x);
}

/* PyFloatBinop.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyFloat_DivideObjC(PyObject *op1, PyObject *op2, double floatval, int inplace);
#else
#define __Pyx_PyFloat_DivideObjC(op1, op2, floatval, inplace)\
    ((inplace ? __Pyx_PyNumber_InPlaceDivide(op1, op2) : __Pyx_PyNumber_Divide(op1, op2)))
    #endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned long __Pyx_PyInt_As_unsigned_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CStringEquals.proto */
static CYTHON_INLINE int __Pyx_StrEq(const char *, const char *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_get_repeat(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_set_repeat(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, PyObject *__pyx_v_val, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_noise(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_random_points(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_qty, PyObject *__pyx_v_biome, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_8mapmaker_8BiomeMap_random_points *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_point_flood(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_points, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_jitter(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_create_heightmap(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_rect_of_point(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static CYTHON_INLINE double __pyx_f_8pyspades_8mapmaker_9HeightMap_get(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static CYTHON_INLINE double __pyx_f_8pyspades_8mapmaker_9HeightMap_get_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_set(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, double __pyx_v_val, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_set_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, double __pyx_v_val, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_add_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, double __pyx_v_val, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static CYTHON_INLINE int __pyx_f_8pyspades_8mapmaker_9HeightMap_get_col(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static CYTHON_INLINE int __pyx_f_8pyspades_8mapmaker_9HeightMap_get_col_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_set_col_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_val, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_fill_col(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_col, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_mult_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, double __pyx_v_mult, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_seed(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_jitter, double __pyx_v_midpoint, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_peaking(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_dipping(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_rolling(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_smoothing(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_midpoint_displace(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_jittervalue, double __pyx_v_spanscalingmultiplier, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_8mapmaker_9HeightMap_midpoint_displace *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_jitter_heights(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_amount, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_jitter_colors(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_amount, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_level_against_heightmap(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_other, double __pyx_v_height, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_blend_heightmaps(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_alphamap, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_HeightMap, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_rect_solid(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_w, int __pyx_v_h, double __pyx_v_z, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_rect_noise(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_w, int __pyx_v_h, double __pyx_v_jitter, double __pyx_v_midpoint, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_rect_color(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_w, int __pyx_v_h, int __pyx_v_col, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_truncate(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_offset_z(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_qty, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_rescale_z(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_multiple, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_paint_gradient_fill(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, PyObject *__pyx_v_gradient, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_rewrite_gradient_fill(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, PyObject *__pyx_v_gradients, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_rgb_noise_colors(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, PyObject *__pyx_v_low, PyObject *__pyx_v_high, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_smooth_colors(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_write_vxl(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_line_add(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_x2, int __pyx_v_y2, int __pyx_v_radius, double __pyx_v_depth, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_line_set(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_x2, int __pyx_v_y2, int __pyx_v_radius, double __pyx_v_height, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'pyspades.vxl' */
static PyTypeObject *__pyx_ptype_8pyspades_3vxl_VXLData = 0;

/* Module declarations from 'cython' */

/* Module declarations from 'pyspades.mapmaker' */
static PyTypeObject *__pyx_ptype_8pyspades_8mapmaker_BiomeMap = 0;
static PyTypeObject *__pyx_ptype_8pyspades_8mapmaker_HeightMap = 0;
static PyObject *__pyx_f_8pyspades_8mapmaker_lim_byte(int); /*proto*/
static CYTHON_INLINE int __pyx_f_8pyspades_8mapmaker_make_color(int, int, int, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE int __pyx_f_8pyspades_8mapmaker_get_r(int, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE int __pyx_f_8pyspades_8mapmaker_get_g(int, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE int __pyx_f_8pyspades_8mapmaker_get_b(int, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE int __pyx_f_8pyspades_8mapmaker_paint_gradient(PyObject *, int); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_bresenham_line(int, int, int, int); /*proto*/
#define __Pyx_MODULE_NAME "pyspades.mapmaker"
int __pyx_module_is_main_pyspades__mapmaker = 0;

/* Implementation of 'pyspades.mapmaker' */
static PyObject *__pyx_builtin_object;
static PyObject *__pyx_builtin_xrange;
static const char __pyx_k_b[] = "b";
static const char __pyx_k_f[] = "f";
static const char __pyx_k_g[] = "g";
static const char __pyx_k_h[] = "h";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_pi[] = "pi";
static const char __pyx_k_x2[] = "x2";
static const char __pyx_k_y2[] = "y2";
static const char __pyx_k__10[] = "*";
static const char __pyx_k_col[] = "col";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_hsb[] = "hsb";
static const char __pyx_k_low[] = "low";
static const char __pyx_k_map[] = "map";
static const char __pyx_k_pct[] = "pct";
static const char __pyx_k_qty[] = "qty";
static const char __pyx_k_rgb[] = "rgb";
static const char __pyx_k_sin[] = "sin";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_val[] = "val";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_dist[] = "dist";
static const char __pyx_k_high[] = "high";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_math[] = "math";
static const char __pyx_k_mult[] = "mult";
static const char __pyx_k_seed[] = "seed";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_skip[] = "skip";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_Biome[] = "Biome";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_biome[] = "biome";
static const char __pyx_k_color[] = "color";
static const char __pyx_k_depth[] = "depth";
static const char __pyx_k_deque[] = "deque";
static const char __pyx_k_noise[] = "noise";
static const char __pyx_k_other[] = "other";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_steps[] = "steps";
static const char __pyx_k_width[] = "width";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_biomes[] = "biomes";
static const char __pyx_k_choice[] = "choice";
static const char __pyx_k_height[] = "height";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_interp[] = "interp";
static const char __pyx_k_jitter[] = "jitter";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_object[] = "object";
static const char __pyx_k_radius[] = "radius";
static const char __pyx_k_random[] = "random";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_end_pos[] = "end_pos";
static const char __pyx_k_popleft[] = "popleft";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_randint[] = "randint";
static const char __pyx_k_Gradient[] = "Gradient";
static const char __pyx_k_alphamap[] = "alphamap";
static const char __pyx_k_deepcopy[] = "deepcopy";
static const char __pyx_k_gradient[] = "gradient";
static const char __pyx_k_midpoint[] = "midpoint";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_HeightMap[] = "HeightMap";
static const char __pyx_k_end_color[] = "end_color";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_start_pos[] = "start_pos";
static const char __pyx_k_variation[] = "variation";
static const char __pyx_k_hsb_to_rgb[] = "hsb_to_rgb";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_jittervalue[] = "jittervalue";
static const char __pyx_k_start_color[] = "start_color";
static const char __pyx_k_Biome___init[] = "Biome.__init__";
static const char __pyx_k_Gradient_hsb[] = "Gradient.hsb";
static const char __pyx_k_Gradient_rgb[] = "Gradient.rgb";
static const char __pyx_k_set_step_hsb[] = "set_step_hsb";
static const char __pyx_k_set_step_rgb[] = "set_step_rgb";
static const char __pyx_k_Gradient_array[] = "Gradient.array";
static const char __pyx_k_Gradient___init[] = "Gradient.__init__";
static const char __pyx_k_interpolate_hsb[] = "interpolate_hsb";
static const char __pyx_k_interpolate_rgb[] = "interpolate_rgb";
static const char __pyx_k_generate_classic[] = "generate_classic";
static const char __pyx_k_pyspades_mapmaker[] = "pyspades.mapmaker";
static const char __pyx_k_Gradient_set_step_hsb[] = "Gradient.set_step_hsb";
static const char __pyx_k_Gradient_set_step_rgb[] = "Gradient.set_step_rgb";
static const char __pyx_k_spanscalingmultiplier[] = "spanscalingmultiplier";
static const char __pyx_k_home_syberic_AOSServer_PySnip_p[] = "/home/syberic/AOSServer/PySnip/pyspades/mapmaker.pyx";
static PyObject *__pyx_n_s_Biome;
static PyObject *__pyx_n_s_Biome___init;
static PyObject *__pyx_n_s_Gradient;
static PyObject *__pyx_n_s_Gradient___init;
static PyObject *__pyx_n_s_Gradient_array;
static PyObject *__pyx_n_s_Gradient_hsb;
static PyObject *__pyx_n_s_Gradient_rgb;
static PyObject *__pyx_n_s_Gradient_set_step_hsb;
static PyObject *__pyx_n_s_Gradient_set_step_rgb;
static PyObject *__pyx_n_s_HeightMap;
static PyObject *__pyx_n_s__10;
static PyObject *__pyx_n_s_alphamap;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_biome;
static PyObject *__pyx_n_s_biomes;
static PyObject *__pyx_n_s_choice;
static PyObject *__pyx_n_s_col;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_color;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_deepcopy;
static PyObject *__pyx_n_s_depth;
static PyObject *__pyx_n_s_deque;
static PyObject *__pyx_n_s_dist;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_end_color;
static PyObject *__pyx_n_s_end_pos;
static PyObject *__pyx_n_s_f;
static PyObject *__pyx_n_s_g;
static PyObject *__pyx_n_s_generate_classic;
static PyObject *__pyx_n_s_gradient;
static PyObject *__pyx_n_s_h;
static PyObject *__pyx_n_s_height;
static PyObject *__pyx_n_s_high;
static PyObject *__pyx_kp_s_home_syberic_AOSServer_PySnip_p;
static PyObject *__pyx_n_s_hsb;
static PyObject *__pyx_n_s_hsb_to_rgb;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_interp;
static PyObject *__pyx_n_s_interpolate_hsb;
static PyObject *__pyx_n_s_interpolate_rgb;
static PyObject *__pyx_n_s_jitter;
static PyObject *__pyx_n_s_jittervalue;
static PyObject *__pyx_n_s_low;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_map;
static PyObject *__pyx_n_s_math;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_midpoint;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_mult;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_noise;
static PyObject *__pyx_n_s_object;
static PyObject *__pyx_n_s_other;
static PyObject *__pyx_n_s_pct;
static PyObject *__pyx_n_s_pi;
static PyObject *__pyx_n_s_popleft;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_pyspades_mapmaker;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qty;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_radius;
static PyObject *__pyx_n_s_randint;
static PyObject *__pyx_n_s_random;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_rgb;
static PyObject *__pyx_n_s_seed;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_set_step_hsb;
static PyObject *__pyx_n_s_set_step_rgb;
static PyObject *__pyx_n_s_sin;
static PyObject *__pyx_n_s_skip;
static PyObject *__pyx_n_s_spanscalingmultiplier;
static PyObject *__pyx_n_s_start_color;
static PyObject *__pyx_n_s_start_pos;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_steps;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_val;
static PyObject *__pyx_n_s_variation;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_width;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_x2;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_y2;
static PyObject *__pyx_n_s_z;
static PyObject *__pyx_pf_8pyspades_8mapmaker_generate_classic(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_seed); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_5Biome___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_gradient, PyObject *__pyx_v_height, PyObject *__pyx_v_variation, PyObject *__pyx_v_noise); /* proto */
static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap___init__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_biomes, PyObject *__pyx_v_width, PyObject *__pyx_v_height); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_2get_repeat(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_4set_repeat(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, PyObject *__pyx_v_val); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_6noise(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_8random_points(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_qty, PyObject *__pyx_v_biome, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_w, PyObject *__pyx_v_h); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_10point_flood(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_points); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_12jitter(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_14create_heightmap(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_16rect_of_point(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_5width___get__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self); /* proto */
static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_5width_2__set__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_6height___get__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self); /* proto */
static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6height_2__set__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_6twidth___get__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self); /* proto */
static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6twidth_2__set__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_7theight___get__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self); /* proto */
static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_7theight_2__set__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_6biomes___get__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self); /* proto */
static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6biomes_2__set__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6biomes_4__del__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_4tmap___get__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self); /* proto */
static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_4tmap_2__set__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_4tmap_4__del__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_9gradients___get__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self); /* proto */
static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_9gradients_2__set__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_9gradients_4__del__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self); /* proto */
static int __pyx_pf_8pyspades_8mapmaker_9HeightMap___init__(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, PyObject *__pyx_v_height); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_2get(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_4get_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_6set(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, double __pyx_v_val); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_8set_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, double __pyx_v_val); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_10add_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, double __pyx_v_val); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_12get_col(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_14get_col_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_16set_col_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_val); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_18fill_col(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_col); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_20mult_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, double __pyx_v_mult); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_22seed(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_jitter, double __pyx_v_midpoint); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_24peaking(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_26dipping(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_28rolling(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_30smoothing(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_32midpoint_displace(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_jittervalue, double __pyx_v_spanscalingmultiplier, int __pyx_v_skip); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_34jitter_heights(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_amount); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_36jitter_colors(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_amount); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_38level_against_heightmap(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_other, double __pyx_v_height); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_40blend_heightmaps(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_alphamap, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_HeightMap); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_42rect_solid(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_w, int __pyx_v_h, double __pyx_v_z); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_44rect_noise(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_w, int __pyx_v_h, double __pyx_v_jitter, double __pyx_v_midpoint); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_46rect_color(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_w, int __pyx_v_h, int __pyx_v_col); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_48truncate(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_50offset_z(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_qty); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_52rescale_z(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_multiple); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_54paint_gradient_fill(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, PyObject *__pyx_v_gradient); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_56rewrite_gradient_fill(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, PyObject *__pyx_v_gradients); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_58rgb_noise_colors(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, PyObject *__pyx_v_low, PyObject *__pyx_v_high); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_60smooth_colors(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_62write_vxl(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_64line_add(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_x2, int __pyx_v_y2, int __pyx_v_radius, double __pyx_v_depth); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_66line_set(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_x2, int __pyx_v_y2, int __pyx_v_radius, double __pyx_v_height); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_5width___get__(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self); /* proto */
static int __pyx_pf_8pyspades_8mapmaker_9HeightMap_5width_2__set__(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_6height___get__(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self); /* proto */
static int __pyx_pf_8pyspades_8mapmaker_9HeightMap_6height_2__set__(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_4hmap___get__(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self); /* proto */
static int __pyx_pf_8pyspades_8mapmaker_9HeightMap_4hmap_2__set__(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_8pyspades_8mapmaker_9HeightMap_4hmap_4__del__(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_4cmap___get__(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self); /* proto */
static int __pyx_pf_8pyspades_8mapmaker_9HeightMap_4cmap_2__set__(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_8pyspades_8mapmaker_9HeightMap_4cmap_4__del__(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_2make_color(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_r, int __pyx_v_g, int __pyx_v_b); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_4get_r(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_color); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_6get_g(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_color); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_8get_b(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_color); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_8Gradient___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_8Gradient_2set_step_rgb(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_step, PyObject *__pyx_v_rgb); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_8Gradient_4set_step_hsb(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_step, PyObject *__pyx_v_hsb); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_8Gradient_6rgb(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_start_pos, PyObject *__pyx_v_start_color, PyObject *__pyx_v_end_pos, PyObject *__pyx_v_end_color); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_8Gradient_8hsb(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_start_pos, PyObject *__pyx_v_start_color, PyObject *__pyx_v_end_pos, PyObject *__pyx_v_end_color); /* proto */
static PyObject *__pyx_pf_8pyspades_8mapmaker_8Gradient_10array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_8pyspades_8mapmaker_BiomeMap(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pyspades_8mapmaker_HeightMap(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_;
static PyObject *__pyx_float_0_5;
static PyObject *__pyx_float_100_;
static PyObject *__pyx_float_360_;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_32;
static PyObject *__pyx_int_63;
static PyObject *__pyx_int_255;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_int_neg_4;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_codeobj__7;
static PyObject *__pyx_codeobj__9;
static PyObject *__pyx_codeobj__12;
static PyObject *__pyx_codeobj__14;
static PyObject *__pyx_codeobj__16;
static PyObject *__pyx_codeobj__18;
static PyObject *__pyx_codeobj__20;
static PyObject *__pyx_codeobj__22;

/* "pyspades/mapmaker.pyx":30
 * cimport cython
 * 
 * def generate_classic(seed):             # <<<<<<<<<<<<<<
 *     cdef VXLData map = VXLData()
 *     genland(seed, map.map)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_1generate_classic(PyObject *__pyx_self, PyObject *__pyx_v_seed); /*proto*/
static PyMethodDef __pyx_mdef_8pyspades_8mapmaker_1generate_classic = {"generate_classic", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_1generate_classic, METH_O, 0};
static PyObject *__pyx_pw_8pyspades_8mapmaker_1generate_classic(PyObject *__pyx_self, PyObject *__pyx_v_seed) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("generate_classic (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_generate_classic(__pyx_self, ((PyObject *)__pyx_v_seed));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_generate_classic(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_seed) {
  struct __pyx_obj_8pyspades_3vxl_VXLData *__pyx_v_map = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  unsigned long __pyx_t_2;
  __Pyx_RefNannySetupContext("generate_classic", 0);

  /* "pyspades/mapmaker.pyx":31
 * 
 * def generate_classic(seed):
 *     cdef VXLData map = VXLData()             # <<<<<<<<<<<<<<
 *     genland(seed, map.map)
 *     return map
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8pyspades_3vxl_VXLData), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_map = ((struct __pyx_obj_8pyspades_3vxl_VXLData *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":32
 * def generate_classic(seed):
 *     cdef VXLData map = VXLData()
 *     genland(seed, map.map)             # <<<<<<<<<<<<<<
 *     return map
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_long(__pyx_v_seed); if (unlikely((__pyx_t_2 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 32, __pyx_L1_error)
  genland(__pyx_t_2, __pyx_v_map->map);

  /* "pyspades/mapmaker.pyx":33
 *     cdef VXLData map = VXLData()
 *     genland(seed, map.map)
 *     return map             # <<<<<<<<<<<<<<
 * 
 * class Biome(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_map));
  __pyx_r = ((PyObject *)__pyx_v_map);
  goto __pyx_L0;

  /* "pyspades/mapmaker.pyx":30
 * cimport cython
 * 
 * def generate_classic(seed):             # <<<<<<<<<<<<<<
 *     cdef VXLData map = VXLData()
 *     genland(seed, map.map)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.generate_classic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_map);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":36
 * 
 * class Biome(object):
 *     def __init__(self, gradient, height, variation, noise):             # <<<<<<<<<<<<<<
 *         """
 *         Create a biome with a Gradient object, typical height(0.0-1.0), and
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_5Biome_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_5Biome___init__[] = "\n        Create a biome with a Gradient object, typical height(0.0-1.0), and \n        height variation(0.0-1.0).\n        ";
static PyMethodDef __pyx_mdef_8pyspades_8mapmaker_5Biome_1__init__ = {"__init__", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_5Biome_1__init__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pyspades_8mapmaker_5Biome___init__};
static PyObject *__pyx_pw_8pyspades_8mapmaker_5Biome_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_gradient = 0;
  PyObject *__pyx_v_height = 0;
  PyObject *__pyx_v_variation = 0;
  PyObject *__pyx_v_noise = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_gradient,&__pyx_n_s_height,&__pyx_n_s_variation,&__pyx_n_s_noise,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gradient)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 1); __PYX_ERR(0, 36, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 2); __PYX_ERR(0, 36, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_variation)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 3); __PYX_ERR(0, 36, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_noise)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 4); __PYX_ERR(0, 36, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 36, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_self = values[0];
    __pyx_v_gradient = values[1];
    __pyx_v_height = values[2];
    __pyx_v_variation = values[3];
    __pyx_v_noise = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 36, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.Biome.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_5Biome___init__(__pyx_self, __pyx_v_self, __pyx_v_gradient, __pyx_v_height, __pyx_v_variation, __pyx_v_noise);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_5Biome___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_gradient, PyObject *__pyx_v_height, PyObject *__pyx_v_variation, PyObject *__pyx_v_noise) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pyspades/mapmaker.pyx":41
 *         height variation(0.0-1.0).
 *         """
 *         self.gradient = gradient             # <<<<<<<<<<<<<<
 *         self.height = height
 *         self.variation = variation
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_gradient, __pyx_v_gradient) < 0) __PYX_ERR(0, 41, __pyx_L1_error)

  /* "pyspades/mapmaker.pyx":42
 *         """
 *         self.gradient = gradient
 *         self.height = height             # <<<<<<<<<<<<<<
 *         self.variation = variation
 *         self.noise = noise
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_height, __pyx_v_height) < 0) __PYX_ERR(0, 42, __pyx_L1_error)

  /* "pyspades/mapmaker.pyx":43
 *         self.gradient = gradient
 *         self.height = height
 *         self.variation = variation             # <<<<<<<<<<<<<<
 *         self.noise = noise
 *         self.id = -1
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_variation, __pyx_v_variation) < 0) __PYX_ERR(0, 43, __pyx_L1_error)

  /* "pyspades/mapmaker.pyx":44
 *         self.height = height
 *         self.variation = variation
 *         self.noise = noise             # <<<<<<<<<<<<<<
 *         self.id = -1
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_noise, __pyx_v_noise) < 0) __PYX_ERR(0, 44, __pyx_L1_error)

  /* "pyspades/mapmaker.pyx":45
 *         self.variation = variation
 *         self.noise = noise
 *         self.id = -1             # <<<<<<<<<<<<<<
 * 
 * @cython.final
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_id, __pyx_int_neg_1) < 0) __PYX_ERR(0, 45, __pyx_L1_error)

  /* "pyspades/mapmaker.pyx":36
 * 
 * class Biome(object):
 *     def __init__(self, gradient, height, variation, noise):             # <<<<<<<<<<<<<<
 *         """
 *         Create a biome with a Gradient object, typical height(0.0-1.0), and
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.Biome.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":59
 *     cdef public list tmap
 *     cdef public list gradients
 *     def __init__(self, biomes, width=32, height=32):             # <<<<<<<<<<<<<<
 *         self.biomes = biomes
 *         self.width = width
 */

/* Python wrapper */
static int __pyx_pw_8pyspades_8mapmaker_8BiomeMap_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pyspades_8mapmaker_8BiomeMap_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_biomes = 0;
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_biomes,&__pyx_n_s_width,&__pyx_n_s_height,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_int_32);
    values[2] = ((PyObject *)__pyx_int_32);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_biomes)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 59, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_biomes = values[0];
    __pyx_v_width = values[1];
    __pyx_v_height = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 59, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8BiomeMap___init__(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self), __pyx_v_biomes, __pyx_v_width, __pyx_v_height);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap___init__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_biomes, PyObject *__pyx_v_width, PyObject *__pyx_v_height) {
  Py_ssize_t __pyx_v_n;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pyspades/mapmaker.pyx":60
 *     cdef public list gradients
 *     def __init__(self, biomes, width=32, height=32):
 *         self.biomes = biomes             # <<<<<<<<<<<<<<
 *         self.width = width
 *         self.height = height
 */
  if (!(likely(PyList_CheckExact(__pyx_v_biomes))||((__pyx_v_biomes) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_biomes)->tp_name), 0))) __PYX_ERR(0, 60, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_biomes;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->biomes);
  __Pyx_DECREF(__pyx_v_self->biomes);
  __pyx_v_self->biomes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":61
 *     def __init__(self, biomes, width=32, height=32):
 *         self.biomes = biomes
 *         self.width = width             # <<<<<<<<<<<<<<
 *         self.height = height
 *         self.twidth = 512//self.width
 */
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_width); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 61, __pyx_L1_error)
  __pyx_v_self->width = __pyx_t_2;

  /* "pyspades/mapmaker.pyx":62
 *         self.biomes = biomes
 *         self.width = width
 *         self.height = height             # <<<<<<<<<<<<<<
 *         self.twidth = 512//self.width
 *         self.theight = 512//self.height
 */
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_height); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 62, __pyx_L1_error)
  __pyx_v_self->height = __pyx_t_2;

  /* "pyspades/mapmaker.pyx":63
 *         self.width = width
 *         self.height = height
 *         self.twidth = 512//self.width             # <<<<<<<<<<<<<<
 *         self.theight = 512//self.height
 *         self.tmap = [biomes[0] for n in xrange(self.width*self.height)]
 */
  if (unlikely(__pyx_v_self->width == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 63, __pyx_L1_error)
  }
  else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_self->width == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(0x200))) {
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    __PYX_ERR(0, 63, __pyx_L1_error)
  }
  __pyx_v_self->twidth = __Pyx_div_long(0x200, __pyx_v_self->width);

  /* "pyspades/mapmaker.pyx":64
 *         self.height = height
 *         self.twidth = 512//self.width
 *         self.theight = 512//self.height             # <<<<<<<<<<<<<<
 *         self.tmap = [biomes[0] for n in xrange(self.width*self.height)]
 *         self.gradients = []
 */
  if (unlikely(__pyx_v_self->height == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 64, __pyx_L1_error)
  }
  else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_self->height == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(0x200))) {
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    __PYX_ERR(0, 64, __pyx_L1_error)
  }
  __pyx_v_self->theight = __Pyx_div_long(0x200, __pyx_v_self->height);

  /* "pyspades/mapmaker.pyx":65
 *         self.twidth = 512//self.width
 *         self.theight = 512//self.height
 *         self.tmap = [biomes[0] for n in xrange(self.width*self.height)]             # <<<<<<<<<<<<<<
 *         self.gradients = []
 *         for n in xrange(len(biomes)):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_v_self->width * __pyx_v_self->height);
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_n = __pyx_t_3;
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_biomes, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 65, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->tmap);
  __Pyx_DECREF(__pyx_v_self->tmap);
  __pyx_v_self->tmap = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":66
 *         self.theight = 512//self.height
 *         self.tmap = [biomes[0] for n in xrange(self.width*self.height)]
 *         self.gradients = []             # <<<<<<<<<<<<<<
 *         for n in xrange(len(biomes)):
 *             biomes[n].id = n
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->gradients);
  __Pyx_DECREF(__pyx_v_self->gradients);
  __pyx_v_self->gradients = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":67
 *         self.tmap = [biomes[0] for n in xrange(self.width*self.height)]
 *         self.gradients = []
 *         for n in xrange(len(biomes)):             # <<<<<<<<<<<<<<
 *             biomes[n].id = n
 *             self.gradients.append(biomes[n].gradient)
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_biomes); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 67, __pyx_L1_error)
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_3; __pyx_t_5+=1) {
    __pyx_v_n = __pyx_t_5;

    /* "pyspades/mapmaker.pyx":68
 *         self.gradients = []
 *         for n in xrange(len(biomes)):
 *             biomes[n].id = n             # <<<<<<<<<<<<<<
 *             self.gradients.append(biomes[n].gradient)
 *     cpdef inline object get_repeat(self, int x, int y):
 */
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_biomes, __pyx_v_n, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_PyObject_SetAttrStr(__pyx_t_4, __pyx_n_s_id, __pyx_t_1) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyspades/mapmaker.pyx":69
 *         for n in xrange(len(biomes)):
 *             biomes[n].id = n
 *             self.gradients.append(biomes[n].gradient)             # <<<<<<<<<<<<<<
 *     cpdef inline object get_repeat(self, int x, int y):
 *         """This allows the algorithm to tile at the edges."""
 */
    if (unlikely(__pyx_v_self->gradients == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
      __PYX_ERR(0, 69, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_biomes, __pyx_v_n, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_gradient); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_self->gradients, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 69, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades/mapmaker.pyx":59
 *     cdef public list tmap
 *     cdef public list gradients
 *     def __init__(self, biomes, width=32, height=32):             # <<<<<<<<<<<<<<
 *         self.biomes = biomes
 *         self.width = width
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":70
 *             biomes[n].id = n
 *             self.gradients.append(biomes[n].gradient)
 *     cpdef inline object get_repeat(self, int x, int y):             # <<<<<<<<<<<<<<
 *         """This allows the algorithm to tile at the edges."""
 *         return self.tmap[(x%self.width)+(y%self.height)*self.width]
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_3get_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_get_repeat(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_repeat", 0);

  /* "pyspades/mapmaker.pyx":72
 *     cpdef inline object get_repeat(self, int x, int y):
 *         """This allows the algorithm to tile at the edges."""
 *         return self.tmap[(x%self.width)+(y%self.height)*self.width]             # <<<<<<<<<<<<<<
 *     cpdef inline set_repeat(self, int x, int y, object val):
 *         """This allows the algorithm to tile at the edges."""
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->tmap == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 72, __pyx_L1_error)
  }
  if (unlikely(__pyx_v_self->width == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 72, __pyx_L1_error)
  }
  if (unlikely(__pyx_v_self->height == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 72, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_mod_int(__pyx_v_x, __pyx_v_self->width) + (__Pyx_mod_int(__pyx_v_y, __pyx_v_self->height) * __pyx_v_self->width));
  __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_self->tmap, __pyx_t_1, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyspades/mapmaker.pyx":70
 *             biomes[n].id = n
 *             self.gradients.append(biomes[n].gradient)
 *     cpdef inline object get_repeat(self, int x, int y):             # <<<<<<<<<<<<<<
 *         """This allows the algorithm to tile at the edges."""
 *         return self.tmap[(x%self.width)+(y%self.height)*self.width]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.get_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_3get_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_8BiomeMap_2get_repeat[] = "This allows the algorithm to tile at the edges.";
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_3get_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_repeat (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_repeat", 1, 2, 2, 1); __PYX_ERR(0, 70, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_repeat") < 0)) __PYX_ERR(0, 70, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 70, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 70, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_repeat", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 70, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.get_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8BiomeMap_2get_repeat(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_2get_repeat(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_repeat", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_8BiomeMap_get_repeat(__pyx_v_self, __pyx_v_x, __pyx_v_y, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.get_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":73
 *         """This allows the algorithm to tile at the edges."""
 *         return self.tmap[(x%self.width)+(y%self.height)*self.width]
 *     cpdef inline set_repeat(self, int x, int y, object val):             # <<<<<<<<<<<<<<
 *         """This allows the algorithm to tile at the edges."""
 *         self.tmap[(x%self.width)+(y%self.height)*self.width] = val
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_5set_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_set_repeat(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, PyObject *__pyx_v_val, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("set_repeat", 0);

  /* "pyspades/mapmaker.pyx":75
 *     cpdef inline set_repeat(self, int x, int y, object val):
 *         """This allows the algorithm to tile at the edges."""
 *         self.tmap[(x%self.width)+(y%self.height)*self.width] = val             # <<<<<<<<<<<<<<
 *     cpdef noise(self):
 *         for idx in xrange(len(self.tmap)):
 */
  if (unlikely(__pyx_v_self->tmap == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 75, __pyx_L1_error)
  }
  if (unlikely(__pyx_v_self->width == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 75, __pyx_L1_error)
  }
  if (unlikely(__pyx_v_self->height == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 75, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_mod_int(__pyx_v_x, __pyx_v_self->width) + (__Pyx_mod_int(__pyx_v_y, __pyx_v_self->height) * __pyx_v_self->width));
  if (unlikely(__Pyx_SetItemInt(__pyx_v_self->tmap, __pyx_t_1, __pyx_v_val, int, 1, __Pyx_PyInt_From_int, 1, 1, 1) < 0)) __PYX_ERR(0, 75, __pyx_L1_error)

  /* "pyspades/mapmaker.pyx":73
 *         """This allows the algorithm to tile at the edges."""
 *         return self.tmap[(x%self.width)+(y%self.height)*self.width]
 *     cpdef inline set_repeat(self, int x, int y, object val):             # <<<<<<<<<<<<<<
 *         """This allows the algorithm to tile at the edges."""
 *         self.tmap[(x%self.width)+(y%self.height)*self.width] = val
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.set_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_5set_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_8BiomeMap_4set_repeat[] = "This allows the algorithm to tile at the edges.";
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_5set_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  PyObject *__pyx_v_val = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_repeat (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_val,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_repeat", 1, 3, 3, 1); __PYX_ERR(0, 73, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_repeat", 1, 3, 3, 2); __PYX_ERR(0, 73, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_repeat") < 0)) __PYX_ERR(0, 73, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_x = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 73, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 73, __pyx_L3_error)
    __pyx_v_val = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_repeat", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 73, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.set_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8BiomeMap_4set_repeat(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_val);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_4set_repeat(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, PyObject *__pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_repeat", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_8BiomeMap_set_repeat(__pyx_v_self, __pyx_v_x, __pyx_v_y, __pyx_v_val, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.set_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":76
 *         """This allows the algorithm to tile at the edges."""
 *         self.tmap[(x%self.width)+(y%self.height)*self.width] = val
 *     cpdef noise(self):             # <<<<<<<<<<<<<<
 *         for idx in xrange(len(self.tmap)):
 *             self.tmap[idx] = random.choice(self.biomes)
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_7noise(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_noise(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  Py_ssize_t __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("noise", 0);

  /* "pyspades/mapmaker.pyx":77
 *         self.tmap[(x%self.width)+(y%self.height)*self.width] = val
 *     cpdef noise(self):
 *         for idx in xrange(len(self.tmap)):             # <<<<<<<<<<<<<<
 *             self.tmap[idx] = random.choice(self.biomes)
 *     cpdef random_points(self, qty, biome, x=0, y=0, w=None,
 */
  __pyx_t_1 = __pyx_v_self->tmap;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 77, __pyx_L1_error)
  }
  __pyx_t_2 = PyList_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_idx = __pyx_t_3;

    /* "pyspades/mapmaker.pyx":78
 *     cpdef noise(self):
 *         for idx in xrange(len(self.tmap)):
 *             self.tmap[idx] = random.choice(self.biomes)             # <<<<<<<<<<<<<<
 *     cpdef random_points(self, qty, biome, x=0, y=0, w=None,
 *                        h=None):
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_random); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_choice); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_self->biomes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 78, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_v_self->biomes);
      __Pyx_GIVEREF(__pyx_v_self->biomes);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_self->biomes);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v_self->tmap == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 78, __pyx_L1_error)
    }
    if (unlikely(__Pyx_SetItemInt(__pyx_v_self->tmap, __pyx_v_idx, __pyx_t_1, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1) < 0)) __PYX_ERR(0, 78, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades/mapmaker.pyx":76
 *         """This allows the algorithm to tile at the edges."""
 *         self.tmap[(x%self.width)+(y%self.height)*self.width] = val
 *     cpdef noise(self):             # <<<<<<<<<<<<<<
 *         for idx in xrange(len(self.tmap)):
 *             self.tmap[idx] = random.choice(self.biomes)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.noise", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_7noise(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_7noise(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("noise (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6noise(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_6noise(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("noise", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_8BiomeMap_noise(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.noise", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":79
 *         for idx in xrange(len(self.tmap)):
 *             self.tmap[idx] = random.choice(self.biomes)
 *     cpdef random_points(self, qty, biome, x=0, y=0, w=None,             # <<<<<<<<<<<<<<
 *                        h=None):
 *         """Generate some points for point_flood()"""
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_9random_points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_random_points(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_qty, PyObject *__pyx_v_biome, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_8mapmaker_8BiomeMap_random_points *__pyx_optional_args) {
  PyObject *__pyx_v_x = ((PyObject *)__pyx_int_0);
  PyObject *__pyx_v_y = ((PyObject *)__pyx_int_0);
  PyObject *__pyx_v_w = ((PyObject *)Py_None);

  /* "pyspades/mapmaker.pyx":80
 *             self.tmap[idx] = random.choice(self.biomes)
 *     cpdef random_points(self, qty, biome, x=0, y=0, w=None,
 *                        h=None):             # <<<<<<<<<<<<<<
 *         """Generate some points for point_flood()"""
 *         result = []
 */
  PyObject *__pyx_v_h = ((PyObject *)Py_None);
  PyObject *__pyx_v_result = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  __Pyx_RefNannySetupContext("random_points", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_x = __pyx_optional_args->x;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_y = __pyx_optional_args->y;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_w = __pyx_optional_args->w;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_h = __pyx_optional_args->h;
          }
        }
      }
    }
  }
  __Pyx_INCREF(__pyx_v_w);
  __Pyx_INCREF(__pyx_v_h);

  /* "pyspades/mapmaker.pyx":82
 *                        h=None):
 *         """Generate some points for point_flood()"""
 *         result = []             # <<<<<<<<<<<<<<
 *         if w is None:
 *             w = self.width
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":83
 *         """Generate some points for point_flood()"""
 *         result = []
 *         if w is None:             # <<<<<<<<<<<<<<
 *             w = self.width
 *         if h is None:
 */
  __pyx_t_2 = (__pyx_v_w == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pyspades/mapmaker.pyx":84
 *         result = []
 *         if w is None:
 *             w = self.width             # <<<<<<<<<<<<<<
 *         if h is None:
 *             h = self.height
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_w, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":83
 *         """Generate some points for point_flood()"""
 *         result = []
 *         if w is None:             # <<<<<<<<<<<<<<
 *             w = self.width
 *         if h is None:
 */
  }

  /* "pyspades/mapmaker.pyx":85
 *         if w is None:
 *             w = self.width
 *         if h is None:             # <<<<<<<<<<<<<<
 *             h = self.height
 *         for n in xrange(qty):
 */
  __pyx_t_3 = (__pyx_v_h == Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "pyspades/mapmaker.pyx":86
 *             w = self.width
 *         if h is None:
 *             h = self.height             # <<<<<<<<<<<<<<
 *         for n in xrange(qty):
 *             result.append((random.randint(x,x+w),
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->height); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_h, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":85
 *         if w is None:
 *             w = self.width
 *         if h is None:             # <<<<<<<<<<<<<<
 *             h = self.height
 *         for n in xrange(qty):
 */
  }

  /* "pyspades/mapmaker.pyx":87
 *         if h is None:
 *             h = self.height
 *         for n in xrange(qty):             # <<<<<<<<<<<<<<
 *             result.append((random.randint(x,x+w),
 *                          random.randint(y,y+h),
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_qty);
  __Pyx_GIVEREF(__pyx_v_qty);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_qty);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_1 = __pyx_t_4; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 87, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 87, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 87, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 87, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 87, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_6(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 87, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "pyspades/mapmaker.pyx":88
 *             h = self.height
 *         for n in xrange(qty):
 *             result.append((random.randint(x,x+w),             # <<<<<<<<<<<<<<
 *                          random.randint(y,y+h),
 *                          biome))
 */
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_random); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_randint); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Add(__pyx_v_x, __pyx_v_w); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_10 = 1;
      }
    }
    __pyx_t_11 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_INCREF(__pyx_v_x);
    __Pyx_GIVEREF(__pyx_v_x);
    PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_v_x);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_11, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "pyspades/mapmaker.pyx":89
 *         for n in xrange(qty):
 *             result.append((random.randint(x,x+w),
 *                          random.randint(y,y+h),             # <<<<<<<<<<<<<<
 *                          biome))
 *         return result
 */
    __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_random); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_randint); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = PyNumber_Add(__pyx_v_y, __pyx_v_h); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_10 = 1;
      }
    }
    __pyx_t_12 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_INCREF(__pyx_v_y);
    __Pyx_GIVEREF(__pyx_v_y);
    PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_10, __pyx_v_y);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_10, __pyx_t_11);
    __pyx_t_11 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_12, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pyspades/mapmaker.pyx":88
 *             h = self.height
 *         for n in xrange(qty):
 *             result.append((random.randint(x,x+w),             # <<<<<<<<<<<<<<
 *                          random.randint(y,y+h),
 *                          biome))
 */
    __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
    __Pyx_INCREF(__pyx_v_biome);
    __Pyx_GIVEREF(__pyx_v_biome);
    PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_v_biome);
    __pyx_t_4 = 0;
    __pyx_t_8 = 0;
    __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pyspades/mapmaker.pyx":87
 *         if h is None:
 *             h = self.height
 *         for n in xrange(qty):             # <<<<<<<<<<<<<<
 *             result.append((random.randint(x,x+w),
 *                          random.randint(y,y+h),
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":91
 *                          random.randint(y,y+h),
 *                          biome))
 *         return result             # <<<<<<<<<<<<<<
 *     cpdef point_flood(self, points):
 *         """Each tuple of (x,y,biome) in the "points" list
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "pyspades/mapmaker.pyx":79
 *         for idx in xrange(len(self.tmap)):
 *             self.tmap[idx] = random.choice(self.biomes)
 *     cpdef random_points(self, qty, biome, x=0, y=0, w=None,             # <<<<<<<<<<<<<<
 *                        h=None):
 *         """Generate some points for point_flood()"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.random_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_w);
  __Pyx_XDECREF(__pyx_v_h);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_9random_points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_8BiomeMap_8random_points[] = "Generate some points for point_flood()";
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_9random_points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_qty = 0;
  PyObject *__pyx_v_biome = 0;
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_w = 0;
  PyObject *__pyx_v_h = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("random_points (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_qty,&__pyx_n_s_biome,&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_w,&__pyx_n_s_h,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[2] = ((PyObject *)__pyx_int_0);
    values[3] = ((PyObject *)__pyx_int_0);
    values[4] = ((PyObject *)Py_None);

    /* "pyspades/mapmaker.pyx":80
 *             self.tmap[idx] = random.choice(self.biomes)
 *     cpdef random_points(self, qty, biome, x=0, y=0, w=None,
 *                        h=None):             # <<<<<<<<<<<<<<
 *         """Generate some points for point_flood()"""
 *         result = []
 */
    values[5] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_qty)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_biome)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("random_points", 0, 2, 6, 1); __PYX_ERR(0, 79, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_w);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_h);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "random_points") < 0)) __PYX_ERR(0, 79, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_qty = values[0];
    __pyx_v_biome = values[1];
    __pyx_v_x = values[2];
    __pyx_v_y = values[3];
    __pyx_v_w = values[4];
    __pyx_v_h = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("random_points", 0, 2, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 79, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.random_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8BiomeMap_8random_points(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self), __pyx_v_qty, __pyx_v_biome, __pyx_v_x, __pyx_v_y, __pyx_v_w, __pyx_v_h);

  /* "pyspades/mapmaker.pyx":79
 *         for idx in xrange(len(self.tmap)):
 *             self.tmap[idx] = random.choice(self.biomes)
 *     cpdef random_points(self, qty, biome, x=0, y=0, w=None,             # <<<<<<<<<<<<<<
 *                        h=None):
 *         """Generate some points for point_flood()"""
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_8random_points(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_qty, PyObject *__pyx_v_biome, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_w, PyObject *__pyx_v_h) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_8pyspades_8mapmaker_8BiomeMap_random_points __pyx_t_2;
  __Pyx_RefNannySetupContext("random_points", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 4;
  __pyx_t_2.x = __pyx_v_x;
  __pyx_t_2.y = __pyx_v_y;
  __pyx_t_2.w = __pyx_v_w;
  __pyx_t_2.h = __pyx_v_h;
  __pyx_t_1 = __pyx_vtabptr_8pyspades_8mapmaker_BiomeMap->random_points(__pyx_v_self, __pyx_v_qty, __pyx_v_biome, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.random_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":92
 *                          biome))
 *         return result
 *     cpdef point_flood(self, points):             # <<<<<<<<<<<<<<
 *         """Each tuple of (x,y,biome) in the "points" list
 *         is round-robined through a flooding
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_11point_flood(PyObject *__pyx_v_self, PyObject *__pyx_v_points); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_point_flood(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_points, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_openp = NULL;
  PyObject *__pyx_v_closedp = NULL;
  CYTHON_UNUSED long __pyx_v_biomeid;
  PyObject *__pyx_v_plist = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  __Pyx_RefNannySetupContext("point_flood", 0);

  /* "pyspades/mapmaker.pyx":98
 *         so that the flooding is as even as possible."""
 * 
 *         openp = deque([deque([p]) for p in points])             # <<<<<<<<<<<<<<
 *         closedp = set([])
 *         biomeid = 0
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_deque); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(PyList_CheckExact(__pyx_v_points)) || PyTuple_CheckExact(__pyx_v_points)) {
    __pyx_t_4 = __pyx_v_points; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_points); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 98, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 98, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 98, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 98, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 98, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 98, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_deque); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyList_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_v_p);
    __Pyx_GIVEREF(__pyx_v_p);
    PyList_SET_ITEM(__pyx_t_9, 0, __pyx_v_p);
    __pyx_t_10 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (!__pyx_t_10) {
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 98, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_7);
    } else {
      __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 98, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_11, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 98, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_openp = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":99
 * 
 *         openp = deque([deque([p]) for p in points])
 *         closedp = set([])             # <<<<<<<<<<<<<<
 *         biomeid = 0
 * 
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_closedp = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":100
 *         openp = deque([deque([p]) for p in points])
 *         closedp = set([])
 *         biomeid = 0             # <<<<<<<<<<<<<<
 * 
 *         while len(openp)>0:
 */
  __pyx_v_biomeid = 0;

  /* "pyspades/mapmaker.pyx":102
 *         biomeid = 0
 * 
 *         while len(openp)>0:             # <<<<<<<<<<<<<<
 *             plist = openp.popleft()
 *             p = plist.popleft()
 */
  while (1) {
    __pyx_t_5 = PyObject_Length(__pyx_v_openp); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 102, __pyx_L1_error)
    __pyx_t_12 = ((__pyx_t_5 > 0) != 0);
    if (!__pyx_t_12) break;

    /* "pyspades/mapmaker.pyx":103
 * 
 *         while len(openp)>0:
 *             plist = openp.popleft()             # <<<<<<<<<<<<<<
 *             p = plist.popleft()
 *             closedp.add((p[0],p[1]))
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_openp, __pyx_n_s_popleft); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_7) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_plist, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":104
 *         while len(openp)>0:
 *             plist = openp.popleft()
 *             p = plist.popleft()             # <<<<<<<<<<<<<<
 *             closedp.add((p[0],p[1]))
 *             self.set_repeat(p[0],p[1],p[2])
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_plist, __pyx_n_s_popleft); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_7) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":105
 *             plist = openp.popleft()
 *             p = plist.popleft()
 *             closedp.add((p[0],p[1]))             # <<<<<<<<<<<<<<
 *             self.set_repeat(p[0],p[1],p[2])
 *             if p[0]>0 and (p[0]-1,p[1]) not in closedp:
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_p, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_p, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_2);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_t_13 = PySet_Add(__pyx_v_closedp, __pyx_t_7); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 105, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pyspades/mapmaker.pyx":106
 *             p = plist.popleft()
 *             closedp.add((p[0],p[1]))
 *             self.set_repeat(p[0],p[1],p[2])             # <<<<<<<<<<<<<<
 *             if p[0]>0 and (p[0]-1,p[1]) not in closedp:
 *                 plist.append((p[0]-1,p[1],p[2]))
 */
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_p, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 106, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_p, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 106, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_p, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __pyx_f_8pyspades_8mapmaker_8BiomeMap_set_repeat(__pyx_v_self, __pyx_t_14, __pyx_t_15, __pyx_t_7, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyspades/mapmaker.pyx":107
 *             closedp.add((p[0],p[1]))
 *             self.set_repeat(p[0],p[1],p[2])
 *             if p[0]>0 and (p[0]-1,p[1]) not in closedp:             # <<<<<<<<<<<<<<
 *                 plist.append((p[0]-1,p[1],p[2]))
 *             if p[0]<self.width-1 and (p[0]+1,p[1]) not in closedp:
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_p, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_2, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_16 < 0)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_16) {
    } else {
      __pyx_t_12 = __pyx_t_16;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_p, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_t_7, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_p, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_7);
    __pyx_t_2 = 0;
    __pyx_t_7 = 0;
    __pyx_t_16 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_v_closedp, Py_NE)); if (unlikely(__pyx_t_16 < 0)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_17 = (__pyx_t_16 != 0);
    __pyx_t_12 = __pyx_t_17;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_12) {

      /* "pyspades/mapmaker.pyx":108
 *             self.set_repeat(p[0],p[1],p[2])
 *             if p[0]>0 and (p[0]-1,p[1]) not in closedp:
 *                 plist.append((p[0]-1,p[1],p[2]))             # <<<<<<<<<<<<<<
 *             if p[0]<self.width-1 and (p[0]+1,p[1]) not in closedp:
 *                 plist.append((p[0]+1,p[1],p[2]))
 */
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_p, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyInt_SubtractObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 108, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_p, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_p, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 108, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 108, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
      __pyx_t_7 = 0;
      __pyx_t_1 = 0;
      __pyx_t_2 = 0;
      __pyx_t_13 = __Pyx_PyObject_Append(__pyx_v_plist, __pyx_t_3); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 108, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pyspades/mapmaker.pyx":107
 *             closedp.add((p[0],p[1]))
 *             self.set_repeat(p[0],p[1],p[2])
 *             if p[0]>0 and (p[0]-1,p[1]) not in closedp:             # <<<<<<<<<<<<<<
 *                 plist.append((p[0]-1,p[1],p[2]))
 *             if p[0]<self.width-1 and (p[0]+1,p[1]) not in closedp:
 */
    }

    /* "pyspades/mapmaker.pyx":109
 *             if p[0]>0 and (p[0]-1,p[1]) not in closedp:
 *                 plist.append((p[0]-1,p[1],p[2]))
 *             if p[0]<self.width-1 and (p[0]+1,p[1]) not in closedp:             # <<<<<<<<<<<<<<
 *                 plist.append((p[0]+1,p[1],p[2]))
 *             if p[1]>0 and (p[0],p[1]-1) not in closedp:
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_p, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_v_self->width - 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_17 < 0)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_17) {
    } else {
      __pyx_t_12 = __pyx_t_17;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_p, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_p, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_1 = 0;
    __pyx_t_17 = (__Pyx_PySequence_ContainsTF(__pyx_t_3, __pyx_v_closedp, Py_NE)); if (unlikely(__pyx_t_17 < 0)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_16 = (__pyx_t_17 != 0);
    __pyx_t_12 = __pyx_t_16;
    __pyx_L11_bool_binop_done:;
    if (__pyx_t_12) {

      /* "pyspades/mapmaker.pyx":110
 *                 plist.append((p[0]-1,p[1],p[2]))
 *             if p[0]<self.width-1 and (p[0]+1,p[1]) not in closedp:
 *                 plist.append((p[0]+1,p[1],p[2]))             # <<<<<<<<<<<<<<
 *             if p[1]>0 and (p[0],p[1]-1) not in closedp:
 *                 plist.append((p[0],p[1]-1,p[2]))
 */
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_p, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 110, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 110, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_p, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 110, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_p, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 110, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 110, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_2);
      __pyx_t_1 = 0;
      __pyx_t_3 = 0;
      __pyx_t_2 = 0;
      __pyx_t_13 = __Pyx_PyObject_Append(__pyx_v_plist, __pyx_t_7); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 110, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "pyspades/mapmaker.pyx":109
 *             if p[0]>0 and (p[0]-1,p[1]) not in closedp:
 *                 plist.append((p[0]-1,p[1],p[2]))
 *             if p[0]<self.width-1 and (p[0]+1,p[1]) not in closedp:             # <<<<<<<<<<<<<<
 *                 plist.append((p[0]+1,p[1],p[2]))
 *             if p[1]>0 and (p[0],p[1]-1) not in closedp:
 */
    }

    /* "pyspades/mapmaker.pyx":111
 *             if p[0]<self.width-1 and (p[0]+1,p[1]) not in closedp:
 *                 plist.append((p[0]+1,p[1],p[2]))
 *             if p[1]>0 and (p[0],p[1]-1) not in closedp:             # <<<<<<<<<<<<<<
 *                 plist.append((p[0],p[1]-1,p[2]))
 *             if p[1]<self.height-1 and (p[0],p[1]+1) not in closedp:
 */
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_p, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_7, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_16 < 0)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_16) {
    } else {
      __pyx_t_12 = __pyx_t_16;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_p, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_p, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = __Pyx_PyInt_SubtractObjC(__pyx_t_7, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_3);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_16 = (__Pyx_PySequence_ContainsTF(__pyx_t_7, __pyx_v_closedp, Py_NE)); if (unlikely(__pyx_t_16 < 0)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_17 = (__pyx_t_16 != 0);
    __pyx_t_12 = __pyx_t_17;
    __pyx_L14_bool_binop_done:;
    if (__pyx_t_12) {

      /* "pyspades/mapmaker.pyx":112
 *                 plist.append((p[0]+1,p[1],p[2]))
 *             if p[1]>0 and (p[0],p[1]-1) not in closedp:
 *                 plist.append((p[0],p[1]-1,p[2]))             # <<<<<<<<<<<<<<
 *             if p[1]<self.height-1 and (p[0],p[1]+1) not in closedp:
 *                 plist.append((p[0],p[1]+1,p[2]))
 */
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_p, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 112, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_p, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 112, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 112, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_p, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 112, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 112, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_3);
      __pyx_t_7 = 0;
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_13 = __Pyx_PyObject_Append(__pyx_v_plist, __pyx_t_1); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 112, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pyspades/mapmaker.pyx":111
 *             if p[0]<self.width-1 and (p[0]+1,p[1]) not in closedp:
 *                 plist.append((p[0]+1,p[1],p[2]))
 *             if p[1]>0 and (p[0],p[1]-1) not in closedp:             # <<<<<<<<<<<<<<
 *                 plist.append((p[0],p[1]-1,p[2]))
 *             if p[1]<self.height-1 and (p[0],p[1]+1) not in closedp:
 */
    }

    /* "pyspades/mapmaker.pyx":113
 *             if p[1]>0 and (p[0],p[1]-1) not in closedp:
 *                 plist.append((p[0],p[1]-1,p[2]))
 *             if p[1]<self.height-1 and (p[0],p[1]+1) not in closedp:             # <<<<<<<<<<<<<<
 *                 plist.append((p[0],p[1]+1,p[2]))
 *             if len(plist)>0:
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_p, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_From_long((__pyx_v_self->height - 1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_17 < 0)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_17) {
    } else {
      __pyx_t_12 = __pyx_t_17;
      goto __pyx_L17_bool_binop_done;
    }
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_p, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_p, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_1 = 0;
    __pyx_t_17 = (__Pyx_PySequence_ContainsTF(__pyx_t_3, __pyx_v_closedp, Py_NE)); if (unlikely(__pyx_t_17 < 0)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_16 = (__pyx_t_17 != 0);
    __pyx_t_12 = __pyx_t_16;
    __pyx_L17_bool_binop_done:;
    if (__pyx_t_12) {

      /* "pyspades/mapmaker.pyx":114
 *                 plist.append((p[0],p[1]-1,p[2]))
 *             if p[1]<self.height-1 and (p[0],p[1]+1) not in closedp:
 *                 plist.append((p[0],p[1]+1,p[2]))             # <<<<<<<<<<<<<<
 *             if len(plist)>0:
 *                 openp.append(plist)
 */
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_p, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 114, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_p, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 114, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 114, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_p, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 114, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 114, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_1);
      __pyx_t_3 = 0;
      __pyx_t_2 = 0;
      __pyx_t_1 = 0;
      __pyx_t_13 = __Pyx_PyObject_Append(__pyx_v_plist, __pyx_t_7); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 114, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "pyspades/mapmaker.pyx":113
 *             if p[1]>0 and (p[0],p[1]-1) not in closedp:
 *                 plist.append((p[0],p[1]-1,p[2]))
 *             if p[1]<self.height-1 and (p[0],p[1]+1) not in closedp:             # <<<<<<<<<<<<<<
 *                 plist.append((p[0],p[1]+1,p[2]))
 *             if len(plist)>0:
 */
    }

    /* "pyspades/mapmaker.pyx":115
 *             if p[1]<self.height-1 and (p[0],p[1]+1) not in closedp:
 *                 plist.append((p[0],p[1]+1,p[2]))
 *             if len(plist)>0:             # <<<<<<<<<<<<<<
 *                 openp.append(plist)
 * 
 */
    __pyx_t_5 = PyObject_Length(__pyx_v_plist); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 115, __pyx_L1_error)
    __pyx_t_12 = ((__pyx_t_5 > 0) != 0);
    if (__pyx_t_12) {

      /* "pyspades/mapmaker.pyx":116
 *                 plist.append((p[0],p[1]+1,p[2]))
 *             if len(plist)>0:
 *                 openp.append(plist)             # <<<<<<<<<<<<<<
 * 
 *     cpdef jitter(self):
 */
      __pyx_t_13 = __Pyx_PyObject_Append(__pyx_v_openp, __pyx_v_plist); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 116, __pyx_L1_error)

      /* "pyspades/mapmaker.pyx":115
 *             if p[1]<self.height-1 and (p[0],p[1]+1) not in closedp:
 *                 plist.append((p[0],p[1]+1,p[2]))
 *             if len(plist)>0:             # <<<<<<<<<<<<<<
 *                 openp.append(plist)
 * 
 */
    }
  }

  /* "pyspades/mapmaker.pyx":92
 *                          biome))
 *         return result
 *     cpdef point_flood(self, points):             # <<<<<<<<<<<<<<
 *         """Each tuple of (x,y,biome) in the "points" list
 *         is round-robined through a flooding
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.point_flood", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_openp);
  __Pyx_XDECREF(__pyx_v_closedp);
  __Pyx_XDECREF(__pyx_v_plist);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_11point_flood(PyObject *__pyx_v_self, PyObject *__pyx_v_points); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_8BiomeMap_10point_flood[] = "Each tuple of (x,y,biome) in the \"points\" list\n        is round-robined through a flooding\n        algorithm. The algorithm uses one queue for each flood,\n        so that the flooding is as even as possible.";
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_11point_flood(PyObject *__pyx_v_self, PyObject *__pyx_v_points) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("point_flood (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8BiomeMap_10point_flood(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self), ((PyObject *)__pyx_v_points));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_10point_flood(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_points) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("point_flood", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_8BiomeMap_point_flood(__pyx_v_self, __pyx_v_points, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.point_flood", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":118
 *                 openp.append(plist)
 * 
 *     cpdef jitter(self):             # <<<<<<<<<<<<<<
 *         cdef int x
 *         cdef int y
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_13jitter(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_jitter(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_x;
  int __pyx_v_y;
  PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("jitter", 0);

  /* "pyspades/mapmaker.pyx":121
 *         cdef int x
 *         cdef int y
 *         for idx in xrange(len(self.tmap)):             # <<<<<<<<<<<<<<
 *             x = idx % self.width
 *             y = idx // self.height
 */
  __pyx_t_1 = __pyx_v_self->tmap;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 121, __pyx_L1_error)
  }
  __pyx_t_2 = PyList_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_2 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 121, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_1); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 121, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 121, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_1); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 121, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 121, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 121, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":122
 *         cdef int y
 *         for idx in xrange(len(self.tmap)):
 *             x = idx % self.width             # <<<<<<<<<<<<<<
 *             y = idx // self.height
 *             self.tmap[idx] = self.get_repeat(x + random.randint(-1,1),
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyNumber_Remainder(__pyx_v_idx, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 122, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_x = __pyx_t_6;

    /* "pyspades/mapmaker.pyx":123
 *         for idx in xrange(len(self.tmap)):
 *             x = idx % self.width
 *             y = idx // self.height             # <<<<<<<<<<<<<<
 *             self.tmap[idx] = self.get_repeat(x + random.randint(-1,1),
 *                                              y + random.randint(-1,1))
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->height); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyNumber_FloorDivide(__pyx_v_idx, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 123, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_y = __pyx_t_6;

    /* "pyspades/mapmaker.pyx":124
 *             x = idx % self.width
 *             y = idx // self.height
 *             self.tmap[idx] = self.get_repeat(x + random.randint(-1,1),             # <<<<<<<<<<<<<<
 *                                              y + random.randint(-1,1))
 *     cpdef create_heightmap(self):
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_random); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_randint); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Add(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 124, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pyspades/mapmaker.pyx":125
 *             y = idx // self.height
 *             self.tmap[idx] = self.get_repeat(x + random.randint(-1,1),
 *                                              y + random.randint(-1,1))             # <<<<<<<<<<<<<<
 *     cpdef create_heightmap(self):
 *         """Return a HeightMap with unfinished color data and a list of
 */
    __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_y); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_random); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_randint); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":124
 *             x = idx % self.width
 *             y = idx // self.height
 *             self.tmap[idx] = self.get_repeat(x + random.randint(-1,1),             # <<<<<<<<<<<<<<
 *                                              y + random.randint(-1,1))
 *     cpdef create_heightmap(self):
 */
    __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_8BiomeMap_get_repeat(__pyx_v_self, __pyx_t_6, __pyx_t_8, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_self->tmap == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 124, __pyx_L1_error)
    }
    if (unlikely(PyObject_SetItem(__pyx_v_self->tmap, __pyx_v_idx, __pyx_t_1) < 0)) __PYX_ERR(0, 124, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":121
 *         cdef int x
 *         cdef int y
 *         for idx in xrange(len(self.tmap)):             # <<<<<<<<<<<<<<
 *             x = idx % self.width
 *             y = idx // self.height
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyspades/mapmaker.pyx":118
 *                 openp.append(plist)
 * 
 *     cpdef jitter(self):             # <<<<<<<<<<<<<<
 *         cdef int x
 *         cdef int y
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.jitter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_13jitter(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_13jitter(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("jitter (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8BiomeMap_12jitter(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_12jitter(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("jitter", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_8BiomeMap_jitter(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.jitter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":126
 *             self.tmap[idx] = self.get_repeat(x + random.randint(-1,1),
 *                                              y + random.randint(-1,1))
 *     cpdef create_heightmap(self):             # <<<<<<<<<<<<<<
 *         """Return a HeightMap with unfinished color data and a list of
 *         gradients. When finished with post-processing, use
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_15create_heightmap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_create_heightmap(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_hmap = 0;
  PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  PyObject *__pyx_v_biome = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  double __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  double __pyx_t_11;
  int __pyx_t_12;
  __Pyx_RefNannySetupContext("create_heightmap", 0);

  /* "pyspades/mapmaker.pyx":130
 *         gradients. When finished with post-processing, use
 *         hmap.rewrite_gradient_fill(gradients). """
 *         cdef HeightMap hmap = HeightMap(0.)             # <<<<<<<<<<<<<<
 * 
 *         # paste a rectangle into each biome's area
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8pyspades_8mapmaker_HeightMap), __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_hmap = ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":134
 *         # paste a rectangle into each biome's area
 * 
 *         for idx in xrange(len(self.tmap)):             # <<<<<<<<<<<<<<
 *             x = idx % self.width
 *             y = idx // self.height
 */
  __pyx_t_1 = __pyx_v_self->tmap;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 134, __pyx_L1_error)
  }
  __pyx_t_2 = PyList_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_2 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 134, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_1); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 134, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 134, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_1); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 134, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 134, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 134, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":135
 * 
 *         for idx in xrange(len(self.tmap)):
 *             x = idx % self.width             # <<<<<<<<<<<<<<
 *             y = idx // self.height
 *             biome = self.tmap[idx]
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyNumber_Remainder(__pyx_v_idx, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "pyspades/mapmaker.pyx":136
 *         for idx in xrange(len(self.tmap)):
 *             x = idx % self.width
 *             y = idx // self.height             # <<<<<<<<<<<<<<
 *             biome = self.tmap[idx]
 *             hmap.rect_noise(x*self.twidth,y*self.theight,
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->height); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyNumber_FloorDivide(__pyx_v_idx, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_y, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":137
 *             x = idx % self.width
 *             y = idx // self.height
 *             biome = self.tmap[idx]             # <<<<<<<<<<<<<<
 *             hmap.rect_noise(x*self.twidth,y*self.theight,
 *                             self.twidth,self.theight,
 */
    if (unlikely(__pyx_v_self->tmap == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 137, __pyx_L1_error)
    }
    __pyx_t_1 = PyObject_GetItem(__pyx_v_self->tmap, __pyx_v_idx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_biome, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":138
 *             y = idx // self.height
 *             biome = self.tmap[idx]
 *             hmap.rect_noise(x*self.twidth,y*self.theight,             # <<<<<<<<<<<<<<
 *                             self.twidth,self.theight,
 *                             biome.noise,
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->twidth); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyNumber_Multiply(__pyx_v_x, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 138, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->theight); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyNumber_Multiply(__pyx_v_y, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 138, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":140
 *             hmap.rect_noise(x*self.twidth,y*self.theight,
 *                             self.twidth,self.theight,
 *                             biome.noise,             # <<<<<<<<<<<<<<
 *                             biome.height+random.random()*biome.variation)
 *             hmap.rect_color(x*self.twidth,y*self.theight,
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_biome, __pyx_n_s_noise); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 140, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":141
 *                             self.twidth,self.theight,
 *                             biome.noise,
 *                             biome.height+random.random()*biome.variation)             # <<<<<<<<<<<<<<
 *             hmap.rect_color(x*self.twidth,y*self.theight,
 *                             self.twidth,self.theight,
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_biome, __pyx_n_s_height); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_random); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_random); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    if (__pyx_t_9) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 141, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else {
      __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 141, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_biome, __pyx_n_s_variation); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_9 = PyNumber_Multiply(__pyx_t_5, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = PyNumber_Add(__pyx_t_1, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "pyspades/mapmaker.pyx":138
 *             y = idx // self.height
 *             biome = self.tmap[idx]
 *             hmap.rect_noise(x*self.twidth,y*self.theight,             # <<<<<<<<<<<<<<
 *                             self.twidth,self.theight,
 *                             biome.noise,
 */
    __pyx_t_10 = __pyx_f_8pyspades_8mapmaker_9HeightMap_rect_noise(__pyx_v_hmap, __pyx_t_6, __pyx_t_7, __pyx_v_self->twidth, __pyx_v_self->theight, __pyx_t_8, __pyx_t_11, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "pyspades/mapmaker.pyx":142
 *                             biome.noise,
 *                             biome.height+random.random()*biome.variation)
 *             hmap.rect_color(x*self.twidth,y*self.theight,             # <<<<<<<<<<<<<<
 *                             self.twidth,self.theight,
 *                             biome.id)
 */
    __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_self->twidth); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_9 = PyNumber_Multiply(__pyx_v_x, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_self->theight); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = PyNumber_Multiply(__pyx_v_y, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_10); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "pyspades/mapmaker.pyx":144
 *             hmap.rect_color(x*self.twidth,y*self.theight,
 *                             self.twidth,self.theight,
 *                             biome.id)             # <<<<<<<<<<<<<<
 * 
 *         return hmap, self.gradients
 */
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_biome, __pyx_n_s_id); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_10); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "pyspades/mapmaker.pyx":142
 *                             biome.noise,
 *                             biome.height+random.random()*biome.variation)
 *             hmap.rect_color(x*self.twidth,y*self.theight,             # <<<<<<<<<<<<<<
 *                             self.twidth,self.theight,
 *                             biome.id)
 */
    __pyx_t_10 = __pyx_f_8pyspades_8mapmaker_9HeightMap_rect_color(__pyx_v_hmap, __pyx_t_7, __pyx_t_6, __pyx_v_self->twidth, __pyx_v_self->theight, __pyx_t_12, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "pyspades/mapmaker.pyx":134
 *         # paste a rectangle into each biome's area
 * 
 *         for idx in xrange(len(self.tmap)):             # <<<<<<<<<<<<<<
 *             x = idx % self.width
 *             y = idx // self.height
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyspades/mapmaker.pyx":146
 *                             biome.id)
 * 
 *         return hmap, self.gradients             # <<<<<<<<<<<<<<
 *     cpdef rect_of_point(self, x, y):
 *         x_pos = x*self.twidth
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_hmap));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_hmap));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_hmap));
  __Pyx_INCREF(__pyx_v_self->gradients);
  __Pyx_GIVEREF(__pyx_v_self->gradients);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_self->gradients);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pyspades/mapmaker.pyx":126
 *             self.tmap[idx] = self.get_repeat(x + random.randint(-1,1),
 *                                              y + random.randint(-1,1))
 *     cpdef create_heightmap(self):             # <<<<<<<<<<<<<<
 *         """Return a HeightMap with unfinished color data and a list of
 *         gradients. When finished with post-processing, use
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.create_heightmap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_hmap);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF(__pyx_v_biome);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_15create_heightmap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_8BiomeMap_14create_heightmap[] = "Return a HeightMap with unfinished color data and a list of\n        gradients. When finished with post-processing, use\n        hmap.rewrite_gradient_fill(gradients). ";
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_15create_heightmap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_heightmap (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8BiomeMap_14create_heightmap(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_14create_heightmap(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("create_heightmap", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_8BiomeMap_create_heightmap(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.create_heightmap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":147
 * 
 *         return hmap, self.gradients
 *     cpdef rect_of_point(self, x, y):             # <<<<<<<<<<<<<<
 *         x_pos = x*self.twidth
 *         y_pos = y*self.theight
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_17rect_of_point(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_rect_of_point(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_x_pos = NULL;
  PyObject *__pyx_v_y_pos = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("rect_of_point", 0);

  /* "pyspades/mapmaker.pyx":148
 *         return hmap, self.gradients
 *     cpdef rect_of_point(self, x, y):
 *         x_pos = x*self.twidth             # <<<<<<<<<<<<<<
 *         y_pos = y*self.theight
 *         return [x_pos, y_pos, x_pos+self.twidth, y_pos+self.theight]
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->twidth); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_x, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_x_pos = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pyspades/mapmaker.pyx":149
 *     cpdef rect_of_point(self, x, y):
 *         x_pos = x*self.twidth
 *         y_pos = y*self.theight             # <<<<<<<<<<<<<<
 *         return [x_pos, y_pos, x_pos+self.twidth, y_pos+self.theight]
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->theight); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_y, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_y_pos = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":150
 *         x_pos = x*self.twidth
 *         y_pos = y*self.theight
 *         return [x_pos, y_pos, x_pos+self.twidth, y_pos+self.theight]             # <<<<<<<<<<<<<<
 * 
 * @cython.final
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->twidth); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_v_x_pos, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->theight); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Add(__pyx_v_y_pos, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_x_pos);
  __Pyx_GIVEREF(__pyx_v_x_pos);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_x_pos);
  __Pyx_INCREF(__pyx_v_y_pos);
  __Pyx_GIVEREF(__pyx_v_y_pos);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_v_y_pos);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyspades/mapmaker.pyx":147
 * 
 *         return hmap, self.gradients
 *     cpdef rect_of_point(self, x, y):             # <<<<<<<<<<<<<<
 *         x_pos = x*self.twidth
 *         y_pos = y*self.theight
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.rect_of_point", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x_pos);
  __Pyx_XDECREF(__pyx_v_y_pos);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_17rect_of_point(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_17rect_of_point(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rect_of_point (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rect_of_point", 1, 2, 2, 1); __PYX_ERR(0, 147, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rect_of_point") < 0)) __PYX_ERR(0, 147, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rect_of_point", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 147, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.rect_of_point", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8BiomeMap_16rect_of_point(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_16rect_of_point(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("rect_of_point", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_8BiomeMap_rect_of_point(__pyx_v_self, __pyx_v_x, __pyx_v_y, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.rect_of_point", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":52
 *     A tilemap containing biome data for a HeightMap.
 *     """
 *     cdef public int width             # <<<<<<<<<<<<<<
 *     cdef public int height
 *     cdef public int twidth
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_5width_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_5width_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8BiomeMap_5width___get__(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_5width___get__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.width.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pyspades_8mapmaker_8BiomeMap_5width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pyspades_8mapmaker_8BiomeMap_5width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8BiomeMap_5width_2__set__(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_5width_2__set__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 52, __pyx_L1_error)
  __pyx_v_self->width = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.width.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":53
 *     """
 *     cdef public int width
 *     cdef public int height             # <<<<<<<<<<<<<<
 *     cdef public int twidth
 *     cdef public int theight
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_6height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_6height_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6height___get__(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_6height___get__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->height); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pyspades_8mapmaker_8BiomeMap_6height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pyspades_8mapmaker_8BiomeMap_6height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6height_2__set__(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6height_2__set__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 53, __pyx_L1_error)
  __pyx_v_self->height = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.height.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":54
 *     cdef public int width
 *     cdef public int height
 *     cdef public int twidth             # <<<<<<<<<<<<<<
 *     cdef public int theight
 *     cdef public list biomes
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_6twidth_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_6twidth_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6twidth___get__(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_6twidth___get__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->twidth); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.twidth.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pyspades_8mapmaker_8BiomeMap_6twidth_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pyspades_8mapmaker_8BiomeMap_6twidth_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6twidth_2__set__(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6twidth_2__set__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 54, __pyx_L1_error)
  __pyx_v_self->twidth = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.twidth.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":55
 *     cdef public int height
 *     cdef public int twidth
 *     cdef public int theight             # <<<<<<<<<<<<<<
 *     cdef public list biomes
 *     cdef public list tmap
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_7theight_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_7theight_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8BiomeMap_7theight___get__(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_7theight___get__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->theight); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.theight.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pyspades_8mapmaker_8BiomeMap_7theight_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pyspades_8mapmaker_8BiomeMap_7theight_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8BiomeMap_7theight_2__set__(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_7theight_2__set__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 55, __pyx_L1_error)
  __pyx_v_self->theight = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.theight.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":56
 *     cdef public int twidth
 *     cdef public int theight
 *     cdef public list biomes             # <<<<<<<<<<<<<<
 *     cdef public list tmap
 *     cdef public list gradients
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_6biomes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_6biomes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6biomes___get__(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_6biomes___get__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->biomes);
  __pyx_r = __pyx_v_self->biomes;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pyspades_8mapmaker_8BiomeMap_6biomes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pyspades_8mapmaker_8BiomeMap_6biomes_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6biomes_2__set__(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6biomes_2__set__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(0, 56, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->biomes);
  __Pyx_DECREF(__pyx_v_self->biomes);
  __pyx_v_self->biomes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.biomes.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pyspades_8mapmaker_8BiomeMap_6biomes_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_8pyspades_8mapmaker_8BiomeMap_6biomes_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6biomes_4__del__(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6biomes_4__del__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->biomes);
  __Pyx_DECREF(__pyx_v_self->biomes);
  __pyx_v_self->biomes = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":57
 *     cdef public int theight
 *     cdef public list biomes
 *     cdef public list tmap             # <<<<<<<<<<<<<<
 *     cdef public list gradients
 *     def __init__(self, biomes, width=32, height=32):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_4tmap_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_4tmap_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8BiomeMap_4tmap___get__(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_4tmap___get__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->tmap);
  __pyx_r = __pyx_v_self->tmap;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pyspades_8mapmaker_8BiomeMap_4tmap_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pyspades_8mapmaker_8BiomeMap_4tmap_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8BiomeMap_4tmap_2__set__(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_4tmap_2__set__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(0, 57, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->tmap);
  __Pyx_DECREF(__pyx_v_self->tmap);
  __pyx_v_self->tmap = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.tmap.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pyspades_8mapmaker_8BiomeMap_4tmap_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_8pyspades_8mapmaker_8BiomeMap_4tmap_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8BiomeMap_4tmap_4__del__(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_4tmap_4__del__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->tmap);
  __Pyx_DECREF(__pyx_v_self->tmap);
  __pyx_v_self->tmap = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":58
 *     cdef public list biomes
 *     cdef public list tmap
 *     cdef public list gradients             # <<<<<<<<<<<<<<
 *     def __init__(self, biomes, width=32, height=32):
 *         self.biomes = biomes
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_9gradients_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_8BiomeMap_9gradients_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8BiomeMap_9gradients___get__(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_9gradients___get__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->gradients);
  __pyx_r = __pyx_v_self->gradients;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pyspades_8mapmaker_8BiomeMap_9gradients_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pyspades_8mapmaker_8BiomeMap_9gradients_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8BiomeMap_9gradients_2__set__(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_9gradients_2__set__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(0, 58, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->gradients);
  __Pyx_DECREF(__pyx_v_self->gradients);
  __pyx_v_self->gradients = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.gradients.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pyspades_8mapmaker_8BiomeMap_9gradients_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_8pyspades_8mapmaker_8BiomeMap_9gradients_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8BiomeMap_9gradients_4__del__(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_9gradients_4__del__(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->gradients);
  __Pyx_DECREF(__pyx_v_self->gradients);
  __pyx_v_self->gradients = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":158
 *     cdef public object hmap
 *     cdef public object cmap
 *     def __init__(self, height):             # <<<<<<<<<<<<<<
 *         self.width = 512
 *         self.height = 512
 */

/* Python wrapper */
static int __pyx_pw_8pyspades_8mapmaker_9HeightMap_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pyspades_8mapmaker_9HeightMap_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_height = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_height,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 158, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_height = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 158, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap___init__(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_height);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_9HeightMap___init__(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, PyObject *__pyx_v_height) {
  CYTHON_UNUSED long __pyx_v_n;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  long __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pyspades/mapmaker.pyx":159
 *     cdef public object cmap
 *     def __init__(self, height):
 *         self.width = 512             # <<<<<<<<<<<<<<
 *         self.height = 512
 *         self.hmap = array.array('f',[height for n in xrange(0,
 */
  __pyx_v_self->width = 0x200;

  /* "pyspades/mapmaker.pyx":160
 *     def __init__(self, height):
 *         self.width = 512
 *         self.height = 512             # <<<<<<<<<<<<<<
 *         self.hmap = array.array('f',[height for n in xrange(0,
 *                                     self.width*self.height)])
 */
  __pyx_v_self->height = 0x200;

  /* "pyspades/mapmaker.pyx":161
 *         self.width = 512
 *         self.height = 512
 *         self.hmap = array.array('f',[height for n in xrange(0,             # <<<<<<<<<<<<<<
 *                                     self.width*self.height)])
 *         self.cmap = array.array('i',[<int>0xFF00FFFF for n in xrange(0,
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "pyspades/mapmaker.pyx":162
 *         self.height = 512
 *         self.hmap = array.array('f',[height for n in xrange(0,
 *                                     self.width*self.height)])             # <<<<<<<<<<<<<<
 *         self.cmap = array.array('i',[<int>0xFF00FFFF for n in xrange(0,
 *                                     self.width*self.height)])
 */
  __pyx_t_4 = (__pyx_v_self->width * __pyx_v_self->height);

  /* "pyspades/mapmaker.pyx":161
 *         self.width = 512
 *         self.height = 512
 *         self.hmap = array.array('f',[height for n in xrange(0,             # <<<<<<<<<<<<<<
 *                                     self.width*self.height)])
 *         self.cmap = array.array('i',[<int>0xFF00FFFF for n in xrange(0,
 */
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_n = __pyx_t_5;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_v_height))) __PYX_ERR(0, 161, __pyx_L1_error)
  }
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (__pyx_t_6) {
    __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
  }
  __Pyx_INCREF(__pyx_n_s_f);
  __Pyx_GIVEREF(__pyx_n_s_f);
  PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_n_s_f);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->hmap);
  __Pyx_DECREF(__pyx_v_self->hmap);
  __pyx_v_self->hmap = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":163
 *         self.hmap = array.array('f',[height for n in xrange(0,
 *                                     self.width*self.height)])
 *         self.cmap = array.array('i',[<int>0xFF00FFFF for n in xrange(0,             # <<<<<<<<<<<<<<
 *                                     self.width*self.height)])
 *     cpdef inline double get(self, int x, int y):
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pyspades/mapmaker.pyx":164
 *                                     self.width*self.height)])
 *         self.cmap = array.array('i',[<int>0xFF00FFFF for n in xrange(0,
 *                                     self.width*self.height)])             # <<<<<<<<<<<<<<
 *     cpdef inline double get(self, int x, int y):
 *         return self.hmap[x+y*self.height]
 */
  __pyx_t_4 = (__pyx_v_self->width * __pyx_v_self->height);

  /* "pyspades/mapmaker.pyx":163
 *         self.hmap = array.array('f',[height for n in xrange(0,
 *                                     self.width*self.height)])
 *         self.cmap = array.array('i',[<int>0xFF00FFFF for n in xrange(0,             # <<<<<<<<<<<<<<
 *                                     self.width*self.height)])
 *     cpdef inline double get(self, int x, int y):
 */
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_n = __pyx_t_5;
    __pyx_t_2 = __Pyx_PyInt_From_int(((int)0xFF00FFFF)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 163, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_7 = 1;
    }
  }
  __pyx_t_6 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__pyx_t_2) {
    __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
  }
  __Pyx_INCREF(__pyx_n_s_i);
  __Pyx_GIVEREF(__pyx_n_s_i);
  PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_7, __pyx_n_s_i);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_7, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->cmap);
  __Pyx_DECREF(__pyx_v_self->cmap);
  __pyx_v_self->cmap = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":158
 *     cdef public object hmap
 *     cdef public object cmap
 *     def __init__(self, height):             # <<<<<<<<<<<<<<
 *         self.width = 512
 *         self.height = 512
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":165
 *         self.cmap = array.array('i',[<int>0xFF00FFFF for n in xrange(0,
 *                                     self.width*self.height)])
 *     cpdef inline double get(self, int x, int y):             # <<<<<<<<<<<<<<
 *         return self.hmap[x+y*self.height]
 *     cpdef inline double get_repeat(self, int x, int y):
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_3get(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE double __pyx_f_8pyspades_8mapmaker_9HeightMap_get(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  __Pyx_RefNannySetupContext("get", 0);

  /* "pyspades/mapmaker.pyx":166
 *                                     self.width*self.height)])
 *     cpdef inline double get(self, int x, int y):
 *         return self.hmap[x+y*self.height]             # <<<<<<<<<<<<<<
 *     cpdef inline double get_repeat(self, int x, int y):
 *         """This allows the algorithm to tile at the edges."""
 */
  __pyx_t_1 = (__pyx_v_x + (__pyx_v_y * __pyx_v_self->height));
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_self->hmap, __pyx_t_1, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  goto __pyx_L0;

  /* "pyspades/mapmaker.pyx":165
 *         self.cmap = array.array('i',[<int>0xFF00FFFF for n in xrange(0,
 *                                     self.width*self.height)])
 *     cpdef inline double get(self, int x, int y):             # <<<<<<<<<<<<<<
 *         return self.hmap[x+y*self.height]
 *     cpdef inline double get_repeat(self, int x, int y):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("pyspades.mapmaker.HeightMap.get", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_3get(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_3get(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get", 1, 2, 2, 1); __PYX_ERR(0, 165, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get") < 0)) __PYX_ERR(0, 165, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 165, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 165, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 165, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_2get(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_2get(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_8pyspades_8mapmaker_9HeightMap_get(__pyx_v_self, __pyx_v_x, __pyx_v_y, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":167
 *     cpdef inline double get(self, int x, int y):
 *         return self.hmap[x+y*self.height]
 *     cpdef inline double get_repeat(self, int x, int y):             # <<<<<<<<<<<<<<
 *         """This allows the algorithm to tile at the edges."""
 *         return self.hmap[(x%self.width)+(y%self.height)*self.width]
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_5get_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE double __pyx_f_8pyspades_8mapmaker_9HeightMap_get_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  __Pyx_RefNannySetupContext("get_repeat", 0);

  /* "pyspades/mapmaker.pyx":169
 *     cpdef inline double get_repeat(self, int x, int y):
 *         """This allows the algorithm to tile at the edges."""
 *         return self.hmap[(x%self.width)+(y%self.height)*self.width]             # <<<<<<<<<<<<<<
 *     cpdef inline set(self, int x, int y, double val):
 *         self.hmap[x+y*self.height] = val
 */
  if (unlikely(__pyx_v_self->width == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 169, __pyx_L1_error)
  }
  if (unlikely(__pyx_v_self->height == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 169, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_mod_int(__pyx_v_x, __pyx_v_self->width) + (__Pyx_mod_int(__pyx_v_y, __pyx_v_self->height) * __pyx_v_self->width));
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_self->hmap, __pyx_t_1, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  goto __pyx_L0;

  /* "pyspades/mapmaker.pyx":167
 *     cpdef inline double get(self, int x, int y):
 *         return self.hmap[x+y*self.height]
 *     cpdef inline double get_repeat(self, int x, int y):             # <<<<<<<<<<<<<<
 *         """This allows the algorithm to tile at the edges."""
 *         return self.hmap[(x%self.width)+(y%self.height)*self.width]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("pyspades.mapmaker.HeightMap.get_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_5get_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_4get_repeat[] = "This allows the algorithm to tile at the edges.";
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_5get_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_repeat (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_repeat", 1, 2, 2, 1); __PYX_ERR(0, 167, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_repeat") < 0)) __PYX_ERR(0, 167, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 167, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 167, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_repeat", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 167, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.get_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_4get_repeat(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_4get_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_repeat", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_8pyspades_8mapmaker_9HeightMap_get_repeat(__pyx_v_self, __pyx_v_x, __pyx_v_y, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.get_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":170
 *         """This allows the algorithm to tile at the edges."""
 *         return self.hmap[(x%self.width)+(y%self.height)*self.width]
 *     cpdef inline set(self, int x, int y, double val):             # <<<<<<<<<<<<<<
 *         self.hmap[x+y*self.height] = val
 *     cpdef inline set_repeat(self, int x, int y, double val):
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_7set(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_set(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, double __pyx_v_val, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set", 0);

  /* "pyspades/mapmaker.pyx":171
 *         return self.hmap[(x%self.width)+(y%self.height)*self.width]
 *     cpdef inline set(self, int x, int y, double val):
 *         self.hmap[x+y*self.height] = val             # <<<<<<<<<<<<<<
 *     cpdef inline set_repeat(self, int x, int y, double val):
 *         """This allows the algorithm to tile at the edges."""
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_val); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_v_x + (__pyx_v_y * __pyx_v_self->height));
  if (unlikely(__Pyx_SetItemInt(__pyx_v_self->hmap, __pyx_t_2, __pyx_t_1, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":170
 *         """This allows the algorithm to tile at the edges."""
 *         return self.hmap[(x%self.width)+(y%self.height)*self.width]
 *     cpdef inline set(self, int x, int y, double val):             # <<<<<<<<<<<<<<
 *         self.hmap[x+y*self.height] = val
 *     cpdef inline set_repeat(self, int x, int y, double val):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.set", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_7set(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_7set(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  double __pyx_v_val;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_val,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set", 1, 3, 3, 1); __PYX_ERR(0, 170, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set", 1, 3, 3, 2); __PYX_ERR(0, 170, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set") < 0)) __PYX_ERR(0, 170, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_x = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 170, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 170, __pyx_L3_error)
    __pyx_v_val = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_val == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 170, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 170, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.set", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_6set(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_val);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_6set(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, double __pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_set(__pyx_v_self, __pyx_v_x, __pyx_v_y, __pyx_v_val, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.set", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":172
 *     cpdef inline set(self, int x, int y, double val):
 *         self.hmap[x+y*self.height] = val
 *     cpdef inline set_repeat(self, int x, int y, double val):             # <<<<<<<<<<<<<<
 *         """This allows the algorithm to tile at the edges."""
 *         self.hmap[(x%self.width)+(y%self.height)*self.width] = val
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_9set_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_set_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, double __pyx_v_val, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_repeat", 0);

  /* "pyspades/mapmaker.pyx":174
 *     cpdef inline set_repeat(self, int x, int y, double val):
 *         """This allows the algorithm to tile at the edges."""
 *         self.hmap[(x%self.width)+(y%self.height)*self.width] = val             # <<<<<<<<<<<<<<
 *     cpdef inline add_repeat(self, int x, int y, double val):
 *         self.hmap[(x%self.width)+(y%self.height)*self.width] += val
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_val); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_self->width == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 174, __pyx_L1_error)
  }
  if (unlikely(__pyx_v_self->height == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 174, __pyx_L1_error)
  }
  __pyx_t_2 = (__Pyx_mod_int(__pyx_v_x, __pyx_v_self->width) + (__Pyx_mod_int(__pyx_v_y, __pyx_v_self->height) * __pyx_v_self->width));
  if (unlikely(__Pyx_SetItemInt(__pyx_v_self->hmap, __pyx_t_2, __pyx_t_1, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":172
 *     cpdef inline set(self, int x, int y, double val):
 *         self.hmap[x+y*self.height] = val
 *     cpdef inline set_repeat(self, int x, int y, double val):             # <<<<<<<<<<<<<<
 *         """This allows the algorithm to tile at the edges."""
 *         self.hmap[(x%self.width)+(y%self.height)*self.width] = val
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.set_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_9set_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_8set_repeat[] = "This allows the algorithm to tile at the edges.";
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_9set_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  double __pyx_v_val;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_repeat (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_val,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_repeat", 1, 3, 3, 1); __PYX_ERR(0, 172, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_repeat", 1, 3, 3, 2); __PYX_ERR(0, 172, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_repeat") < 0)) __PYX_ERR(0, 172, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_x = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 172, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 172, __pyx_L3_error)
    __pyx_v_val = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_val == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 172, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_repeat", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 172, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.set_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_8set_repeat(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_val);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_8set_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, double __pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_repeat", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_set_repeat(__pyx_v_self, __pyx_v_x, __pyx_v_y, __pyx_v_val, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.set_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":175
 *         """This allows the algorithm to tile at the edges."""
 *         self.hmap[(x%self.width)+(y%self.height)*self.width] = val
 *     cpdef inline add_repeat(self, int x, int y, double val):             # <<<<<<<<<<<<<<
 *         self.hmap[(x%self.width)+(y%self.height)*self.width] += val
 *     cpdef inline int get_col(self, int x, int y):
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_11add_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_add_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, double __pyx_v_val, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("add_repeat", 0);

  /* "pyspades/mapmaker.pyx":176
 *         self.hmap[(x%self.width)+(y%self.height)*self.width] = val
 *     cpdef inline add_repeat(self, int x, int y, double val):
 *         self.hmap[(x%self.width)+(y%self.height)*self.width] += val             # <<<<<<<<<<<<<<
 *     cpdef inline int get_col(self, int x, int y):
 *         return self.cmap[x+y*self.height]
 */
  __Pyx_INCREF(__pyx_v_self->hmap);
  __pyx_t_1 = __pyx_v_self->hmap;
  if (unlikely(__pyx_v_self->width == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 176, __pyx_L1_error)
  }
  if (unlikely(__pyx_v_self->height == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 176, __pyx_L1_error)
  }
  __pyx_t_2 = (__Pyx_mod_int(__pyx_v_x, __pyx_v_self->width) + (__Pyx_mod_int(__pyx_v_y, __pyx_v_self->height) * __pyx_v_self->width));
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, __pyx_t_2, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_val); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__Pyx_SetItemInt(__pyx_t_1, __pyx_t_2, __pyx_t_5, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":175
 *         """This allows the algorithm to tile at the edges."""
 *         self.hmap[(x%self.width)+(y%self.height)*self.width] = val
 *     cpdef inline add_repeat(self, int x, int y, double val):             # <<<<<<<<<<<<<<
 *         self.hmap[(x%self.width)+(y%self.height)*self.width] += val
 *     cpdef inline int get_col(self, int x, int y):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.add_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_11add_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_11add_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  double __pyx_v_val;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_repeat (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_val,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_repeat", 1, 3, 3, 1); __PYX_ERR(0, 175, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_repeat", 1, 3, 3, 2); __PYX_ERR(0, 175, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_repeat") < 0)) __PYX_ERR(0, 175, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_x = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L3_error)
    __pyx_v_val = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_val == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_repeat", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 175, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.add_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_10add_repeat(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_val);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_10add_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, double __pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("add_repeat", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_add_repeat(__pyx_v_self, __pyx_v_x, __pyx_v_y, __pyx_v_val, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.add_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":177
 *     cpdef inline add_repeat(self, int x, int y, double val):
 *         self.hmap[(x%self.width)+(y%self.height)*self.width] += val
 *     cpdef inline int get_col(self, int x, int y):             # <<<<<<<<<<<<<<
 *         return self.cmap[x+y*self.height]
 *     cpdef inline int get_col_repeat(self, int x, int y):
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_13get_col(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE int __pyx_f_8pyspades_8mapmaker_9HeightMap_get_col(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_col", 0);

  /* "pyspades/mapmaker.pyx":178
 *         self.hmap[(x%self.width)+(y%self.height)*self.width] += val
 *     cpdef inline int get_col(self, int x, int y):
 *         return self.cmap[x+y*self.height]             # <<<<<<<<<<<<<<
 *     cpdef inline int get_col_repeat(self, int x, int y):
 *         return self.cmap[(x%self.width)+(y%self.height)*self.width]
 */
  __pyx_t_1 = (__pyx_v_x + (__pyx_v_y * __pyx_v_self->height));
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_self->cmap, __pyx_t_1, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "pyspades/mapmaker.pyx":177
 *     cpdef inline add_repeat(self, int x, int y, double val):
 *         self.hmap[(x%self.width)+(y%self.height)*self.width] += val
 *     cpdef inline int get_col(self, int x, int y):             # <<<<<<<<<<<<<<
 *         return self.cmap[x+y*self.height]
 *     cpdef inline int get_col_repeat(self, int x, int y):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("pyspades.mapmaker.HeightMap.get_col", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_13get_col(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_13get_col(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_col (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_col", 1, 2, 2, 1); __PYX_ERR(0, 177, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_col") < 0)) __PYX_ERR(0, 177, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 177, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 177, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_col", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 177, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.get_col", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_12get_col(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_12get_col(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_col", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_8pyspades_8mapmaker_9HeightMap_get_col(__pyx_v_self, __pyx_v_x, __pyx_v_y, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.get_col", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":179
 *     cpdef inline int get_col(self, int x, int y):
 *         return self.cmap[x+y*self.height]
 *     cpdef inline int get_col_repeat(self, int x, int y):             # <<<<<<<<<<<<<<
 *         return self.cmap[(x%self.width)+(y%self.height)*self.width]
 *     cpdef inline set_col_repeat(self, int x, int y, int val):
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_15get_col_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE int __pyx_f_8pyspades_8mapmaker_9HeightMap_get_col_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_col_repeat", 0);

  /* "pyspades/mapmaker.pyx":180
 *         return self.cmap[x+y*self.height]
 *     cpdef inline int get_col_repeat(self, int x, int y):
 *         return self.cmap[(x%self.width)+(y%self.height)*self.width]             # <<<<<<<<<<<<<<
 *     cpdef inline set_col_repeat(self, int x, int y, int val):
 *         self.cmap[(x%self.width)+(y%self.height)*self.width] = val
 */
  if (unlikely(__pyx_v_self->width == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 180, __pyx_L1_error)
  }
  if (unlikely(__pyx_v_self->height == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 180, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_mod_int(__pyx_v_x, __pyx_v_self->width) + (__Pyx_mod_int(__pyx_v_y, __pyx_v_self->height) * __pyx_v_self->width));
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_self->cmap, __pyx_t_1, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "pyspades/mapmaker.pyx":179
 *     cpdef inline int get_col(self, int x, int y):
 *         return self.cmap[x+y*self.height]
 *     cpdef inline int get_col_repeat(self, int x, int y):             # <<<<<<<<<<<<<<
 *         return self.cmap[(x%self.width)+(y%self.height)*self.width]
 *     cpdef inline set_col_repeat(self, int x, int y, int val):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("pyspades.mapmaker.HeightMap.get_col_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_15get_col_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_15get_col_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_col_repeat (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_col_repeat", 1, 2, 2, 1); __PYX_ERR(0, 179, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_col_repeat") < 0)) __PYX_ERR(0, 179, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 179, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 179, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_col_repeat", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 179, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.get_col_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_14get_col_repeat(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_14get_col_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_col_repeat", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_8pyspades_8mapmaker_9HeightMap_get_col_repeat(__pyx_v_self, __pyx_v_x, __pyx_v_y, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.get_col_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":181
 *     cpdef inline int get_col_repeat(self, int x, int y):
 *         return self.cmap[(x%self.width)+(y%self.height)*self.width]
 *     cpdef inline set_col_repeat(self, int x, int y, int val):             # <<<<<<<<<<<<<<
 *         self.cmap[(x%self.width)+(y%self.height)*self.width] = val
 *     cpdef inline fill_col(self, int col):
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_17set_col_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_set_col_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_val, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_col_repeat", 0);

  /* "pyspades/mapmaker.pyx":182
 *         return self.cmap[(x%self.width)+(y%self.height)*self.width]
 *     cpdef inline set_col_repeat(self, int x, int y, int val):
 *         self.cmap[(x%self.width)+(y%self.height)*self.width] = val             # <<<<<<<<<<<<<<
 *     cpdef inline fill_col(self, int col):
 *         for n in xrange(len(self.cmap)):
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_val); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_self->width == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 182, __pyx_L1_error)
  }
  if (unlikely(__pyx_v_self->height == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 182, __pyx_L1_error)
  }
  __pyx_t_2 = (__Pyx_mod_int(__pyx_v_x, __pyx_v_self->width) + (__Pyx_mod_int(__pyx_v_y, __pyx_v_self->height) * __pyx_v_self->width));
  if (unlikely(__Pyx_SetItemInt(__pyx_v_self->cmap, __pyx_t_2, __pyx_t_1, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":181
 *     cpdef inline int get_col_repeat(self, int x, int y):
 *         return self.cmap[(x%self.width)+(y%self.height)*self.width]
 *     cpdef inline set_col_repeat(self, int x, int y, int val):             # <<<<<<<<<<<<<<
 *         self.cmap[(x%self.width)+(y%self.height)*self.width] = val
 *     cpdef inline fill_col(self, int col):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.set_col_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_17set_col_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_17set_col_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_val;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_col_repeat (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_val,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_col_repeat", 1, 3, 3, 1); __PYX_ERR(0, 181, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_col_repeat", 1, 3, 3, 2); __PYX_ERR(0, 181, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_col_repeat") < 0)) __PYX_ERR(0, 181, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_x = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 181, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 181, __pyx_L3_error)
    __pyx_v_val = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_val == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 181, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_col_repeat", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 181, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.set_col_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_16set_col_repeat(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_val);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_16set_col_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_col_repeat", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_set_col_repeat(__pyx_v_self, __pyx_v_x, __pyx_v_y, __pyx_v_val, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.set_col_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":183
 *     cpdef inline set_col_repeat(self, int x, int y, int val):
 *         self.cmap[(x%self.width)+(y%self.height)*self.width] = val
 *     cpdef inline fill_col(self, int col):             # <<<<<<<<<<<<<<
 *         for n in xrange(len(self.cmap)):
 *             self.cmap[n] = col
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_19fill_col(PyObject *__pyx_v_self, PyObject *__pyx_arg_col); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_fill_col(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_col, CYTHON_UNUSED int __pyx_skip_dispatch) {
  Py_ssize_t __pyx_v_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  __Pyx_RefNannySetupContext("fill_col", 0);

  /* "pyspades/mapmaker.pyx":184
 *         self.cmap[(x%self.width)+(y%self.height)*self.width] = val
 *     cpdef inline fill_col(self, int col):
 *         for n in xrange(len(self.cmap)):             # <<<<<<<<<<<<<<
 *             self.cmap[n] = col
 *     cpdef mult_repeat(self, int x, int y, double mult):
 */
  __pyx_t_1 = __pyx_v_self->cmap;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_n = __pyx_t_3;

    /* "pyspades/mapmaker.pyx":185
 *     cpdef inline fill_col(self, int col):
 *         for n in xrange(len(self.cmap)):
 *             self.cmap[n] = col             # <<<<<<<<<<<<<<
 *     cpdef mult_repeat(self, int x, int y, double mult):
 *         cdef int idx = (x%self.width)+(y%self.height)*self.width
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_col); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_self->cmap, __pyx_v_n, __pyx_t_1, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades/mapmaker.pyx":183
 *     cpdef inline set_col_repeat(self, int x, int y, int val):
 *         self.cmap[(x%self.width)+(y%self.height)*self.width] = val
 *     cpdef inline fill_col(self, int col):             # <<<<<<<<<<<<<<
 *         for n in xrange(len(self.cmap)):
 *             self.cmap[n] = col
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.fill_col", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_19fill_col(PyObject *__pyx_v_self, PyObject *__pyx_arg_col); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_19fill_col(PyObject *__pyx_v_self, PyObject *__pyx_arg_col) {
  int __pyx_v_col;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fill_col (wrapper)", 0);
  assert(__pyx_arg_col); {
    __pyx_v_col = __Pyx_PyInt_As_int(__pyx_arg_col); if (unlikely((__pyx_v_col == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 183, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.fill_col", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_18fill_col(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), ((int)__pyx_v_col));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_18fill_col(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_col) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("fill_col", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_fill_col(__pyx_v_self, __pyx_v_col, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.fill_col", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":186
 *         for n in xrange(len(self.cmap)):
 *             self.cmap[n] = col
 *     cpdef mult_repeat(self, int x, int y, double mult):             # <<<<<<<<<<<<<<
 *         cdef int idx = (x%self.width)+(y%self.height)*self.width
 *         self.hmap[idx] *= mult
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_21mult_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_mult_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, double __pyx_v_mult, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("mult_repeat", 0);

  /* "pyspades/mapmaker.pyx":187
 *             self.cmap[n] = col
 *     cpdef mult_repeat(self, int x, int y, double mult):
 *         cdef int idx = (x%self.width)+(y%self.height)*self.width             # <<<<<<<<<<<<<<
 *         self.hmap[idx] *= mult
 *     cpdef seed(self, double jitter, double midpoint):
 */
  if (unlikely(__pyx_v_self->width == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 187, __pyx_L1_error)
  }
  if (unlikely(__pyx_v_self->height == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 187, __pyx_L1_error)
  }
  __pyx_v_idx = (__Pyx_mod_int(__pyx_v_x, __pyx_v_self->width) + (__Pyx_mod_int(__pyx_v_y, __pyx_v_self->height) * __pyx_v_self->width));

  /* "pyspades/mapmaker.pyx":188
 *     cpdef mult_repeat(self, int x, int y, double mult):
 *         cdef int idx = (x%self.width)+(y%self.height)*self.width
 *         self.hmap[idx] *= mult             # <<<<<<<<<<<<<<
 *     cpdef seed(self, double jitter, double midpoint):
 *         cdef double halfjitter = jitter * 0.5
 */
  __Pyx_INCREF(__pyx_v_self->hmap);
  __pyx_t_1 = __pyx_v_self->hmap;
  __pyx_t_2 = __pyx_v_idx;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, __pyx_t_2, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_mult); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_InPlaceMultiply(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__Pyx_SetItemInt(__pyx_t_1, __pyx_t_2, __pyx_t_5, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":186
 *         for n in xrange(len(self.cmap)):
 *             self.cmap[n] = col
 *     cpdef mult_repeat(self, int x, int y, double mult):             # <<<<<<<<<<<<<<
 *         cdef int idx = (x%self.width)+(y%self.height)*self.width
 *         self.hmap[idx] *= mult
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.mult_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_21mult_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_21mult_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  double __pyx_v_mult;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mult_repeat (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_mult,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mult_repeat", 1, 3, 3, 1); __PYX_ERR(0, 186, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mult)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mult_repeat", 1, 3, 3, 2); __PYX_ERR(0, 186, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "mult_repeat") < 0)) __PYX_ERR(0, 186, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_x = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 186, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 186, __pyx_L3_error)
    __pyx_v_mult = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_mult == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 186, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mult_repeat", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 186, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.mult_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_20mult_repeat(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_mult);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_20mult_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, double __pyx_v_mult) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("mult_repeat", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_mult_repeat(__pyx_v_self, __pyx_v_x, __pyx_v_y, __pyx_v_mult, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.mult_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":189
 *         cdef int idx = (x%self.width)+(y%self.height)*self.width
 *         self.hmap[idx] *= mult
 *     cpdef seed(self, double jitter, double midpoint):             # <<<<<<<<<<<<<<
 *         cdef double halfjitter = jitter * 0.5
 *         for idx in xrange(len(self.hmap)):
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_23seed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_seed(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_jitter, double __pyx_v_midpoint, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_v_halfjitter;
  Py_ssize_t __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("seed", 0);

  /* "pyspades/mapmaker.pyx":190
 *         self.hmap[idx] *= mult
 *     cpdef seed(self, double jitter, double midpoint):
 *         cdef double halfjitter = jitter * 0.5             # <<<<<<<<<<<<<<
 *         for idx in xrange(len(self.hmap)):
 *             self.hmap[idx] = midpoint + (random.random()*jitter -
 */
  __pyx_v_halfjitter = (__pyx_v_jitter * 0.5);

  /* "pyspades/mapmaker.pyx":191
 *     cpdef seed(self, double jitter, double midpoint):
 *         cdef double halfjitter = jitter * 0.5
 *         for idx in xrange(len(self.hmap)):             # <<<<<<<<<<<<<<
 *             self.hmap[idx] = midpoint + (random.random()*jitter -
 *                                          halfjitter)
 */
  __pyx_t_1 = __pyx_v_self->hmap;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_idx = __pyx_t_3;

    /* "pyspades/mapmaker.pyx":192
 *         cdef double halfjitter = jitter * 0.5
 *         for idx in xrange(len(self.hmap)):
 *             self.hmap[idx] = midpoint + (random.random()*jitter -             # <<<<<<<<<<<<<<
 *                                          halfjitter)
 *     cpdef peaking(self):
 */
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_midpoint); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_random); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_random); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 192, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 192, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_jitter); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pyspades/mapmaker.pyx":193
 *         for idx in xrange(len(self.hmap)):
 *             self.hmap[idx] = midpoint + (random.random()*jitter -
 *                                          halfjitter)             # <<<<<<<<<<<<<<
 *     cpdef peaking(self):
 *         """Adds a "peaking" feel to the map."""
 */
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_halfjitter); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);

    /* "pyspades/mapmaker.pyx":192
 *         cdef double halfjitter = jitter * 0.5
 *         for idx in xrange(len(self.hmap)):
 *             self.hmap[idx] = midpoint + (random.random()*jitter -             # <<<<<<<<<<<<<<
 *                                          halfjitter)
 *     cpdef peaking(self):
 */
    __pyx_t_4 = PyNumber_Subtract(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__Pyx_SetItemInt(__pyx_v_self->hmap, __pyx_v_idx, __pyx_t_6, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }

  /* "pyspades/mapmaker.pyx":189
 *         cdef int idx = (x%self.width)+(y%self.height)*self.width
 *         self.hmap[idx] *= mult
 *     cpdef seed(self, double jitter, double midpoint):             # <<<<<<<<<<<<<<
 *         cdef double halfjitter = jitter * 0.5
 *         for idx in xrange(len(self.hmap)):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.seed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_23seed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_23seed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_jitter;
  double __pyx_v_midpoint;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("seed (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_jitter,&__pyx_n_s_midpoint,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_jitter)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_midpoint)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("seed", 1, 2, 2, 1); __PYX_ERR(0, 189, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "seed") < 0)) __PYX_ERR(0, 189, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_jitter = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_jitter == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 189, __pyx_L3_error)
    __pyx_v_midpoint = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_midpoint == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 189, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("seed", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 189, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.seed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_22seed(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_jitter, __pyx_v_midpoint);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_22seed(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_jitter, double __pyx_v_midpoint) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("seed", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_seed(__pyx_v_self, __pyx_v_jitter, __pyx_v_midpoint, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.seed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":194
 *             self.hmap[idx] = midpoint + (random.random()*jitter -
 *                                          halfjitter)
 *     cpdef peaking(self):             # <<<<<<<<<<<<<<
 *         """Adds a "peaking" feel to the map."""
 *         for idx in xrange(len(self.hmap)):
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_25peaking(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_peaking(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  Py_ssize_t __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("peaking", 0);

  /* "pyspades/mapmaker.pyx":196
 *     cpdef peaking(self):
 *         """Adds a "peaking" feel to the map."""
 *         for idx in xrange(len(self.hmap)):             # <<<<<<<<<<<<<<
 *             self.hmap[idx] = self.hmap[idx] * self.hmap[idx]
 *     cpdef dipping(self):
 */
  __pyx_t_1 = __pyx_v_self->hmap;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_idx = __pyx_t_3;

    /* "pyspades/mapmaker.pyx":197
 *         """Adds a "peaking" feel to the map."""
 *         for idx in xrange(len(self.hmap)):
 *             self.hmap[idx] = self.hmap[idx] * self.hmap[idx]             # <<<<<<<<<<<<<<
 *     cpdef dipping(self):
 *         """Adds a "dipping" feel to the map."""
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->hmap, __pyx_v_idx, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_self->hmap, __pyx_v_idx, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__Pyx_SetItemInt(__pyx_v_self->hmap, __pyx_v_idx, __pyx_t_5, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "pyspades/mapmaker.pyx":194
 *             self.hmap[idx] = midpoint + (random.random()*jitter -
 *                                          halfjitter)
 *     cpdef peaking(self):             # <<<<<<<<<<<<<<
 *         """Adds a "peaking" feel to the map."""
 *         for idx in xrange(len(self.hmap)):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.peaking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_25peaking(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_24peaking[] = "Adds a \"peaking\" feel to the map.";
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_25peaking(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("peaking (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_24peaking(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_24peaking(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("peaking", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_peaking(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.peaking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":198
 *         for idx in xrange(len(self.hmap)):
 *             self.hmap[idx] = self.hmap[idx] * self.hmap[idx]
 *     cpdef dipping(self):             # <<<<<<<<<<<<<<
 *         """Adds a "dipping" feel to the map."""
 *         for idx in xrange(len(self.hmap)):
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_27dipping(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_dipping(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  Py_ssize_t __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("dipping", 0);

  /* "pyspades/mapmaker.pyx":200
 *     cpdef dipping(self):
 *         """Adds a "dipping" feel to the map."""
 *         for idx in xrange(len(self.hmap)):             # <<<<<<<<<<<<<<
 *             self.hmap[idx] = math.sin(self.hmap[idx]*(math.pi))
 *     cpdef rolling(self):
 */
  __pyx_t_1 = __pyx_v_self->hmap;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_idx = __pyx_t_3;

    /* "pyspades/mapmaker.pyx":201
 *         """Adds a "dipping" feel to the map."""
 *         for idx in xrange(len(self.hmap)):
 *             self.hmap[idx] = math.sin(self.hmap[idx]*(math.pi))             # <<<<<<<<<<<<<<
 *     cpdef rolling(self):
 *         """Adds a "rolling" feel to the map."""
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_math); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_sin); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_self->hmap, __pyx_v_idx, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_math); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_pi); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Multiply(__pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 201, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 201, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 201, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_SetItemInt(__pyx_v_self->hmap, __pyx_v_idx, __pyx_t_1, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades/mapmaker.pyx":198
 *         for idx in xrange(len(self.hmap)):
 *             self.hmap[idx] = self.hmap[idx] * self.hmap[idx]
 *     cpdef dipping(self):             # <<<<<<<<<<<<<<
 *         """Adds a "dipping" feel to the map."""
 *         for idx in xrange(len(self.hmap)):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.dipping", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_27dipping(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_26dipping[] = "Adds a \"dipping\" feel to the map.";
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_27dipping(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dipping (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_26dipping(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_26dipping(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dipping", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_dipping(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.dipping", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":202
 *         for idx in xrange(len(self.hmap)):
 *             self.hmap[idx] = math.sin(self.hmap[idx]*(math.pi))
 *     cpdef rolling(self):             # <<<<<<<<<<<<<<
 *         """Adds a "rolling" feel to the map."""
 *         for idx in xrange(len(self.hmap)):
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_29rolling(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_rolling(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  Py_ssize_t __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("rolling", 0);

  /* "pyspades/mapmaker.pyx":204
 *     cpdef rolling(self):
 *         """Adds a "rolling" feel to the map."""
 *         for idx in xrange(len(self.hmap)):             # <<<<<<<<<<<<<<
 *             self.hmap[idx] = math.sin(self.hmap[idx]*(math.pi/2))
 *     cpdef smoothing(self):
 */
  __pyx_t_1 = __pyx_v_self->hmap;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_idx = __pyx_t_3;

    /* "pyspades/mapmaker.pyx":205
 *         """Adds a "rolling" feel to the map."""
 *         for idx in xrange(len(self.hmap)):
 *             self.hmap[idx] = math.sin(self.hmap[idx]*(math.pi/2))             # <<<<<<<<<<<<<<
 *     cpdef smoothing(self):
 *         """Does some simple averaging to bring down the noise level."""
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_math); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_sin); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_self->hmap, __pyx_v_idx, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_math); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_pi); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_t_7, __pyx_int_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Multiply(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 205, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_SetItemInt(__pyx_v_self->hmap, __pyx_v_idx, __pyx_t_1, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades/mapmaker.pyx":202
 *         for idx in xrange(len(self.hmap)):
 *             self.hmap[idx] = math.sin(self.hmap[idx]*(math.pi))
 *     cpdef rolling(self):             # <<<<<<<<<<<<<<
 *         """Adds a "rolling" feel to the map."""
 *         for idx in xrange(len(self.hmap)):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rolling", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_29rolling(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_28rolling[] = "Adds a \"rolling\" feel to the map.";
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_29rolling(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rolling (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_28rolling(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_28rolling(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("rolling", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_rolling(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rolling", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":206
 *         for idx in xrange(len(self.hmap)):
 *             self.hmap[idx] = math.sin(self.hmap[idx]*(math.pi/2))
 *     cpdef smoothing(self):             # <<<<<<<<<<<<<<
 *         """Does some simple averaging to bring down the noise level."""
 *         for x in xrange(0,self.width):
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_31smoothing(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_smoothing(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  double __pyx_v_top;
  double __pyx_v_left;
  double __pyx_v_right;
  double __pyx_v_bot;
  PyObject *__pyx_v_center = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("smoothing", 0);

  /* "pyspades/mapmaker.pyx":208
 *     cpdef smoothing(self):
 *         """Does some simple averaging to bring down the noise level."""
 *         for x in xrange(0,self.width):             # <<<<<<<<<<<<<<
 *             for y in xrange(0,self.height):
 *                 top = self.get_repeat(x,y-1)
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 208, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 208, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 208, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 208, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 208, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 208, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 208, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":209
 *         """Does some simple averaging to bring down the noise level."""
 *         for x in xrange(0,self.width):
 *             for y in xrange(0,self.height):             # <<<<<<<<<<<<<<
 *                 top = self.get_repeat(x,y-1)
 *                 left = self.get_repeat(x-1,y)
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->height); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_5 = __pyx_t_1; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 209, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 209, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 209, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 209, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 209, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 209, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_7(__pyx_t_5);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 209, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_y, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "pyspades/mapmaker.pyx":210
 *         for x in xrange(0,self.width):
 *             for y in xrange(0,self.height):
 *                 top = self.get_repeat(x,y-1)             # <<<<<<<<<<<<<<
 *                 left = self.get_repeat(x-1,y)
 *                 right = self.get_repeat(x+1,y)
 */
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_x); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 210, __pyx_L1_error)
      __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_v_y, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 210, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 210, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_top = __pyx_f_8pyspades_8mapmaker_9HeightMap_get_repeat(__pyx_v_self, __pyx_t_8, __pyx_t_9, 0);

      /* "pyspades/mapmaker.pyx":211
 *             for y in xrange(0,self.height):
 *                 top = self.get_repeat(x,y-1)
 *                 left = self.get_repeat(x-1,y)             # <<<<<<<<<<<<<<
 *                 right = self.get_repeat(x+1,y)
 *                 bot = self.get_repeat(x,y+1)
 */
      __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_v_x, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 211, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 211, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_y); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 211, __pyx_L1_error)
      __pyx_v_left = __pyx_f_8pyspades_8mapmaker_9HeightMap_get_repeat(__pyx_v_self, __pyx_t_9, __pyx_t_8, 0);

      /* "pyspades/mapmaker.pyx":212
 *                 top = self.get_repeat(x,y-1)
 *                 left = self.get_repeat(x-1,y)
 *                 right = self.get_repeat(x+1,y)             # <<<<<<<<<<<<<<
 *                 bot = self.get_repeat(x,y+1)
 *                 center = self.hmap[x+y*self.width]
 */
      __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_x, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 212, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 212, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_y); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 212, __pyx_L1_error)
      __pyx_v_right = __pyx_f_8pyspades_8mapmaker_9HeightMap_get_repeat(__pyx_v_self, __pyx_t_8, __pyx_t_9, 0);

      /* "pyspades/mapmaker.pyx":213
 *                 left = self.get_repeat(x-1,y)
 *                 right = self.get_repeat(x+1,y)
 *                 bot = self.get_repeat(x,y+1)             # <<<<<<<<<<<<<<
 *                 center = self.hmap[x+y*self.width]
 *                 self.hmap[x+y*self.width] = (top + left + right + bot + center)/5
 */
      __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_x); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 213, __pyx_L1_error)
      __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_y, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 213, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 213, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_bot = __pyx_f_8pyspades_8mapmaker_9HeightMap_get_repeat(__pyx_v_self, __pyx_t_9, __pyx_t_8, 0);

      /* "pyspades/mapmaker.pyx":214
 *                 right = self.get_repeat(x+1,y)
 *                 bot = self.get_repeat(x,y+1)
 *                 center = self.hmap[x+y*self.width]             # <<<<<<<<<<<<<<
 *                 self.hmap[x+y*self.width] = (top + left + right + bot + center)/5
 *     cpdef midpoint_displace(self, double jittervalue, \
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 214, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = PyNumber_Multiply(__pyx_v_y, __pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 214, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Add(__pyx_v_x, __pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 214, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyObject_GetItem(__pyx_v_self->hmap, __pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 214, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_center, __pyx_t_10);
      __pyx_t_10 = 0;

      /* "pyspades/mapmaker.pyx":215
 *                 bot = self.get_repeat(x,y+1)
 *                 center = self.hmap[x+y*self.width]
 *                 self.hmap[x+y*self.width] = (top + left + right + bot + center)/5             # <<<<<<<<<<<<<<
 *     cpdef midpoint_displace(self, double jittervalue, \
 *                           double spanscalingmultiplier, \
 */
      __pyx_t_10 = PyFloat_FromDouble((((__pyx_v_top + __pyx_v_left) + __pyx_v_right) + __pyx_v_bot)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 215, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_1 = PyNumber_Add(__pyx_t_10, __pyx_v_center); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 215, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_int_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 215, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 215, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_11 = PyNumber_Multiply(__pyx_v_y, __pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 215, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Add(__pyx_v_x, __pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 215, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(PyObject_SetItem(__pyx_v_self->hmap, __pyx_t_1, __pyx_t_10) < 0)) __PYX_ERR(0, 215, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "pyspades/mapmaker.pyx":209
 *         """Does some simple averaging to bring down the noise level."""
 *         for x in xrange(0,self.width):
 *             for y in xrange(0,self.height):             # <<<<<<<<<<<<<<
 *                 top = self.get_repeat(x,y-1)
 *                 left = self.get_repeat(x-1,y)
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pyspades/mapmaker.pyx":208
 *     cpdef smoothing(self):
 *         """Does some simple averaging to bring down the noise level."""
 *         for x in xrange(0,self.width):             # <<<<<<<<<<<<<<
 *             for y in xrange(0,self.height):
 *                 top = self.get_repeat(x,y-1)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades/mapmaker.pyx":206
 *         for idx in xrange(len(self.hmap)):
 *             self.hmap[idx] = math.sin(self.hmap[idx]*(math.pi/2))
 *     cpdef smoothing(self):             # <<<<<<<<<<<<<<
 *         """Does some simple averaging to bring down the noise level."""
 *         for x in xrange(0,self.width):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.smoothing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF(__pyx_v_center);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_31smoothing(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_30smoothing[] = "Does some simple averaging to bring down the noise level.";
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_31smoothing(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("smoothing (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_30smoothing(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_30smoothing(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("smoothing", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_smoothing(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.smoothing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":216
 *                 center = self.hmap[x+y*self.width]
 *                 self.hmap[x+y*self.width] = (top + left + right + bot + center)/5
 *     cpdef midpoint_displace(self, double jittervalue, \             # <<<<<<<<<<<<<<
 *                           double spanscalingmultiplier, \
 *                             int skip=0):
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_33midpoint_displace(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_midpoint_displace(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_jittervalue, double __pyx_v_spanscalingmultiplier, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_8mapmaker_9HeightMap_midpoint_displace *__pyx_optional_args) {
  int __pyx_v_skip = ((int)0);
  int __pyx_v_span;
  float __pyx_v_spanscaling;
  float __pyx_v_jitterrange;
  float __pyx_v_jitteroffset;
  int __pyx_v_halfspan;
  float __pyx_v_topleft;
  float __pyx_v_topright;
  float __pyx_v_botleft;
  float __pyx_v_botright;
  float __pyx_v_center;
  CYTHON_UNUSED long __pyx_v_iterations;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  float __pyx_t_15;
  __Pyx_RefNannySetupContext("midpoint_displace", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_skip = __pyx_optional_args->skip;
    }
  }

  /* "pyspades/mapmaker.pyx":221
 *         """Midpoint displacement with the diamond-square algorithm."""
 * 
 *         cdef int span = self.width+1             # <<<<<<<<<<<<<<
 *         cdef float spanscaling = 1.
 *         cdef float jitterrange
 */
  __pyx_v_span = (__pyx_v_self->width + 1);

  /* "pyspades/mapmaker.pyx":222
 * 
 *         cdef int span = self.width+1
 *         cdef float spanscaling = 1.             # <<<<<<<<<<<<<<
 *         cdef float jitterrange
 *         cdef float jitteroffset
 */
  __pyx_v_spanscaling = 1.;

  /* "pyspades/mapmaker.pyx":232
 *         cdef float center
 * 
 *         for iterations in xrange(9): # hardcoded for 512x512             # <<<<<<<<<<<<<<
 *             if skip>0:
 *                 skip-=1
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 9; __pyx_t_1+=1) {
    __pyx_v_iterations = __pyx_t_1;

    /* "pyspades/mapmaker.pyx":233
 * 
 *         for iterations in xrange(9): # hardcoded for 512x512
 *             if skip>0:             # <<<<<<<<<<<<<<
 *                 skip-=1
 *                 span = span >> 1
 */
    __pyx_t_2 = ((__pyx_v_skip > 0) != 0);
    if (__pyx_t_2) {

      /* "pyspades/mapmaker.pyx":234
 *         for iterations in xrange(9): # hardcoded for 512x512
 *             if skip>0:
 *                 skip-=1             # <<<<<<<<<<<<<<
 *                 span = span >> 1
 *                 spanscaling = spanscaling * spanscalingmultiplier
 */
      __pyx_v_skip = (__pyx_v_skip - 1);

      /* "pyspades/mapmaker.pyx":235
 *             if skip>0:
 *                 skip-=1
 *                 span = span >> 1             # <<<<<<<<<<<<<<
 *                 spanscaling = spanscaling * spanscalingmultiplier
 *                 continue
 */
      __pyx_v_span = (__pyx_v_span >> 1);

      /* "pyspades/mapmaker.pyx":236
 *                 skip-=1
 *                 span = span >> 1
 *                 spanscaling = spanscaling * spanscalingmultiplier             # <<<<<<<<<<<<<<
 *                 continue
 *             jitterrange = jittervalue * spanscaling
 */
      __pyx_v_spanscaling = (__pyx_v_spanscaling * __pyx_v_spanscalingmultiplier);

      /* "pyspades/mapmaker.pyx":237
 *                 span = span >> 1
 *                 spanscaling = spanscaling * spanscalingmultiplier
 *                 continue             # <<<<<<<<<<<<<<
 *             jitterrange = jittervalue * spanscaling
 *             jitteroffset = - jitterrange / 2
 */
      goto __pyx_L3_continue;

      /* "pyspades/mapmaker.pyx":233
 * 
 *         for iterations in xrange(9): # hardcoded for 512x512
 *             if skip>0:             # <<<<<<<<<<<<<<
 *                 skip-=1
 *                 span = span >> 1
 */
    }

    /* "pyspades/mapmaker.pyx":238
 *                 spanscaling = spanscaling * spanscalingmultiplier
 *                 continue
 *             jitterrange = jittervalue * spanscaling             # <<<<<<<<<<<<<<
 *             jitteroffset = - jitterrange / 2
 *             for x in xrange(0,self.width,span):
 */
    __pyx_v_jitterrange = (__pyx_v_jittervalue * __pyx_v_spanscaling);

    /* "pyspades/mapmaker.pyx":239
 *                 continue
 *             jitterrange = jittervalue * spanscaling
 *             jitteroffset = - jitterrange / 2             # <<<<<<<<<<<<<<
 *             for x in xrange(0,self.width,span):
 *                 for y in xrange(0,self.height,span):
 */
    __pyx_v_jitteroffset = ((-__pyx_v_jitterrange) / 2.0);

    /* "pyspades/mapmaker.pyx":240
 *             jitterrange = jittervalue * spanscaling
 *             jitteroffset = - jitterrange / 2
 *             for x in xrange(0,self.width,span):             # <<<<<<<<<<<<<<
 *                 for y in xrange(0,self.height,span):
 *                     halfspan = span >> 1
 */
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->width); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_span); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 240, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 240, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 240, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 240, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 240, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 240, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_7(__pyx_t_5);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 240, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "pyspades/mapmaker.pyx":241
 *             jitteroffset = - jitterrange / 2
 *             for x in xrange(0,self.width,span):
 *                 for y in xrange(0,self.height,span):             # <<<<<<<<<<<<<<
 *                     halfspan = span >> 1
 *                     topleft = self.get_repeat(x,y)
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->height); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 241, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_span); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 241, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 241, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_int_0);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_3);
      __pyx_t_4 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 241, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
        __pyx_t_8 = __pyx_t_3; __Pyx_INCREF(__pyx_t_8); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
      } else {
        __pyx_t_9 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 241, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 241, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      for (;;) {
        if (likely(!__pyx_t_10)) {
          if (likely(PyList_CheckExact(__pyx_t_8))) {
            if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_8)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_3 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_9); __Pyx_INCREF(__pyx_t_3); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 241, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_8, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 241, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          } else {
            if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_9); __Pyx_INCREF(__pyx_t_3); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 241, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_8, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 241, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_10(__pyx_t_8);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 241, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF_SET(__pyx_v_y, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "pyspades/mapmaker.pyx":242
 *             for x in xrange(0,self.width,span):
 *                 for y in xrange(0,self.height,span):
 *                     halfspan = span >> 1             # <<<<<<<<<<<<<<
 *                     topleft = self.get_repeat(x,y)
 *                     topright = self.get_repeat((x+span),y)
 */
        __pyx_v_halfspan = (__pyx_v_span >> 1);

        /* "pyspades/mapmaker.pyx":243
 *                 for y in xrange(0,self.height,span):
 *                     halfspan = span >> 1
 *                     topleft = self.get_repeat(x,y)             # <<<<<<<<<<<<<<
 *                     topright = self.get_repeat((x+span),y)
 *                     botleft = self.get_repeat(x,(y+span))
 */
        __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_x); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 243, __pyx_L1_error)
        __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_y); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 243, __pyx_L1_error)
        __pyx_v_topleft = __pyx_f_8pyspades_8mapmaker_9HeightMap_get_repeat(__pyx_v_self, __pyx_t_11, __pyx_t_12, 0);

        /* "pyspades/mapmaker.pyx":244
 *                     halfspan = span >> 1
 *                     topleft = self.get_repeat(x,y)
 *                     topright = self.get_repeat((x+span),y)             # <<<<<<<<<<<<<<
 *                     botleft = self.get_repeat(x,(y+span))
 *                     botright = self.get_repeat((x+span),(y+span))
 */
        __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_span); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 244, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyNumber_Add(__pyx_v_x, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 244, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 244, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_y); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 244, __pyx_L1_error)
        __pyx_v_topright = __pyx_f_8pyspades_8mapmaker_9HeightMap_get_repeat(__pyx_v_self, __pyx_t_12, __pyx_t_11, 0);

        /* "pyspades/mapmaker.pyx":245
 *                     topleft = self.get_repeat(x,y)
 *                     topright = self.get_repeat((x+span),y)
 *                     botleft = self.get_repeat(x,(y+span))             # <<<<<<<<<<<<<<
 *                     botright = self.get_repeat((x+span),(y+span))
 *                     center = (topleft+topright+botleft+botright) * 0.25\
 */
        __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_x); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 245, __pyx_L1_error)
        __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_span); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 245, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = PyNumber_Add(__pyx_v_y, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 245, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 245, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_v_botleft = __pyx_f_8pyspades_8mapmaker_9HeightMap_get_repeat(__pyx_v_self, __pyx_t_11, __pyx_t_12, 0);

        /* "pyspades/mapmaker.pyx":246
 *                     topright = self.get_repeat((x+span),y)
 *                     botleft = self.get_repeat(x,(y+span))
 *                     botright = self.get_repeat((x+span),(y+span))             # <<<<<<<<<<<<<<
 *                     center = (topleft+topright+botleft+botright) * 0.25\
 *                              + (random.random() * jitterrange + jitteroffset)
 */
        __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_span); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 246, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyNumber_Add(__pyx_v_x, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 246, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 246, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_span); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 246, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = PyNumber_Add(__pyx_v_y, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 246, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 246, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_v_botright = __pyx_f_8pyspades_8mapmaker_9HeightMap_get_repeat(__pyx_v_self, __pyx_t_12, __pyx_t_11, 0);

        /* "pyspades/mapmaker.pyx":247
 *                     botleft = self.get_repeat(x,(y+span))
 *                     botright = self.get_repeat((x+span),(y+span))
 *                     center = (topleft+topright+botleft+botright) * 0.25\             # <<<<<<<<<<<<<<
 *                              + (random.random() * jitterrange + jitteroffset)
 * 
 */
        __pyx_t_3 = PyFloat_FromDouble(((((__pyx_v_topleft + __pyx_v_topright) + __pyx_v_botleft) + __pyx_v_botright) * 0.25)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 247, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);

        /* "pyspades/mapmaker.pyx":248
 *                     botright = self.get_repeat((x+span),(y+span))
 *                     center = (topleft+topright+botleft+botright) * 0.25\
 *                              + (random.random() * jitterrange + jitteroffset)             # <<<<<<<<<<<<<<
 * 
 *                     self.set_repeat(x+halfspan,y,(topleft+topright+center)*0.33)
 */
        __pyx_t_13 = __Pyx_GetModuleGlobalName(__pyx_n_s_random); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 248, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_random); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 248, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_14))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_14);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_14, function);
          }
        }
        if (__pyx_t_13) {
          __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 248, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        } else {
          __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_14); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 248, __pyx_L1_error)
        }
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_14 = PyFloat_FromDouble(__pyx_v_jitterrange); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 248, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_13 = PyNumber_Multiply(__pyx_t_4, __pyx_t_14); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 248, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_14 = PyFloat_FromDouble(__pyx_v_jitteroffset); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 248, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_4 = PyNumber_Add(__pyx_t_13, __pyx_t_14); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 248, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_14 = PyNumber_Add(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 248, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_15 = __pyx_PyFloat_AsFloat(__pyx_t_14); if (unlikely((__pyx_t_15 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 248, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_v_center = __pyx_t_15;

        /* "pyspades/mapmaker.pyx":250
 *                              + (random.random() * jitterrange + jitteroffset)
 * 
 *                     self.set_repeat(x+halfspan,y,(topleft+topright+center)*0.33)             # <<<<<<<<<<<<<<
 *                     self.set_repeat(x,y+halfspan,(topleft+botleft+center)*0.33)
 *                     self.set_repeat(x+halfspan,y+span,
 */
        __pyx_t_14 = __Pyx_PyInt_From_int(__pyx_v_halfspan); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 250, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_4 = PyNumber_Add(__pyx_v_x, __pyx_t_14); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 250, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 250, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_y); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 250, __pyx_L1_error)
        __pyx_t_4 = __pyx_f_8pyspades_8mapmaker_9HeightMap_set_repeat(__pyx_v_self, __pyx_t_11, __pyx_t_12, (((__pyx_v_topleft + __pyx_v_topright) + __pyx_v_center) * 0.33), 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 250, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "pyspades/mapmaker.pyx":251
 * 
 *                     self.set_repeat(x+halfspan,y,(topleft+topright+center)*0.33)
 *                     self.set_repeat(x,y+halfspan,(topleft+botleft+center)*0.33)             # <<<<<<<<<<<<<<
 *                     self.set_repeat(x+halfspan,y+span,
 *                                     (botleft+botright+center)*0.33)
 */
        __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_x); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 251, __pyx_L1_error)
        __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_halfspan); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 251, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_14 = PyNumber_Add(__pyx_v_y, __pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 251, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_14); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 251, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_14 = __pyx_f_8pyspades_8mapmaker_9HeightMap_set_repeat(__pyx_v_self, __pyx_t_12, __pyx_t_11, (((__pyx_v_topleft + __pyx_v_botleft) + __pyx_v_center) * 0.33), 0); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 251, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

        /* "pyspades/mapmaker.pyx":252
 *                     self.set_repeat(x+halfspan,y,(topleft+topright+center)*0.33)
 *                     self.set_repeat(x,y+halfspan,(topleft+botleft+center)*0.33)
 *                     self.set_repeat(x+halfspan,y+span,             # <<<<<<<<<<<<<<
 *                                     (botleft+botright+center)*0.33)
 *                     self.set_repeat(x+span,y+halfspan,
 */
        __pyx_t_14 = __Pyx_PyInt_From_int(__pyx_v_halfspan); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 252, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_4 = PyNumber_Add(__pyx_v_x, __pyx_t_14); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 252, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 252, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_span); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 252, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_14 = PyNumber_Add(__pyx_v_y, __pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 252, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_14); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 252, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

        /* "pyspades/mapmaker.pyx":253
 *                     self.set_repeat(x,y+halfspan,(topleft+botleft+center)*0.33)
 *                     self.set_repeat(x+halfspan,y+span,
 *                                     (botleft+botright+center)*0.33)             # <<<<<<<<<<<<<<
 *                     self.set_repeat(x+span,y+halfspan,
 *                                     (topright+botright+center)*0.33)
 */
        __pyx_t_14 = __pyx_f_8pyspades_8mapmaker_9HeightMap_set_repeat(__pyx_v_self, __pyx_t_11, __pyx_t_12, (((__pyx_v_botleft + __pyx_v_botright) + __pyx_v_center) * 0.33), 0); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 252, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

        /* "pyspades/mapmaker.pyx":254
 *                     self.set_repeat(x+halfspan,y+span,
 *                                     (botleft+botright+center)*0.33)
 *                     self.set_repeat(x+span,y+halfspan,             # <<<<<<<<<<<<<<
 *                                     (topright+botright+center)*0.33)
 *                     self.set_repeat(x + halfspan, y + halfspan, center)
 */
        __pyx_t_14 = __Pyx_PyInt_From_int(__pyx_v_span); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 254, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_4 = PyNumber_Add(__pyx_v_x, __pyx_t_14); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 254, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 254, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_halfspan); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 254, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_14 = PyNumber_Add(__pyx_v_y, __pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 254, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_14); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 254, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

        /* "pyspades/mapmaker.pyx":255
 *                                     (botleft+botright+center)*0.33)
 *                     self.set_repeat(x+span,y+halfspan,
 *                                     (topright+botright+center)*0.33)             # <<<<<<<<<<<<<<
 *                     self.set_repeat(x + halfspan, y + halfspan, center)
 *             span = span >> 1
 */
        __pyx_t_14 = __pyx_f_8pyspades_8mapmaker_9HeightMap_set_repeat(__pyx_v_self, __pyx_t_12, __pyx_t_11, (((__pyx_v_topright + __pyx_v_botright) + __pyx_v_center) * 0.33), 0); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 254, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

        /* "pyspades/mapmaker.pyx":256
 *                     self.set_repeat(x+span,y+halfspan,
 *                                     (topright+botright+center)*0.33)
 *                     self.set_repeat(x + halfspan, y + halfspan, center)             # <<<<<<<<<<<<<<
 *             span = span >> 1
 *             spanscaling = spanscaling * spanscalingmultiplier
 */
        __pyx_t_14 = __Pyx_PyInt_From_int(__pyx_v_halfspan); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 256, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_4 = PyNumber_Add(__pyx_v_x, __pyx_t_14); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 256, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 256, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_halfspan); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 256, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_14 = PyNumber_Add(__pyx_v_y, __pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 256, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_14); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 256, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_14 = __pyx_f_8pyspades_8mapmaker_9HeightMap_set_repeat(__pyx_v_self, __pyx_t_11, __pyx_t_12, __pyx_v_center, 0); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 256, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

        /* "pyspades/mapmaker.pyx":241
 *             jitteroffset = - jitterrange / 2
 *             for x in xrange(0,self.width,span):
 *                 for y in xrange(0,self.height,span):             # <<<<<<<<<<<<<<
 *                     halfspan = span >> 1
 *                     topleft = self.get_repeat(x,y)
 */
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "pyspades/mapmaker.pyx":240
 *             jitterrange = jittervalue * spanscaling
 *             jitteroffset = - jitterrange / 2
 *             for x in xrange(0,self.width,span):             # <<<<<<<<<<<<<<
 *                 for y in xrange(0,self.height,span):
 *                     halfspan = span >> 1
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pyspades/mapmaker.pyx":257
 *                                     (topright+botright+center)*0.33)
 *                     self.set_repeat(x + halfspan, y + halfspan, center)
 *             span = span >> 1             # <<<<<<<<<<<<<<
 *             spanscaling = spanscaling * spanscalingmultiplier
 *     cpdef jitter_heights(self, double amount):
 */
    __pyx_v_span = (__pyx_v_span >> 1);

    /* "pyspades/mapmaker.pyx":258
 *                     self.set_repeat(x + halfspan, y + halfspan, center)
 *             span = span >> 1
 *             spanscaling = spanscaling * spanscalingmultiplier             # <<<<<<<<<<<<<<
 *     cpdef jitter_heights(self, double amount):
 *         """Image jittering filter. Amount is max pixels distance to jitter."""
 */
    __pyx_v_spanscaling = (__pyx_v_spanscaling * __pyx_v_spanscalingmultiplier);
    __pyx_L3_continue:;
  }

  /* "pyspades/mapmaker.pyx":216
 *                 center = self.hmap[x+y*self.width]
 *                 self.hmap[x+y*self.width] = (top + left + right + bot + center)/5
 *     cpdef midpoint_displace(self, double jittervalue, \             # <<<<<<<<<<<<<<
 *                           double spanscalingmultiplier, \
 *                             int skip=0):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.midpoint_displace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_33midpoint_displace(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_32midpoint_displace[] = "Midpoint displacement with the diamond-square algorithm.";
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_33midpoint_displace(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_jittervalue;
  double __pyx_v_spanscalingmultiplier;
  int __pyx_v_skip;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("midpoint_displace (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_jittervalue,&__pyx_n_s_spanscalingmultiplier,&__pyx_n_s_skip,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_jittervalue)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_spanscalingmultiplier)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("midpoint_displace", 0, 2, 3, 1); __PYX_ERR(0, 216, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_skip);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "midpoint_displace") < 0)) __PYX_ERR(0, 216, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_jittervalue = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_jittervalue == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 216, __pyx_L3_error)
    __pyx_v_spanscalingmultiplier = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_spanscalingmultiplier == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 217, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_skip = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_skip == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 218, __pyx_L3_error)
    } else {
      __pyx_v_skip = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("midpoint_displace", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 216, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.midpoint_displace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_32midpoint_displace(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_jittervalue, __pyx_v_spanscalingmultiplier, __pyx_v_skip);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_32midpoint_displace(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_jittervalue, double __pyx_v_spanscalingmultiplier, int __pyx_v_skip) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_8pyspades_8mapmaker_9HeightMap_midpoint_displace __pyx_t_2;
  __Pyx_RefNannySetupContext("midpoint_displace", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.skip = __pyx_v_skip;
  __pyx_t_1 = __pyx_vtabptr_8pyspades_8mapmaker_HeightMap->midpoint_displace(__pyx_v_self, __pyx_v_jittervalue, __pyx_v_spanscalingmultiplier, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.midpoint_displace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":259
 *             span = span >> 1
 *             spanscaling = spanscaling * spanscalingmultiplier
 *     cpdef jitter_heights(self, double amount):             # <<<<<<<<<<<<<<
 *         """Image jittering filter. Amount is max pixels distance to jitter."""
 *         cdef int nx = 0
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_35jitter_heights(PyObject *__pyx_v_self, PyObject *__pyx_arg_amount); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_jitter_heights(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_amount, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_nx;
  int __pyx_v_ny;
  int __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("jitter_heights", 0);

  /* "pyspades/mapmaker.pyx":261
 *     cpdef jitter_heights(self, double amount):
 *         """Image jittering filter. Amount is max pixels distance to jitter."""
 *         cdef int nx = 0             # <<<<<<<<<<<<<<
 *         cdef int ny = 0
 *         cdef int idx = 0
 */
  __pyx_v_nx = 0;

  /* "pyspades/mapmaker.pyx":262
 *         """Image jittering filter. Amount is max pixels distance to jitter."""
 *         cdef int nx = 0
 *         cdef int ny = 0             # <<<<<<<<<<<<<<
 *         cdef int idx = 0
 * 
 */
  __pyx_v_ny = 0;

  /* "pyspades/mapmaker.pyx":263
 *         cdef int nx = 0
 *         cdef int ny = 0
 *         cdef int idx = 0             # <<<<<<<<<<<<<<
 * 
 *         while idx<len(self.hmap):
 */
  __pyx_v_idx = 0;

  /* "pyspades/mapmaker.pyx":265
 *         cdef int idx = 0
 * 
 *         while idx<len(self.hmap):             # <<<<<<<<<<<<<<
 *             nx = int((idx % self.width) + (random.random()-0.5)*amount)
 *             ny = int((idx // self.width) + (random.random()-0.5)*amount)
 */
  while (1) {
    __pyx_t_1 = __pyx_v_self->hmap;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 265, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = ((__pyx_v_idx < __pyx_t_2) != 0);
    if (!__pyx_t_3) break;

    /* "pyspades/mapmaker.pyx":266
 * 
 *         while idx<len(self.hmap):
 *             nx = int((idx % self.width) + (random.random()-0.5)*amount)             # <<<<<<<<<<<<<<
 *             ny = int((idx // self.width) + (random.random()-0.5)*amount)
 *             self.hmap[idx] = self.get_repeat(nx, ny)
 */
    if (unlikely(__pyx_v_self->width == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 266, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyInt_From_int(__Pyx_mod_int(__pyx_v_idx, __pyx_v_self->width)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_random); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_random); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 266, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 266, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyFloat_SubtractObjC(__pyx_t_4, __pyx_float_0_5, 0.5, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_amount); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyNumber_Int(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 266, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_nx = __pyx_t_7;

    /* "pyspades/mapmaker.pyx":267
 *         while idx<len(self.hmap):
 *             nx = int((idx % self.width) + (random.random()-0.5)*amount)
 *             ny = int((idx // self.width) + (random.random()-0.5)*amount)             # <<<<<<<<<<<<<<
 *             self.hmap[idx] = self.get_repeat(nx, ny)
 *             idx+=1
 */
    if (unlikely(__pyx_v_self->width == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 267, __pyx_L1_error)
    }
    else if (sizeof(int) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_self->width == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_idx))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      __PYX_ERR(0, 267, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyInt_From_int(__Pyx_div_int(__pyx_v_idx, __pyx_v_self->width)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_random); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_random); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_1) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 267, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 267, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyFloat_SubtractObjC(__pyx_t_4, __pyx_float_0_5, 0.5, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_amount); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyNumber_Multiply(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 267, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_ny = __pyx_t_7;

    /* "pyspades/mapmaker.pyx":268
 *             nx = int((idx % self.width) + (random.random()-0.5)*amount)
 *             ny = int((idx // self.width) + (random.random()-0.5)*amount)
 *             self.hmap[idx] = self.get_repeat(nx, ny)             # <<<<<<<<<<<<<<
 *             idx+=1
 *     cpdef jitter_colors(self, double amount):
 */
    __pyx_t_1 = PyFloat_FromDouble(__pyx_f_8pyspades_8mapmaker_9HeightMap_get_repeat(__pyx_v_self, __pyx_v_nx, __pyx_v_ny, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_self->hmap, __pyx_v_idx, __pyx_t_1, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":269
 *             ny = int((idx // self.width) + (random.random()-0.5)*amount)
 *             self.hmap[idx] = self.get_repeat(nx, ny)
 *             idx+=1             # <<<<<<<<<<<<<<
 *     cpdef jitter_colors(self, double amount):
 *         """Image jittering filter. Amount is max pixels distance to jitter."""
 */
    __pyx_v_idx = (__pyx_v_idx + 1);
  }

  /* "pyspades/mapmaker.pyx":259
 *             span = span >> 1
 *             spanscaling = spanscaling * spanscalingmultiplier
 *     cpdef jitter_heights(self, double amount):             # <<<<<<<<<<<<<<
 *         """Image jittering filter. Amount is max pixels distance to jitter."""
 *         cdef int nx = 0
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.jitter_heights", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_35jitter_heights(PyObject *__pyx_v_self, PyObject *__pyx_arg_amount); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_34jitter_heights[] = "Image jittering filter. Amount is max pixels distance to jitter.";
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_35jitter_heights(PyObject *__pyx_v_self, PyObject *__pyx_arg_amount) {
  double __pyx_v_amount;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("jitter_heights (wrapper)", 0);
  assert(__pyx_arg_amount); {
    __pyx_v_amount = __pyx_PyFloat_AsDouble(__pyx_arg_amount); if (unlikely((__pyx_v_amount == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 259, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.jitter_heights", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_34jitter_heights(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), ((double)__pyx_v_amount));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_34jitter_heights(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_amount) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("jitter_heights", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_jitter_heights(__pyx_v_self, __pyx_v_amount, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.jitter_heights", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":270
 *             self.hmap[idx] = self.get_repeat(nx, ny)
 *             idx+=1
 *     cpdef jitter_colors(self, double amount):             # <<<<<<<<<<<<<<
 *         """Image jittering filter. Amount is max pixels distance to jitter."""
 *         cdef int nx = 0
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_37jitter_colors(PyObject *__pyx_v_self, PyObject *__pyx_arg_amount); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_jitter_colors(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_amount, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_nx;
  int __pyx_v_ny;
  int __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("jitter_colors", 0);

  /* "pyspades/mapmaker.pyx":272
 *     cpdef jitter_colors(self, double amount):
 *         """Image jittering filter. Amount is max pixels distance to jitter."""
 *         cdef int nx = 0             # <<<<<<<<<<<<<<
 *         cdef int ny = 0
 *         cdef int idx = 0
 */
  __pyx_v_nx = 0;

  /* "pyspades/mapmaker.pyx":273
 *         """Image jittering filter. Amount is max pixels distance to jitter."""
 *         cdef int nx = 0
 *         cdef int ny = 0             # <<<<<<<<<<<<<<
 *         cdef int idx = 0
 * 
 */
  __pyx_v_ny = 0;

  /* "pyspades/mapmaker.pyx":274
 *         cdef int nx = 0
 *         cdef int ny = 0
 *         cdef int idx = 0             # <<<<<<<<<<<<<<
 * 
 *         while idx<len(self.hmap):
 */
  __pyx_v_idx = 0;

  /* "pyspades/mapmaker.pyx":276
 *         cdef int idx = 0
 * 
 *         while idx<len(self.hmap):             # <<<<<<<<<<<<<<
 *             nx = int((idx % self.width) + (random.random()-0.5)*amount)
 *             ny = int((idx // self.width) + (random.random()-0.5)*amount)
 */
  while (1) {
    __pyx_t_1 = __pyx_v_self->hmap;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 276, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = ((__pyx_v_idx < __pyx_t_2) != 0);
    if (!__pyx_t_3) break;

    /* "pyspades/mapmaker.pyx":277
 * 
 *         while idx<len(self.hmap):
 *             nx = int((idx % self.width) + (random.random()-0.5)*amount)             # <<<<<<<<<<<<<<
 *             ny = int((idx // self.width) + (random.random()-0.5)*amount)
 *             self.cmap[idx] = self.get_col_repeat(nx, ny)
 */
    if (unlikely(__pyx_v_self->width == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 277, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyInt_From_int(__Pyx_mod_int(__pyx_v_idx, __pyx_v_self->width)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_random); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_random); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 277, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 277, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyFloat_SubtractObjC(__pyx_t_4, __pyx_float_0_5, 0.5, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_amount); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyNumber_Int(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_nx = __pyx_t_7;

    /* "pyspades/mapmaker.pyx":278
 *         while idx<len(self.hmap):
 *             nx = int((idx % self.width) + (random.random()-0.5)*amount)
 *             ny = int((idx // self.width) + (random.random()-0.5)*amount)             # <<<<<<<<<<<<<<
 *             self.cmap[idx] = self.get_col_repeat(nx, ny)
 *             idx+=1
 */
    if (unlikely(__pyx_v_self->width == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 278, __pyx_L1_error)
    }
    else if (sizeof(int) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_self->width == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_idx))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      __PYX_ERR(0, 278, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyInt_From_int(__Pyx_div_int(__pyx_v_idx, __pyx_v_self->width)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_random); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_random); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_1) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 278, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyFloat_SubtractObjC(__pyx_t_4, __pyx_float_0_5, 0.5, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_amount); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyNumber_Multiply(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_ny = __pyx_t_7;

    /* "pyspades/mapmaker.pyx":279
 *             nx = int((idx % self.width) + (random.random()-0.5)*amount)
 *             ny = int((idx // self.width) + (random.random()-0.5)*amount)
 *             self.cmap[idx] = self.get_col_repeat(nx, ny)             # <<<<<<<<<<<<<<
 *             idx+=1
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_8pyspades_8mapmaker_9HeightMap_get_col_repeat(__pyx_v_self, __pyx_v_nx, __pyx_v_ny, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 279, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_self->cmap, __pyx_v_idx, __pyx_t_1, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 279, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":280
 *             ny = int((idx // self.width) + (random.random()-0.5)*amount)
 *             self.cmap[idx] = self.get_col_repeat(nx, ny)
 *             idx+=1             # <<<<<<<<<<<<<<
 * 
 *     cpdef level_against_heightmap(self, HeightMap other, double height):
 */
    __pyx_v_idx = (__pyx_v_idx + 1);
  }

  /* "pyspades/mapmaker.pyx":270
 *             self.hmap[idx] = self.get_repeat(nx, ny)
 *             idx+=1
 *     cpdef jitter_colors(self, double amount):             # <<<<<<<<<<<<<<
 *         """Image jittering filter. Amount is max pixels distance to jitter."""
 *         cdef int nx = 0
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.jitter_colors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_37jitter_colors(PyObject *__pyx_v_self, PyObject *__pyx_arg_amount); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_36jitter_colors[] = "Image jittering filter. Amount is max pixels distance to jitter.";
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_37jitter_colors(PyObject *__pyx_v_self, PyObject *__pyx_arg_amount) {
  double __pyx_v_amount;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("jitter_colors (wrapper)", 0);
  assert(__pyx_arg_amount); {
    __pyx_v_amount = __pyx_PyFloat_AsDouble(__pyx_arg_amount); if (unlikely((__pyx_v_amount == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 270, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.jitter_colors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_36jitter_colors(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), ((double)__pyx_v_amount));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_36jitter_colors(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_amount) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("jitter_colors", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_jitter_colors(__pyx_v_self, __pyx_v_amount, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.jitter_colors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":282
 *             idx+=1
 * 
 *     cpdef level_against_heightmap(self, HeightMap other, double height):             # <<<<<<<<<<<<<<
 *         """Use another HeightMap as an alpha-mask to force values to a
 *             specific height"""
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_39level_against_heightmap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_level_against_heightmap(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_other, double __pyx_v_height, CYTHON_UNUSED int __pyx_skip_dispatch) {
  long __pyx_v_x;
  long __pyx_v_y;
  double __pyx_v_orig;
  double __pyx_v_dist;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  long __pyx_t_2;
  int __pyx_t_3;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("level_against_heightmap", 0);

  /* "pyspades/mapmaker.pyx":285
 *         """Use another HeightMap as an alpha-mask to force values to a
 *             specific height"""
 *         for x in xrange(0, self.width):             # <<<<<<<<<<<<<<
 *             for y in xrange(0, self.height):
 *                 orig = self.get_repeat(x,y)
 */
  __pyx_t_1 = __pyx_v_self->width;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_x = __pyx_t_2;

    /* "pyspades/mapmaker.pyx":286
 *             specific height"""
 *         for x in xrange(0, self.width):
 *             for y in xrange(0, self.height):             # <<<<<<<<<<<<<<
 *                 orig = self.get_repeat(x,y)
 *                 dist = orig - height
 */
    __pyx_t_3 = __pyx_v_self->height;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_y = __pyx_t_4;

      /* "pyspades/mapmaker.pyx":287
 *         for x in xrange(0, self.width):
 *             for y in xrange(0, self.height):
 *                 orig = self.get_repeat(x,y)             # <<<<<<<<<<<<<<
 *                 dist = orig - height
 *                 self.set_repeat(x,y, orig - dist * other.get_repeat(x,y))
 */
      __pyx_v_orig = __pyx_f_8pyspades_8mapmaker_9HeightMap_get_repeat(__pyx_v_self, __pyx_v_x, __pyx_v_y, 0);

      /* "pyspades/mapmaker.pyx":288
 *             for y in xrange(0, self.height):
 *                 orig = self.get_repeat(x,y)
 *                 dist = orig - height             # <<<<<<<<<<<<<<
 *                 self.set_repeat(x,y, orig - dist * other.get_repeat(x,y))
 *     cpdef blend_heightmaps(self, HeightMap alphamap, HeightMap HeightMap):
 */
      __pyx_v_dist = (__pyx_v_orig - __pyx_v_height);

      /* "pyspades/mapmaker.pyx":289
 *                 orig = self.get_repeat(x,y)
 *                 dist = orig - height
 *                 self.set_repeat(x,y, orig - dist * other.get_repeat(x,y))             # <<<<<<<<<<<<<<
 *     cpdef blend_heightmaps(self, HeightMap alphamap, HeightMap HeightMap):
 *         """Blend according to two HeightMaps: one as an alpha-mask,
 */
      __pyx_t_5 = __pyx_f_8pyspades_8mapmaker_9HeightMap_set_repeat(__pyx_v_self, __pyx_v_x, __pyx_v_y, (__pyx_v_orig - (__pyx_v_dist * __pyx_f_8pyspades_8mapmaker_9HeightMap_get_repeat(__pyx_v_other, __pyx_v_x, __pyx_v_y, 0))), 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 289, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }

  /* "pyspades/mapmaker.pyx":282
 *             idx+=1
 * 
 *     cpdef level_against_heightmap(self, HeightMap other, double height):             # <<<<<<<<<<<<<<
 *         """Use another HeightMap as an alpha-mask to force values to a
 *             specific height"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.level_against_heightmap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_39level_against_heightmap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_38level_against_heightmap[] = "Use another HeightMap as an alpha-mask to force values to a\n            specific height";
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_39level_against_heightmap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_other = 0;
  double __pyx_v_height;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("level_against_heightmap (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other,&__pyx_n_s_height,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_other)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("level_against_heightmap", 1, 2, 2, 1); __PYX_ERR(0, 282, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "level_against_heightmap") < 0)) __PYX_ERR(0, 282, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_other = ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)values[0]);
    __pyx_v_height = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_height == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 282, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("level_against_heightmap", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 282, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.level_against_heightmap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pyspades_8mapmaker_HeightMap, 1, "other", 0))) __PYX_ERR(0, 282, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_38level_against_heightmap(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_other, __pyx_v_height);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_38level_against_heightmap(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_other, double __pyx_v_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("level_against_heightmap", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_level_against_heightmap(__pyx_v_self, __pyx_v_other, __pyx_v_height, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.level_against_heightmap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":290
 *                 dist = orig - height
 *                 self.set_repeat(x,y, orig - dist * other.get_repeat(x,y))
 *     cpdef blend_heightmaps(self, HeightMap alphamap, HeightMap HeightMap):             # <<<<<<<<<<<<<<
 *         """Blend according to two HeightMaps: one as an alpha-mask,
 *             the other contains desired heights"""
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_41blend_heightmaps(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_blend_heightmaps(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_alphamap, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_HeightMap, CYTHON_UNUSED int __pyx_skip_dispatch) {
  long __pyx_v_x;
  long __pyx_v_y;
  double __pyx_v_orig;
  PyObject *__pyx_v_dist = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  long __pyx_t_2;
  int __pyx_t_3;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  double __pyx_t_8;
  __Pyx_RefNannySetupContext("blend_heightmaps", 0);

  /* "pyspades/mapmaker.pyx":293
 *         """Blend according to two HeightMaps: one as an alpha-mask,
 *             the other contains desired heights"""
 *         for x in xrange(0, self.width):             # <<<<<<<<<<<<<<
 *             for y in xrange(0, self.height):
 *                 orig = self.get_repeat(x,y)
 */
  __pyx_t_1 = __pyx_v_self->width;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_x = __pyx_t_2;

    /* "pyspades/mapmaker.pyx":294
 *             the other contains desired heights"""
 *         for x in xrange(0, self.width):
 *             for y in xrange(0, self.height):             # <<<<<<<<<<<<<<
 *                 orig = self.get_repeat(x,y)
 *                 dist = orig - HeightMap.get_repeat(x,y)
 */
    __pyx_t_3 = __pyx_v_self->height;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_y = __pyx_t_4;

      /* "pyspades/mapmaker.pyx":295
 *         for x in xrange(0, self.width):
 *             for y in xrange(0, self.height):
 *                 orig = self.get_repeat(x,y)             # <<<<<<<<<<<<<<
 *                 dist = orig - HeightMap.get_repeat(x,y)
 *                 self.set_repeat(x,y, orig - dist * alphamap.get_repeat(x,y))
 */
      __pyx_v_orig = __pyx_f_8pyspades_8mapmaker_9HeightMap_get_repeat(__pyx_v_self, __pyx_v_x, __pyx_v_y, 0);

      /* "pyspades/mapmaker.pyx":296
 *             for y in xrange(0, self.height):
 *                 orig = self.get_repeat(x,y)
 *                 dist = orig - HeightMap.get_repeat(x,y)             # <<<<<<<<<<<<<<
 *                 self.set_repeat(x,y, orig - dist * alphamap.get_repeat(x,y))
 *     cpdef rect_solid(self, int x, int y, int w, int h, double z):
 */
      __pyx_t_5 = PyFloat_FromDouble((__pyx_v_orig - __pyx_f_8pyspades_8mapmaker_9HeightMap_get_repeat(__pyx_v_HeightMap, __pyx_v_x, __pyx_v_y, 0))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 296, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_dist, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "pyspades/mapmaker.pyx":297
 *                 orig = self.get_repeat(x,y)
 *                 dist = orig - HeightMap.get_repeat(x,y)
 *                 self.set_repeat(x,y, orig - dist * alphamap.get_repeat(x,y))             # <<<<<<<<<<<<<<
 *     cpdef rect_solid(self, int x, int y, int w, int h, double z):
 *         for xx in xrange(x, x+w):
 */
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_orig); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyFloat_FromDouble(__pyx_f_8pyspades_8mapmaker_9HeightMap_get_repeat(__pyx_v_alphamap, __pyx_v_x, __pyx_v_y, 0)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyNumber_Multiply(__pyx_v_dist, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_Subtract(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 297, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __pyx_f_8pyspades_8mapmaker_9HeightMap_set_repeat(__pyx_v_self, __pyx_v_x, __pyx_v_y, __pyx_t_8, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }

  /* "pyspades/mapmaker.pyx":290
 *                 dist = orig - height
 *                 self.set_repeat(x,y, orig - dist * other.get_repeat(x,y))
 *     cpdef blend_heightmaps(self, HeightMap alphamap, HeightMap HeightMap):             # <<<<<<<<<<<<<<
 *         """Blend according to two HeightMaps: one as an alpha-mask,
 *             the other contains desired heights"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.blend_heightmaps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dist);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_41blend_heightmaps(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_40blend_heightmaps[] = "Blend according to two HeightMaps: one as an alpha-mask,\n            the other contains desired heights";
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_41blend_heightmaps(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_alphamap = 0;
  struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_HeightMap = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("blend_heightmaps (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_alphamap,&__pyx_n_s_HeightMap,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_alphamap)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_HeightMap)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("blend_heightmaps", 1, 2, 2, 1); __PYX_ERR(0, 290, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "blend_heightmaps") < 0)) __PYX_ERR(0, 290, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_alphamap = ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)values[0]);
    __pyx_v_HeightMap = ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("blend_heightmaps", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 290, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.blend_heightmaps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_alphamap), __pyx_ptype_8pyspades_8mapmaker_HeightMap, 1, "alphamap", 0))) __PYX_ERR(0, 290, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_HeightMap), __pyx_ptype_8pyspades_8mapmaker_HeightMap, 1, "HeightMap", 0))) __PYX_ERR(0, 290, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_40blend_heightmaps(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_alphamap, __pyx_v_HeightMap);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_40blend_heightmaps(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_alphamap, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_HeightMap) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("blend_heightmaps", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_blend_heightmaps(__pyx_v_self, __pyx_v_alphamap, __pyx_v_HeightMap, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.blend_heightmaps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":298
 *                 dist = orig - HeightMap.get_repeat(x,y)
 *                 self.set_repeat(x,y, orig - dist * alphamap.get_repeat(x,y))
 *     cpdef rect_solid(self, int x, int y, int w, int h, double z):             # <<<<<<<<<<<<<<
 *         for xx in xrange(x, x+w):
 *             for yy in xrange(y, y+h):
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_43rect_solid(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_rect_solid(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_w, int __pyx_v_h, double __pyx_v_z, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_xx;
  int __pyx_v_yy;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("rect_solid", 0);

  /* "pyspades/mapmaker.pyx":299
 *                 self.set_repeat(x,y, orig - dist * alphamap.get_repeat(x,y))
 *     cpdef rect_solid(self, int x, int y, int w, int h, double z):
 *         for xx in xrange(x, x+w):             # <<<<<<<<<<<<<<
 *             for yy in xrange(y, y+h):
 *                 self.set_repeat(xx,yy,z)
 */
  __pyx_t_1 = (__pyx_v_x + __pyx_v_w);
  for (__pyx_t_2 = __pyx_v_x; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_xx = __pyx_t_2;

    /* "pyspades/mapmaker.pyx":300
 *     cpdef rect_solid(self, int x, int y, int w, int h, double z):
 *         for xx in xrange(x, x+w):
 *             for yy in xrange(y, y+h):             # <<<<<<<<<<<<<<
 *                 self.set_repeat(xx,yy,z)
 *     cpdef rect_noise(self, int x, int y, int w, int h,
 */
    __pyx_t_3 = (__pyx_v_y + __pyx_v_h);
    for (__pyx_t_4 = __pyx_v_y; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_yy = __pyx_t_4;

      /* "pyspades/mapmaker.pyx":301
 *         for xx in xrange(x, x+w):
 *             for yy in xrange(y, y+h):
 *                 self.set_repeat(xx,yy,z)             # <<<<<<<<<<<<<<
 *     cpdef rect_noise(self, int x, int y, int w, int h,
 *                      double jitter, double midpoint):
 */
      __pyx_t_5 = __pyx_f_8pyspades_8mapmaker_9HeightMap_set_repeat(__pyx_v_self, __pyx_v_xx, __pyx_v_yy, __pyx_v_z, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 301, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }

  /* "pyspades/mapmaker.pyx":298
 *                 dist = orig - HeightMap.get_repeat(x,y)
 *                 self.set_repeat(x,y, orig - dist * alphamap.get_repeat(x,y))
 *     cpdef rect_solid(self, int x, int y, int w, int h, double z):             # <<<<<<<<<<<<<<
 *         for xx in xrange(x, x+w):
 *             for yy in xrange(y, y+h):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rect_solid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_43rect_solid(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_43rect_solid(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_w;
  int __pyx_v_h;
  double __pyx_v_z;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rect_solid (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_w,&__pyx_n_s_h,&__pyx_n_s_z,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rect_solid", 1, 5, 5, 1); __PYX_ERR(0, 298, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rect_solid", 1, 5, 5, 2); __PYX_ERR(0, 298, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_h)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rect_solid", 1, 5, 5, 3); __PYX_ERR(0, 298, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_z)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rect_solid", 1, 5, 5, 4); __PYX_ERR(0, 298, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rect_solid") < 0)) __PYX_ERR(0, 298, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_x = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 298, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 298, __pyx_L3_error)
    __pyx_v_w = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_w == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 298, __pyx_L3_error)
    __pyx_v_h = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_h == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 298, __pyx_L3_error)
    __pyx_v_z = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_z == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 298, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rect_solid", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 298, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rect_solid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_42rect_solid(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_w, __pyx_v_h, __pyx_v_z);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_42rect_solid(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_w, int __pyx_v_h, double __pyx_v_z) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("rect_solid", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_rect_solid(__pyx_v_self, __pyx_v_x, __pyx_v_y, __pyx_v_w, __pyx_v_h, __pyx_v_z, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rect_solid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":302
 *             for yy in xrange(y, y+h):
 *                 self.set_repeat(xx,yy,z)
 *     cpdef rect_noise(self, int x, int y, int w, int h,             # <<<<<<<<<<<<<<
 *                      double jitter, double midpoint):
 *         cdef double halfjitter = jitter * 0.5
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_45rect_noise(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_rect_noise(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_w, int __pyx_v_h, double __pyx_v_jitter, double __pyx_v_midpoint, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_v_halfjitter;
  int __pyx_v_xx;
  int __pyx_v_yy;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  double __pyx_t_9;
  __Pyx_RefNannySetupContext("rect_noise", 0);

  /* "pyspades/mapmaker.pyx":304
 *     cpdef rect_noise(self, int x, int y, int w, int h,
 *                      double jitter, double midpoint):
 *         cdef double halfjitter = jitter * 0.5             # <<<<<<<<<<<<<<
 *         for xx in xrange(x,x+w):
 *             for yy in xrange(y,y+h):
 */
  __pyx_v_halfjitter = (__pyx_v_jitter * 0.5);

  /* "pyspades/mapmaker.pyx":305
 *                      double jitter, double midpoint):
 *         cdef double halfjitter = jitter * 0.5
 *         for xx in xrange(x,x+w):             # <<<<<<<<<<<<<<
 *             for yy in xrange(y,y+h):
 *                 self.set(xx,yy, midpoint + (random.random()*jitter -
 */
  __pyx_t_1 = (__pyx_v_x + __pyx_v_w);
  for (__pyx_t_2 = __pyx_v_x; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_xx = __pyx_t_2;

    /* "pyspades/mapmaker.pyx":306
 *         cdef double halfjitter = jitter * 0.5
 *         for xx in xrange(x,x+w):
 *             for yy in xrange(y,y+h):             # <<<<<<<<<<<<<<
 *                 self.set(xx,yy, midpoint + (random.random()*jitter -
 *                                          halfjitter))
 */
    __pyx_t_3 = (__pyx_v_y + __pyx_v_h);
    for (__pyx_t_4 = __pyx_v_y; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_yy = __pyx_t_4;

      /* "pyspades/mapmaker.pyx":307
 *         for xx in xrange(x,x+w):
 *             for yy in xrange(y,y+h):
 *                 self.set(xx,yy, midpoint + (random.random()*jitter -             # <<<<<<<<<<<<<<
 *                                          halfjitter))
 *     cpdef rect_color(self, int x, int y, int w, int h, int col):
 */
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_midpoint); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 307, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_random); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 307, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_random); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 307, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      if (__pyx_t_7) {
        __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 307, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else {
        __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 307, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyFloat_FromDouble(__pyx_v_jitter); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 307, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = PyNumber_Multiply(__pyx_t_6, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 307, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "pyspades/mapmaker.pyx":308
 *             for yy in xrange(y,y+h):
 *                 self.set(xx,yy, midpoint + (random.random()*jitter -
 *                                          halfjitter))             # <<<<<<<<<<<<<<
 *     cpdef rect_color(self, int x, int y, int w, int h, int col):
 *         for xx in xrange(x, x+w):
 */
      __pyx_t_8 = PyFloat_FromDouble(__pyx_v_halfjitter); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 308, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);

      /* "pyspades/mapmaker.pyx":307
 *         for xx in xrange(x,x+w):
 *             for yy in xrange(y,y+h):
 *                 self.set(xx,yy, midpoint + (random.random()*jitter -             # <<<<<<<<<<<<<<
 *                                          halfjitter))
 *     cpdef rect_color(self, int x, int y, int w, int h, int col):
 */
      __pyx_t_6 = PyNumber_Subtract(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 307, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyNumber_Add(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 307, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 307, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __pyx_f_8pyspades_8mapmaker_9HeightMap_set(__pyx_v_self, __pyx_v_xx, __pyx_v_yy, __pyx_t_9, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 307, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }

  /* "pyspades/mapmaker.pyx":302
 *             for yy in xrange(y, y+h):
 *                 self.set_repeat(xx,yy,z)
 *     cpdef rect_noise(self, int x, int y, int w, int h,             # <<<<<<<<<<<<<<
 *                      double jitter, double midpoint):
 *         cdef double halfjitter = jitter * 0.5
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rect_noise", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_45rect_noise(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_45rect_noise(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_w;
  int __pyx_v_h;
  double __pyx_v_jitter;
  double __pyx_v_midpoint;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rect_noise (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_w,&__pyx_n_s_h,&__pyx_n_s_jitter,&__pyx_n_s_midpoint,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rect_noise", 1, 6, 6, 1); __PYX_ERR(0, 302, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rect_noise", 1, 6, 6, 2); __PYX_ERR(0, 302, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_h)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rect_noise", 1, 6, 6, 3); __PYX_ERR(0, 302, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_jitter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rect_noise", 1, 6, 6, 4); __PYX_ERR(0, 302, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_midpoint)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rect_noise", 1, 6, 6, 5); __PYX_ERR(0, 302, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rect_noise") < 0)) __PYX_ERR(0, 302, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_x = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 302, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 302, __pyx_L3_error)
    __pyx_v_w = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_w == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 302, __pyx_L3_error)
    __pyx_v_h = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_h == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 302, __pyx_L3_error)
    __pyx_v_jitter = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_jitter == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 303, __pyx_L3_error)
    __pyx_v_midpoint = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_midpoint == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 303, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rect_noise", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 302, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rect_noise", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_44rect_noise(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_w, __pyx_v_h, __pyx_v_jitter, __pyx_v_midpoint);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_44rect_noise(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_w, int __pyx_v_h, double __pyx_v_jitter, double __pyx_v_midpoint) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("rect_noise", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_rect_noise(__pyx_v_self, __pyx_v_x, __pyx_v_y, __pyx_v_w, __pyx_v_h, __pyx_v_jitter, __pyx_v_midpoint, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rect_noise", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":309
 *                 self.set(xx,yy, midpoint + (random.random()*jitter -
 *                                          halfjitter))
 *     cpdef rect_color(self, int x, int y, int w, int h, int col):             # <<<<<<<<<<<<<<
 *         for xx in xrange(x, x+w):
 *             for yy in xrange(y, y+h):
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_47rect_color(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_rect_color(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_w, int __pyx_v_h, int __pyx_v_col, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_xx;
  int __pyx_v_yy;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("rect_color", 0);

  /* "pyspades/mapmaker.pyx":310
 *                                          halfjitter))
 *     cpdef rect_color(self, int x, int y, int w, int h, int col):
 *         for xx in xrange(x, x+w):             # <<<<<<<<<<<<<<
 *             for yy in xrange(y, y+h):
 *                 self.set_col_repeat(xx,yy,col)
 */
  __pyx_t_1 = (__pyx_v_x + __pyx_v_w);
  for (__pyx_t_2 = __pyx_v_x; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_xx = __pyx_t_2;

    /* "pyspades/mapmaker.pyx":311
 *     cpdef rect_color(self, int x, int y, int w, int h, int col):
 *         for xx in xrange(x, x+w):
 *             for yy in xrange(y, y+h):             # <<<<<<<<<<<<<<
 *                 self.set_col_repeat(xx,yy,col)
 *     cpdef truncate(self):
 */
    __pyx_t_3 = (__pyx_v_y + __pyx_v_h);
    for (__pyx_t_4 = __pyx_v_y; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_yy = __pyx_t_4;

      /* "pyspades/mapmaker.pyx":312
 *         for xx in xrange(x, x+w):
 *             for yy in xrange(y, y+h):
 *                 self.set_col_repeat(xx,yy,col)             # <<<<<<<<<<<<<<
 *     cpdef truncate(self):
 *         """Truncates the HeightMap to a valid (0-1) range.
 */
      __pyx_t_5 = __pyx_f_8pyspades_8mapmaker_9HeightMap_set_col_repeat(__pyx_v_self, __pyx_v_xx, __pyx_v_yy, __pyx_v_col, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 312, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }

  /* "pyspades/mapmaker.pyx":309
 *                 self.set(xx,yy, midpoint + (random.random()*jitter -
 *                                          halfjitter))
 *     cpdef rect_color(self, int x, int y, int w, int h, int col):             # <<<<<<<<<<<<<<
 *         for xx in xrange(x, x+w):
 *             for yy in xrange(y, y+h):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rect_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_47rect_color(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_47rect_color(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_w;
  int __pyx_v_h;
  int __pyx_v_col;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rect_color (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_w,&__pyx_n_s_h,&__pyx_n_s_col,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rect_color", 1, 5, 5, 1); __PYX_ERR(0, 309, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rect_color", 1, 5, 5, 2); __PYX_ERR(0, 309, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_h)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rect_color", 1, 5, 5, 3); __PYX_ERR(0, 309, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_col)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rect_color", 1, 5, 5, 4); __PYX_ERR(0, 309, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rect_color") < 0)) __PYX_ERR(0, 309, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_x = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 309, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 309, __pyx_L3_error)
    __pyx_v_w = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_w == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 309, __pyx_L3_error)
    __pyx_v_h = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_h == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 309, __pyx_L3_error)
    __pyx_v_col = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_col == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 309, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rect_color", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 309, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rect_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_46rect_color(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_w, __pyx_v_h, __pyx_v_col);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_46rect_color(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_w, int __pyx_v_h, int __pyx_v_col) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("rect_color", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_rect_color(__pyx_v_self, __pyx_v_x, __pyx_v_y, __pyx_v_w, __pyx_v_h, __pyx_v_col, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rect_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":313
 *             for yy in xrange(y, y+h):
 *                 self.set_col_repeat(xx,yy,col)
 *     cpdef truncate(self):             # <<<<<<<<<<<<<<
 *         """Truncates the HeightMap to a valid (0-1) range.
 *         Do this before painting or writing to voxels to avoid crashing."""
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_49truncate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_truncate(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  Py_ssize_t __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  double __pyx_t_4;
  double __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("truncate", 0);

  /* "pyspades/mapmaker.pyx":316
 *         """Truncates the HeightMap to a valid (0-1) range.
 *         Do this before painting or writing to voxels to avoid crashing."""
 *         for idx in xrange(0,len(self.hmap)):             # <<<<<<<<<<<<<<
 *             self.hmap[idx] = min(max(self.hmap[idx],0.0),1.0)
 *     cpdef offset_z(self, double qty):
 */
  __pyx_t_1 = __pyx_v_self->hmap;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_idx = __pyx_t_3;

    /* "pyspades/mapmaker.pyx":317
 *         Do this before painting or writing to voxels to avoid crashing."""
 *         for idx in xrange(0,len(self.hmap)):
 *             self.hmap[idx] = min(max(self.hmap[idx],0.0),1.0)             # <<<<<<<<<<<<<<
 *     cpdef offset_z(self, double qty):
 *         for idx in xrange(0,len(self.hmap)):
 */
    __pyx_t_4 = 1.0;
    __pyx_t_5 = 0.0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->hmap, __pyx_v_idx, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyObject_RichCompare(__pyx_t_7, __pyx_t_1, Py_GT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (__pyx_t_9) {
      __pyx_t_8 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = __pyx_t_8;
      __pyx_t_8 = 0;
    } else {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_6 = __pyx_t_1;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_t_6);
    __pyx_t_1 = __pyx_t_6;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_8 = PyFloat_FromDouble(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_8, __pyx_t_1, Py_LT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_9) {
      __pyx_t_7 = PyFloat_FromDouble(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 317, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = __pyx_t_7;
      __pyx_t_7 = 0;
    } else {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_6 = __pyx_t_1;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __pyx_t_6;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__Pyx_SetItemInt(__pyx_v_self->hmap, __pyx_v_idx, __pyx_t_1, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades/mapmaker.pyx":313
 *             for yy in xrange(y, y+h):
 *                 self.set_col_repeat(xx,yy,col)
 *     cpdef truncate(self):             # <<<<<<<<<<<<<<
 *         """Truncates the HeightMap to a valid (0-1) range.
 *         Do this before painting or writing to voxels to avoid crashing."""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.truncate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_49truncate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_48truncate[] = "Truncates the HeightMap to a valid (0-1) range.\n        Do this before painting or writing to voxels to avoid crashing.";
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_49truncate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("truncate (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_48truncate(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_48truncate(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("truncate", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_truncate(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.truncate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":318
 *         for idx in xrange(0,len(self.hmap)):
 *             self.hmap[idx] = min(max(self.hmap[idx],0.0),1.0)
 *     cpdef offset_z(self, double qty):             # <<<<<<<<<<<<<<
 *         for idx in xrange(0,len(self.hmap)):
 *             self.hmap[idx] = self.hmap[idx]+qty
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_51offset_z(PyObject *__pyx_v_self, PyObject *__pyx_arg_qty); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_offset_z(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_qty, CYTHON_UNUSED int __pyx_skip_dispatch) {
  Py_ssize_t __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("offset_z", 0);

  /* "pyspades/mapmaker.pyx":319
 *             self.hmap[idx] = min(max(self.hmap[idx],0.0),1.0)
 *     cpdef offset_z(self, double qty):
 *         for idx in xrange(0,len(self.hmap)):             # <<<<<<<<<<<<<<
 *             self.hmap[idx] = self.hmap[idx]+qty
 *     cpdef rescale_z(self, double multiple):
 */
  __pyx_t_1 = __pyx_v_self->hmap;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_idx = __pyx_t_3;

    /* "pyspades/mapmaker.pyx":320
 *     cpdef offset_z(self, double qty):
 *         for idx in xrange(0,len(self.hmap)):
 *             self.hmap[idx] = self.hmap[idx]+qty             # <<<<<<<<<<<<<<
 *     cpdef rescale_z(self, double multiple):
 *         for idx in xrange(0,len(self.hmap)):
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->hmap, __pyx_v_idx, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_qty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__Pyx_SetItemInt(__pyx_v_self->hmap, __pyx_v_idx, __pyx_t_5, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "pyspades/mapmaker.pyx":318
 *         for idx in xrange(0,len(self.hmap)):
 *             self.hmap[idx] = min(max(self.hmap[idx],0.0),1.0)
 *     cpdef offset_z(self, double qty):             # <<<<<<<<<<<<<<
 *         for idx in xrange(0,len(self.hmap)):
 *             self.hmap[idx] = self.hmap[idx]+qty
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.offset_z", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_51offset_z(PyObject *__pyx_v_self, PyObject *__pyx_arg_qty); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_51offset_z(PyObject *__pyx_v_self, PyObject *__pyx_arg_qty) {
  double __pyx_v_qty;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("offset_z (wrapper)", 0);
  assert(__pyx_arg_qty); {
    __pyx_v_qty = __pyx_PyFloat_AsDouble(__pyx_arg_qty); if (unlikely((__pyx_v_qty == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 318, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.offset_z", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_50offset_z(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), ((double)__pyx_v_qty));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_50offset_z(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_qty) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("offset_z", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_offset_z(__pyx_v_self, __pyx_v_qty, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.offset_z", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":321
 *         for idx in xrange(0,len(self.hmap)):
 *             self.hmap[idx] = self.hmap[idx]+qty
 *     cpdef rescale_z(self, double multiple):             # <<<<<<<<<<<<<<
 *         for idx in xrange(0,len(self.hmap)):
 *             self.hmap[idx] = self.hmap[idx]*multiple
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_53rescale_z(PyObject *__pyx_v_self, PyObject *__pyx_arg_multiple); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_rescale_z(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_multiple, CYTHON_UNUSED int __pyx_skip_dispatch) {
  Py_ssize_t __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("rescale_z", 0);

  /* "pyspades/mapmaker.pyx":322
 *             self.hmap[idx] = self.hmap[idx]+qty
 *     cpdef rescale_z(self, double multiple):
 *         for idx in xrange(0,len(self.hmap)):             # <<<<<<<<<<<<<<
 *             self.hmap[idx] = self.hmap[idx]*multiple
 *     cpdef paint_gradient_fill(self, gradient):
 */
  __pyx_t_1 = __pyx_v_self->hmap;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_idx = __pyx_t_3;

    /* "pyspades/mapmaker.pyx":323
 *     cpdef rescale_z(self, double multiple):
 *         for idx in xrange(0,len(self.hmap)):
 *             self.hmap[idx] = self.hmap[idx]*multiple             # <<<<<<<<<<<<<<
 *     cpdef paint_gradient_fill(self, gradient):
 *         """Surface the map with a single gradient."""
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->hmap, __pyx_v_idx, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_multiple); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__Pyx_SetItemInt(__pyx_v_self->hmap, __pyx_v_idx, __pyx_t_5, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "pyspades/mapmaker.pyx":321
 *         for idx in xrange(0,len(self.hmap)):
 *             self.hmap[idx] = self.hmap[idx]+qty
 *     cpdef rescale_z(self, double multiple):             # <<<<<<<<<<<<<<
 *         for idx in xrange(0,len(self.hmap)):
 *             self.hmap[idx] = self.hmap[idx]*multiple
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rescale_z", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_53rescale_z(PyObject *__pyx_v_self, PyObject *__pyx_arg_multiple); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_53rescale_z(PyObject *__pyx_v_self, PyObject *__pyx_arg_multiple) {
  double __pyx_v_multiple;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rescale_z (wrapper)", 0);
  assert(__pyx_arg_multiple); {
    __pyx_v_multiple = __pyx_PyFloat_AsDouble(__pyx_arg_multiple); if (unlikely((__pyx_v_multiple == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 321, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rescale_z", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_52rescale_z(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), ((double)__pyx_v_multiple));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_52rescale_z(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_multiple) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("rescale_z", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_rescale_z(__pyx_v_self, __pyx_v_multiple, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rescale_z", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":324
 *         for idx in xrange(0,len(self.hmap)):
 *             self.hmap[idx] = self.hmap[idx]*multiple
 *     cpdef paint_gradient_fill(self, gradient):             # <<<<<<<<<<<<<<
 *         """Surface the map with a single gradient."""
 *         cdef zcoldef = gradient.array()
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_55paint_gradient_fill(PyObject *__pyx_v_self, PyObject *__pyx_v_gradient); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_paint_gradient_fill(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, PyObject *__pyx_v_gradient, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_zcoldef = 0;
  int __pyx_v_idx;
  PyObject *__pyx_v_h = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("paint_gradient_fill", 0);

  /* "pyspades/mapmaker.pyx":326
 *     cpdef paint_gradient_fill(self, gradient):
 *         """Surface the map with a single gradient."""
 *         cdef zcoldef = gradient.array()             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx = 0
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_gradient, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 326, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 326, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_zcoldef = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":328
 *         cdef zcoldef = gradient.array()
 * 
 *         cdef int idx = 0             # <<<<<<<<<<<<<<
 * 
 *         while idx<len(self.hmap):
 */
  __pyx_v_idx = 0;

  /* "pyspades/mapmaker.pyx":330
 *         cdef int idx = 0
 * 
 *         while idx<len(self.hmap):             # <<<<<<<<<<<<<<
 *             h = int(self.hmap[idx] * 63)
 *             self.cmap[idx] = paint_gradient(zcoldef,h)
 */
  while (1) {
    __pyx_t_1 = __pyx_v_self->hmap;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_4 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = ((__pyx_v_idx < __pyx_t_4) != 0);
    if (!__pyx_t_5) break;

    /* "pyspades/mapmaker.pyx":331
 * 
 *         while idx<len(self.hmap):
 *             h = int(self.hmap[idx] * 63)             # <<<<<<<<<<<<<<
 *             self.cmap[idx] = paint_gradient(zcoldef,h)
 *             idx+=1
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->hmap, __pyx_v_idx, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_int_63); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_h, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":332
 *         while idx<len(self.hmap):
 *             h = int(self.hmap[idx] * 63)
 *             self.cmap[idx] = paint_gradient(zcoldef,h)             # <<<<<<<<<<<<<<
 *             idx+=1
 *     cpdef rewrite_gradient_fill(self, list gradients):
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_h); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 332, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_8pyspades_8mapmaker_paint_gradient(__pyx_v_zcoldef, __pyx_t_6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_self->cmap, __pyx_v_idx, __pyx_t_1, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 332, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":333
 *             h = int(self.hmap[idx] * 63)
 *             self.cmap[idx] = paint_gradient(zcoldef,h)
 *             idx+=1             # <<<<<<<<<<<<<<
 *     cpdef rewrite_gradient_fill(self, list gradients):
 *         """Given a cmap of int-indexed gradient definitions,
 */
    __pyx_v_idx = (__pyx_v_idx + 1);
  }

  /* "pyspades/mapmaker.pyx":324
 *         for idx in xrange(0,len(self.hmap)):
 *             self.hmap[idx] = self.hmap[idx]*multiple
 *     cpdef paint_gradient_fill(self, gradient):             # <<<<<<<<<<<<<<
 *         """Surface the map with a single gradient."""
 *         cdef zcoldef = gradient.array()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.paint_gradient_fill", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_zcoldef);
  __Pyx_XDECREF(__pyx_v_h);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_55paint_gradient_fill(PyObject *__pyx_v_self, PyObject *__pyx_v_gradient); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_54paint_gradient_fill[] = "Surface the map with a single gradient.";
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_55paint_gradient_fill(PyObject *__pyx_v_self, PyObject *__pyx_v_gradient) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("paint_gradient_fill (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_54paint_gradient_fill(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), ((PyObject *)__pyx_v_gradient));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_54paint_gradient_fill(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, PyObject *__pyx_v_gradient) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("paint_gradient_fill", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_paint_gradient_fill(__pyx_v_self, __pyx_v_gradient, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.paint_gradient_fill", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":334
 *             self.cmap[idx] = paint_gradient(zcoldef,h)
 *             idx+=1
 *     cpdef rewrite_gradient_fill(self, list gradients):             # <<<<<<<<<<<<<<
 *         """Given a cmap of int-indexed gradient definitions,
 *         rewrite them as surface color definitions."""
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_57rewrite_gradient_fill(PyObject *__pyx_v_self, PyObject *__pyx_v_gradients); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_rewrite_gradient_fill(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, PyObject *__pyx_v_gradients, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_zcoldefs = 0;
  PyObject *__pyx_v_n = NULL;
  int __pyx_v_idx;
  PyObject *__pyx_v_h = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("rewrite_gradient_fill", 0);

  /* "pyspades/mapmaker.pyx":338
 *         rewrite them as surface color definitions."""
 * 
 *         cdef zcoldefs = []             # <<<<<<<<<<<<<<
 *         for n in gradients:
 *             zcoldefs.append(n.array())
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_zcoldefs = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":339
 * 
 *         cdef zcoldefs = []
 *         for n in gradients:             # <<<<<<<<<<<<<<
 *             zcoldefs.append(n.array())
 * 
 */
  if (unlikely(__pyx_v_gradients == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 339, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_gradients; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 339, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyspades/mapmaker.pyx":340
 *         cdef zcoldefs = []
 *         for n in gradients:
 *             zcoldefs.append(n.array())             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx = 0
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_n, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 340, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 340, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_zcoldefs, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyspades/mapmaker.pyx":339
 * 
 *         cdef zcoldefs = []
 *         for n in gradients:             # <<<<<<<<<<<<<<
 *             zcoldefs.append(n.array())
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":342
 *             zcoldefs.append(n.array())
 * 
 *         cdef int idx = 0             # <<<<<<<<<<<<<<
 * 
 *         while idx<len(self.hmap):
 */
  __pyx_v_idx = 0;

  /* "pyspades/mapmaker.pyx":344
 *         cdef int idx = 0
 * 
 *         while idx<len(self.hmap):             # <<<<<<<<<<<<<<
 *             h = int(self.hmap[idx] * 63)
 *             self.cmap[idx] = paint_gradient(zcoldefs[self.cmap[idx]],h)
 */
  while (1) {
    __pyx_t_1 = __pyx_v_self->hmap;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = ((__pyx_v_idx < __pyx_t_2) != 0);
    if (!__pyx_t_7) break;

    /* "pyspades/mapmaker.pyx":345
 * 
 *         while idx<len(self.hmap):
 *             h = int(self.hmap[idx] * 63)             # <<<<<<<<<<<<<<
 *             self.cmap[idx] = paint_gradient(zcoldefs[self.cmap[idx]],h)
 *             idx+=1
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->hmap, __pyx_v_idx, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_int_63); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_h, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":346
 *         while idx<len(self.hmap):
 *             h = int(self.hmap[idx] * 63)
 *             self.cmap[idx] = paint_gradient(zcoldefs[self.cmap[idx]],h)             # <<<<<<<<<<<<<<
 *             idx+=1
 *     cpdef rgb_noise_colors(self, low, high):
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->cmap, __pyx_v_idx, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_GetItem(__pyx_v_zcoldefs, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_h); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 346, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_8pyspades_8mapmaker_paint_gradient(__pyx_t_3, __pyx_t_8)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__Pyx_SetItemInt(__pyx_v_self->cmap, __pyx_v_idx, __pyx_t_1, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 346, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":347
 *             h = int(self.hmap[idx] * 63)
 *             self.cmap[idx] = paint_gradient(zcoldefs[self.cmap[idx]],h)
 *             idx+=1             # <<<<<<<<<<<<<<
 *     cpdef rgb_noise_colors(self, low, high):
 *         """Add noise to the heightmap colors."""
 */
    __pyx_v_idx = (__pyx_v_idx + 1);
  }

  /* "pyspades/mapmaker.pyx":334
 *             self.cmap[idx] = paint_gradient(zcoldef,h)
 *             idx+=1
 *     cpdef rewrite_gradient_fill(self, list gradients):             # <<<<<<<<<<<<<<
 *         """Given a cmap of int-indexed gradient definitions,
 *         rewrite them as surface color definitions."""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rewrite_gradient_fill", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_zcoldefs);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_h);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_57rewrite_gradient_fill(PyObject *__pyx_v_self, PyObject *__pyx_v_gradients); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_56rewrite_gradient_fill[] = "Given a cmap of int-indexed gradient definitions,\n        rewrite them as surface color definitions.";
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_57rewrite_gradient_fill(PyObject *__pyx_v_self, PyObject *__pyx_v_gradients) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rewrite_gradient_fill (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gradients), (&PyList_Type), 1, "gradients", 1))) __PYX_ERR(0, 334, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_56rewrite_gradient_fill(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), ((PyObject*)__pyx_v_gradients));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_56rewrite_gradient_fill(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, PyObject *__pyx_v_gradients) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("rewrite_gradient_fill", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_rewrite_gradient_fill(__pyx_v_self, __pyx_v_gradients, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rewrite_gradient_fill", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":348
 *             self.cmap[idx] = paint_gradient(zcoldefs[self.cmap[idx]],h)
 *             idx+=1
 *     cpdef rgb_noise_colors(self, low, high):             # <<<<<<<<<<<<<<
 *         """Add noise to the heightmap colors."""
 *         cdef int idx = 0
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_59rgb_noise_colors(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_rgb_noise_colors(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, PyObject *__pyx_v_low, PyObject *__pyx_v_high, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_idx;
  PyObject *__pyx_v_patterns = NULL;
  PyObject *__pyx_v_mid = NULL;
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_v_g = NULL;
  PyObject *__pyx_v_b = NULL;
  CYTHON_UNUSED long __pyx_v_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  __Pyx_RefNannySetupContext("rgb_noise_colors", 0);

  /* "pyspades/mapmaker.pyx":350
 *     cpdef rgb_noise_colors(self, low, high):
 *         """Add noise to the heightmap colors."""
 *         cdef int idx = 0             # <<<<<<<<<<<<<<
 * 
 *         patterns = array.array('i', [random.randint(low,high) for n in xrange(101)])
 */
  __pyx_v_idx = 0;

  /* "pyspades/mapmaker.pyx":352
 *         cdef int idx = 0
 * 
 *         patterns = array.array('i', [random.randint(low,high) for n in xrange(101)])             # <<<<<<<<<<<<<<
 * 
 *         while idx<len(self.hmap):
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  for (__pyx_t_4 = 0; __pyx_t_4 < 0x65; __pyx_t_4+=1) {
    __pyx_v_n = __pyx_t_4;
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_random); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_randint); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_8 = 1;
      }
    }
    __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(__pyx_v_low);
    __Pyx_GIVEREF(__pyx_v_low);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_v_low);
    __Pyx_INCREF(__pyx_v_high);
    __Pyx_GIVEREF(__pyx_v_high);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_high);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_8 = 1;
    }
  }
  __pyx_t_7 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__pyx_t_5) {
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
  }
  __Pyx_INCREF(__pyx_n_s_i);
  __Pyx_GIVEREF(__pyx_n_s_i);
  PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_8, __pyx_n_s_i);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_8, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_patterns = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":354
 *         patterns = array.array('i', [random.randint(low,high) for n in xrange(101)])
 * 
 *         while idx<len(self.hmap):             # <<<<<<<<<<<<<<
 *             mid = self.cmap[idx]
 * 
 */
  while (1) {
    __pyx_t_1 = __pyx_v_self->hmap;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_8 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = ((__pyx_v_idx < __pyx_t_8) != 0);
    if (!__pyx_t_10) break;

    /* "pyspades/mapmaker.pyx":355
 * 
 *         while idx<len(self.hmap):
 *             mid = self.cmap[idx]             # <<<<<<<<<<<<<<
 * 
 *             r = max(0, min(0xFF,get_r(mid)+patterns[idx%len(patterns)]))
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->cmap, __pyx_v_idx, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_mid, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":357
 *             mid = self.cmap[idx]
 * 
 *             r = max(0, min(0xFF,get_r(mid)+patterns[idx%len(patterns)]))             # <<<<<<<<<<<<<<
 *             g = max(0, min(0xFF,get_g(mid)+patterns[(idx+1)%len(patterns)]))
 *             b = max(0, min(0xFF,get_b(mid)+patterns[(idx+2)%len(patterns)]))
 */
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_mid); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 357, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_8pyspades_8mapmaker_get_r(__pyx_t_11, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = PyObject_Length(__pyx_v_patterns); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 357, __pyx_L1_error)
    if (unlikely(__pyx_t_8 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 357, __pyx_L1_error)
    }
    __pyx_t_12 = __Pyx_mod_Py_ssize_t(__pyx_v_idx, __pyx_t_8);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_patterns, __pyx_t_12, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = PyNumber_Add(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = 0xFF;
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_7, __pyx_t_1, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_10) {
      __Pyx_INCREF(__pyx_t_7);
      __pyx_t_3 = __pyx_t_7;
    } else {
      __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 357, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __pyx_t_2;
      __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_7 = __pyx_t_3;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_7, __pyx_t_2, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_10) {
      __Pyx_INCREF(__pyx_t_7);
      __pyx_t_3 = __pyx_t_7;
    } else {
      __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1;
      __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __pyx_t_3;
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_r, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "pyspades/mapmaker.pyx":358
 * 
 *             r = max(0, min(0xFF,get_r(mid)+patterns[idx%len(patterns)]))
 *             g = max(0, min(0xFF,get_g(mid)+patterns[(idx+1)%len(patterns)]))             # <<<<<<<<<<<<<<
 *             b = max(0, min(0xFF,get_b(mid)+patterns[(idx+2)%len(patterns)]))
 * 
 */
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_mid); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 358, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_f_8pyspades_8mapmaker_get_g(__pyx_t_11, 0)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = (__pyx_v_idx + 1);
    __pyx_t_12 = PyObject_Length(__pyx_v_patterns); if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 358, __pyx_L1_error)
    if (unlikely(__pyx_t_12 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 358, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_mod_Py_ssize_t(__pyx_t_4, __pyx_t_12);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_patterns, __pyx_t_8, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyNumber_Add(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = 0xFF;
    __pyx_t_7 = __Pyx_PyInt_From_long(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_7, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_10) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1;
    } else {
      __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 358, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __pyx_t_2;
      __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_GT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_10) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1;
    } else {
      __pyx_t_7 = __Pyx_PyInt_From_long(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 358, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = __pyx_t_7;
      __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __pyx_t_3;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_g, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":359
 *             r = max(0, min(0xFF,get_r(mid)+patterns[idx%len(patterns)]))
 *             g = max(0, min(0xFF,get_g(mid)+patterns[(idx+1)%len(patterns)]))
 *             b = max(0, min(0xFF,get_b(mid)+patterns[(idx+2)%len(patterns)]))             # <<<<<<<<<<<<<<
 * 
 *             self.cmap[idx] = make_color(r,g,b)
 */
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_mid); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 359, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_8pyspades_8mapmaker_get_b(__pyx_t_11, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = (__pyx_v_idx + 2);
    __pyx_t_8 = PyObject_Length(__pyx_v_patterns); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 359, __pyx_L1_error)
    if (unlikely(__pyx_t_8 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 359, __pyx_L1_error)
    }
    __pyx_t_12 = __Pyx_mod_Py_ssize_t(__pyx_t_4, __pyx_t_8);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_patterns, __pyx_t_12, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = PyNumber_Add(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = 0xFF;
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_7, __pyx_t_1, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_10) {
      __Pyx_INCREF(__pyx_t_7);
      __pyx_t_3 = __pyx_t_7;
    } else {
      __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 359, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __pyx_t_2;
      __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_7 = __pyx_t_3;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_7, __pyx_t_2, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_10) {
      __Pyx_INCREF(__pyx_t_7);
      __pyx_t_3 = __pyx_t_7;
    } else {
      __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1;
      __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __pyx_t_3;
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "pyspades/mapmaker.pyx":361
 *             b = max(0, min(0xFF,get_b(mid)+patterns[(idx+2)%len(patterns)]))
 * 
 *             self.cmap[idx] = make_color(r,g,b)             # <<<<<<<<<<<<<<
 * 
 *             idx+=1
 */
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_r); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 361, __pyx_L1_error)
    __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_v_g); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 361, __pyx_L1_error)
    __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_v_b); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 361, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_f_8pyspades_8mapmaker_make_color(__pyx_t_11, __pyx_t_13, __pyx_t_14, 0)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_self->cmap, __pyx_v_idx, __pyx_t_7, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pyspades/mapmaker.pyx":363
 *             self.cmap[idx] = make_color(r,g,b)
 * 
 *             idx+=1             # <<<<<<<<<<<<<<
 * 
 *     cpdef smooth_colors(self):
 */
    __pyx_v_idx = (__pyx_v_idx + 1);
  }

  /* "pyspades/mapmaker.pyx":348
 *             self.cmap[idx] = paint_gradient(zcoldefs[self.cmap[idx]],h)
 *             idx+=1
 *     cpdef rgb_noise_colors(self, low, high):             # <<<<<<<<<<<<<<
 *         """Add noise to the heightmap colors."""
 *         cdef int idx = 0
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rgb_noise_colors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_patterns);
  __Pyx_XDECREF(__pyx_v_mid);
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XDECREF(__pyx_v_g);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_59rgb_noise_colors(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_58rgb_noise_colors[] = "Add noise to the heightmap colors.";
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_59rgb_noise_colors(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_low = 0;
  PyObject *__pyx_v_high = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rgb_noise_colors (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_low,&__pyx_n_s_high,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_low)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_high)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rgb_noise_colors", 1, 2, 2, 1); __PYX_ERR(0, 348, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rgb_noise_colors") < 0)) __PYX_ERR(0, 348, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_low = values[0];
    __pyx_v_high = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rgb_noise_colors", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 348, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rgb_noise_colors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_58rgb_noise_colors(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_low, __pyx_v_high);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_58rgb_noise_colors(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, PyObject *__pyx_v_low, PyObject *__pyx_v_high) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("rgb_noise_colors", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_rgb_noise_colors(__pyx_v_self, __pyx_v_low, __pyx_v_high, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rgb_noise_colors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":365
 *             idx+=1
 * 
 *     cpdef smooth_colors(self):             # <<<<<<<<<<<<<<
 *         """Average the color of each pixel to add smoothness."""
 *         cdef int x = 0
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_61smooth_colors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_smooth_colors(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_x;
  int __pyx_v_y;
  PyObject *__pyx_v_copy = NULL;
  PyObject *__pyx_v_swap = NULL;
  PyObject *__pyx_v_left = NULL;
  PyObject *__pyx_v_right = NULL;
  PyObject *__pyx_v_up = NULL;
  PyObject *__pyx_v_down = NULL;
  PyObject *__pyx_v_mid = NULL;
  long __pyx_v_r;
  long __pyx_v_g;
  long __pyx_v_b;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  long __pyx_t_6;
  long __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  __Pyx_RefNannySetupContext("smooth_colors", 0);

  /* "pyspades/mapmaker.pyx":367
 *     cpdef smooth_colors(self):
 *         """Average the color of each pixel to add smoothness."""
 *         cdef int x = 0             # <<<<<<<<<<<<<<
 *         cdef int y = 0
 * 
 */
  __pyx_v_x = 0;

  /* "pyspades/mapmaker.pyx":368
 *         """Average the color of each pixel to add smoothness."""
 *         cdef int x = 0
 *         cdef int y = 0             # <<<<<<<<<<<<<<
 * 
 *         import copy
 */
  __pyx_v_y = 0;

  /* "pyspades/mapmaker.pyx":370
 *         cdef int y = 0
 * 
 *         import copy             # <<<<<<<<<<<<<<
 * 
 *         swap = copy.deepcopy(self.cmap)
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_copy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_copy = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":372
 *         import copy
 * 
 *         swap = copy.deepcopy(self.cmap)             # <<<<<<<<<<<<<<
 * 
 *         while y<self.height:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_copy, __pyx_n_s_deepcopy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_self->cmap); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 372, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 372, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_v_self->cmap);
    __Pyx_GIVEREF(__pyx_v_self->cmap);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_self->cmap);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 372, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_swap = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":374
 *         swap = copy.deepcopy(self.cmap)
 * 
 *         while y<self.height:             # <<<<<<<<<<<<<<
 *             left = swap[((x-1)%self.width)+(y%self.height)*self.width]
 *             right = swap[((x+1)%self.width)+(y%self.height)*self.width]
 */
  while (1) {
    __pyx_t_5 = ((__pyx_v_y < __pyx_v_self->height) != 0);
    if (!__pyx_t_5) break;

    /* "pyspades/mapmaker.pyx":375
 * 
 *         while y<self.height:
 *             left = swap[((x-1)%self.width)+(y%self.height)*self.width]             # <<<<<<<<<<<<<<
 *             right = swap[((x+1)%self.width)+(y%self.height)*self.width]
 *             up = swap[((x)%self.width)+((y-1)%self.height)*self.width]
 */
    __pyx_t_6 = (__pyx_v_x - 1);
    if (unlikely(__pyx_v_self->width == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 375, __pyx_L1_error)
    }
    if (unlikely(__pyx_v_self->height == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 375, __pyx_L1_error)
    }
    __pyx_t_7 = (__Pyx_mod_long(__pyx_t_6, __pyx_v_self->width) + (__Pyx_mod_int(__pyx_v_y, __pyx_v_self->height) * __pyx_v_self->width));
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_swap, __pyx_t_7, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_left, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":376
 *         while y<self.height:
 *             left = swap[((x-1)%self.width)+(y%self.height)*self.width]
 *             right = swap[((x+1)%self.width)+(y%self.height)*self.width]             # <<<<<<<<<<<<<<
 *             up = swap[((x)%self.width)+((y-1)%self.height)*self.width]
 *             down = swap[((x)%self.width)+((y+1)%self.height)*self.width]
 */
    __pyx_t_7 = (__pyx_v_x + 1);
    if (unlikely(__pyx_v_self->width == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 376, __pyx_L1_error)
    }
    if (unlikely(__pyx_v_self->height == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 376, __pyx_L1_error)
    }
    __pyx_t_6 = (__Pyx_mod_long(__pyx_t_7, __pyx_v_self->width) + (__Pyx_mod_int(__pyx_v_y, __pyx_v_self->height) * __pyx_v_self->width));
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_swap, __pyx_t_6, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_right, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":377
 *             left = swap[((x-1)%self.width)+(y%self.height)*self.width]
 *             right = swap[((x+1)%self.width)+(y%self.height)*self.width]
 *             up = swap[((x)%self.width)+((y-1)%self.height)*self.width]             # <<<<<<<<<<<<<<
 *             down = swap[((x)%self.width)+((y+1)%self.height)*self.width]
 *             mid = swap[((x)%self.width)+((y)%self.height)*self.width]
 */
    if (unlikely(__pyx_v_self->width == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 377, __pyx_L1_error)
    }
    __pyx_t_6 = (__pyx_v_y - 1);
    if (unlikely(__pyx_v_self->height == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 377, __pyx_L1_error)
    }
    __pyx_t_7 = (__Pyx_mod_int(__pyx_v_x, __pyx_v_self->width) + (__Pyx_mod_long(__pyx_t_6, __pyx_v_self->height) * __pyx_v_self->width));
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_swap, __pyx_t_7, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 377, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_up, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":378
 *             right = swap[((x+1)%self.width)+(y%self.height)*self.width]
 *             up = swap[((x)%self.width)+((y-1)%self.height)*self.width]
 *             down = swap[((x)%self.width)+((y+1)%self.height)*self.width]             # <<<<<<<<<<<<<<
 *             mid = swap[((x)%self.width)+((y)%self.height)*self.width]
 * 
 */
    if (unlikely(__pyx_v_self->width == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 378, __pyx_L1_error)
    }
    __pyx_t_7 = (__pyx_v_y + 1);
    if (unlikely(__pyx_v_self->height == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 378, __pyx_L1_error)
    }
    __pyx_t_6 = (__Pyx_mod_int(__pyx_v_x, __pyx_v_self->width) + (__Pyx_mod_long(__pyx_t_7, __pyx_v_self->height) * __pyx_v_self->width));
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_swap, __pyx_t_6, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_down, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":379
 *             up = swap[((x)%self.width)+((y-1)%self.height)*self.width]
 *             down = swap[((x)%self.width)+((y+1)%self.height)*self.width]
 *             mid = swap[((x)%self.width)+((y)%self.height)*self.width]             # <<<<<<<<<<<<<<
 * 
 *             r = (get_r(left) + get_r(right) + get_r(up) + get_r(down) + get_r(mid))/5
 */
    if (unlikely(__pyx_v_self->width == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 379, __pyx_L1_error)
    }
    if (unlikely(__pyx_v_self->height == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 379, __pyx_L1_error)
    }
    __pyx_t_8 = (__Pyx_mod_int(__pyx_v_x, __pyx_v_self->width) + (__Pyx_mod_int(__pyx_v_y, __pyx_v_self->height) * __pyx_v_self->width));
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_swap, __pyx_t_8, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_mid, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":381
 *             mid = swap[((x)%self.width)+((y)%self.height)*self.width]
 * 
 *             r = (get_r(left) + get_r(right) + get_r(up) + get_r(down) + get_r(mid))/5             # <<<<<<<<<<<<<<
 *             g = (get_g(left) + get_g(right) + get_g(up) + get_g(down) + get_g(mid))/5
 *             b = (get_b(left) + get_b(right) + get_b(up) + get_b(down) + get_b(mid))/5
 */
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_left); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 381, __pyx_L1_error)
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_right); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 381, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_up); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 381, __pyx_L1_error)
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_down); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 381, __pyx_L1_error)
    __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_mid); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 381, __pyx_L1_error)
    __pyx_v_r = __Pyx_div_long(((((__pyx_f_8pyspades_8mapmaker_get_r(__pyx_t_8, 0) + __pyx_f_8pyspades_8mapmaker_get_r(__pyx_t_9, 0)) + __pyx_f_8pyspades_8mapmaker_get_r(__pyx_t_10, 0)) + __pyx_f_8pyspades_8mapmaker_get_r(__pyx_t_11, 0)) + __pyx_f_8pyspades_8mapmaker_get_r(__pyx_t_12, 0)), 5);

    /* "pyspades/mapmaker.pyx":382
 * 
 *             r = (get_r(left) + get_r(right) + get_r(up) + get_r(down) + get_r(mid))/5
 *             g = (get_g(left) + get_g(right) + get_g(up) + get_g(down) + get_g(mid))/5             # <<<<<<<<<<<<<<
 *             b = (get_b(left) + get_b(right) + get_b(up) + get_b(down) + get_b(mid))/5
 * 
 */
    __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_left); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 382, __pyx_L1_error)
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_right); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 382, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_up); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 382, __pyx_L1_error)
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_down); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 382, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_mid); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 382, __pyx_L1_error)
    __pyx_v_g = __Pyx_div_long(((((__pyx_f_8pyspades_8mapmaker_get_g(__pyx_t_12, 0) + __pyx_f_8pyspades_8mapmaker_get_g(__pyx_t_11, 0)) + __pyx_f_8pyspades_8mapmaker_get_g(__pyx_t_10, 0)) + __pyx_f_8pyspades_8mapmaker_get_g(__pyx_t_9, 0)) + __pyx_f_8pyspades_8mapmaker_get_g(__pyx_t_8, 0)), 5);

    /* "pyspades/mapmaker.pyx":383
 *             r = (get_r(left) + get_r(right) + get_r(up) + get_r(down) + get_r(mid))/5
 *             g = (get_g(left) + get_g(right) + get_g(up) + get_g(down) + get_g(mid))/5
 *             b = (get_b(left) + get_b(right) + get_b(up) + get_b(down) + get_b(mid))/5             # <<<<<<<<<<<<<<
 * 
 *             self.set_col_repeat(x,y,make_color(r,g,b))
 */
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_left); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 383, __pyx_L1_error)
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_right); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 383, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_up); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 383, __pyx_L1_error)
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_down); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 383, __pyx_L1_error)
    __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_mid); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 383, __pyx_L1_error)
    __pyx_v_b = __Pyx_div_long(((((__pyx_f_8pyspades_8mapmaker_get_b(__pyx_t_8, 0) + __pyx_f_8pyspades_8mapmaker_get_b(__pyx_t_9, 0)) + __pyx_f_8pyspades_8mapmaker_get_b(__pyx_t_10, 0)) + __pyx_f_8pyspades_8mapmaker_get_b(__pyx_t_11, 0)) + __pyx_f_8pyspades_8mapmaker_get_b(__pyx_t_12, 0)), 5);

    /* "pyspades/mapmaker.pyx":385
 *             b = (get_b(left) + get_b(right) + get_b(up) + get_b(down) + get_b(mid))/5
 * 
 *             self.set_col_repeat(x,y,make_color(r,g,b))             # <<<<<<<<<<<<<<
 * 
 *             x += 1
 */
    __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_set_col_repeat(__pyx_v_self, __pyx_v_x, __pyx_v_y, __pyx_f_8pyspades_8mapmaker_make_color(__pyx_v_r, __pyx_v_g, __pyx_v_b, 0), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":387
 *             self.set_col_repeat(x,y,make_color(r,g,b))
 * 
 *             x += 1             # <<<<<<<<<<<<<<
 *             if x>=self.width:
 *                 x = 0
 */
    __pyx_v_x = (__pyx_v_x + 1);

    /* "pyspades/mapmaker.pyx":388
 * 
 *             x += 1
 *             if x>=self.width:             # <<<<<<<<<<<<<<
 *                 x = 0
 *                 y += 1
 */
    __pyx_t_5 = ((__pyx_v_x >= __pyx_v_self->width) != 0);
    if (__pyx_t_5) {

      /* "pyspades/mapmaker.pyx":389
 *             x += 1
 *             if x>=self.width:
 *                 x = 0             # <<<<<<<<<<<<<<
 *                 y += 1
 * 
 */
      __pyx_v_x = 0;

      /* "pyspades/mapmaker.pyx":390
 *             if x>=self.width:
 *                 x = 0
 *                 y += 1             # <<<<<<<<<<<<<<
 * 
 *     cpdef write_vxl(self):
 */
      __pyx_v_y = (__pyx_v_y + 1);

      /* "pyspades/mapmaker.pyx":388
 * 
 *             x += 1
 *             if x>=self.width:             # <<<<<<<<<<<<<<
 *                 x = 0
 *                 y += 1
 */
    }
  }

  /* "pyspades/mapmaker.pyx":365
 *             idx+=1
 * 
 *     cpdef smooth_colors(self):             # <<<<<<<<<<<<<<
 *         """Average the color of each pixel to add smoothness."""
 *         cdef int x = 0
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.smooth_colors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_copy);
  __Pyx_XDECREF(__pyx_v_swap);
  __Pyx_XDECREF(__pyx_v_left);
  __Pyx_XDECREF(__pyx_v_right);
  __Pyx_XDECREF(__pyx_v_up);
  __Pyx_XDECREF(__pyx_v_down);
  __Pyx_XDECREF(__pyx_v_mid);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_61smooth_colors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_60smooth_colors[] = "Average the color of each pixel to add smoothness.";
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_61smooth_colors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("smooth_colors (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_60smooth_colors(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_60smooth_colors(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("smooth_colors", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_smooth_colors(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.smooth_colors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":392
 *                 y += 1
 * 
 *     cpdef write_vxl(self):             # <<<<<<<<<<<<<<
 *         cdef VXLData vxl = VXLData()
 * 
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_63write_vxl(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_write_vxl(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct __pyx_obj_8pyspades_3vxl_VXLData *__pyx_v_vxl = 0;
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_h;
  CYTHON_UNUSED int __pyx_v_z;
  int __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  long __pyx_t_6;
  long __pyx_t_7;
  long __pyx_t_8;
  __Pyx_RefNannySetupContext("write_vxl", 0);

  /* "pyspades/mapmaker.pyx":393
 * 
 *     cpdef write_vxl(self):
 *         cdef VXLData vxl = VXLData()             # <<<<<<<<<<<<<<
 * 
 *         cdef int x = 0
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8pyspades_3vxl_VXLData), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_vxl = ((struct __pyx_obj_8pyspades_3vxl_VXLData *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":395
 *         cdef VXLData vxl = VXLData()
 * 
 *         cdef int x = 0             # <<<<<<<<<<<<<<
 *         cdef int y = 0
 *         cdef int h = 0
 */
  __pyx_v_x = 0;

  /* "pyspades/mapmaker.pyx":396
 * 
 *         cdef int x = 0
 *         cdef int y = 0             # <<<<<<<<<<<<<<
 *         cdef int h = 0
 *         cdef int z = 0
 */
  __pyx_v_y = 0;

  /* "pyspades/mapmaker.pyx":397
 *         cdef int x = 0
 *         cdef int y = 0
 *         cdef int h = 0             # <<<<<<<<<<<<<<
 *         cdef int z = 0
 *         cdef int idx = 0
 */
  __pyx_v_h = 0;

  /* "pyspades/mapmaker.pyx":398
 *         cdef int y = 0
 *         cdef int h = 0
 *         cdef int z = 0             # <<<<<<<<<<<<<<
 *         cdef int idx = 0
 * 
 */
  __pyx_v_z = 0;

  /* "pyspades/mapmaker.pyx":399
 *         cdef int h = 0
 *         cdef int z = 0
 *         cdef int idx = 0             # <<<<<<<<<<<<<<
 * 
 *         while idx<len(self.hmap):
 */
  __pyx_v_idx = 0;

  /* "pyspades/mapmaker.pyx":401
 *         cdef int idx = 0
 * 
 *         while idx<len(self.hmap):             # <<<<<<<<<<<<<<
 *             x = idx % self.width
 *             y = idx // self.height
 */
  while (1) {
    __pyx_t_1 = __pyx_v_self->hmap;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 401, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = ((__pyx_v_idx < __pyx_t_2) != 0);
    if (!__pyx_t_3) break;

    /* "pyspades/mapmaker.pyx":402
 * 
 *         while idx<len(self.hmap):
 *             x = idx % self.width             # <<<<<<<<<<<<<<
 *             y = idx // self.height
 *             h = int(self.hmap[idx] * 63)
 */
    if (unlikely(__pyx_v_self->width == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 402, __pyx_L1_error)
    }
    __pyx_v_x = __Pyx_mod_int(__pyx_v_idx, __pyx_v_self->width);

    /* "pyspades/mapmaker.pyx":403
 *         while idx<len(self.hmap):
 *             x = idx % self.width
 *             y = idx // self.height             # <<<<<<<<<<<<<<
 *             h = int(self.hmap[idx] * 63)
 *             vxl.set_column_fast(x, y, h, 63, int(min(63,h+3)),
 */
    if (unlikely(__pyx_v_self->height == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 403, __pyx_L1_error)
    }
    else if (sizeof(int) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_self->height == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_idx))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      __PYX_ERR(0, 403, __pyx_L1_error)
    }
    __pyx_v_y = __Pyx_div_int(__pyx_v_idx, __pyx_v_self->height);

    /* "pyspades/mapmaker.pyx":404
 *             x = idx % self.width
 *             y = idx // self.height
 *             h = int(self.hmap[idx] * 63)             # <<<<<<<<<<<<<<
 *             vxl.set_column_fast(x, y, h, 63, int(min(63,h+3)),
 *                                 self.cmap[idx])
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->hmap, __pyx_v_idx, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyNumber_Multiply(__pyx_t_1, __pyx_int_63); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_h = __pyx_t_5;

    /* "pyspades/mapmaker.pyx":405
 *             y = idx // self.height
 *             h = int(self.hmap[idx] * 63)
 *             vxl.set_column_fast(x, y, h, 63, int(min(63,h+3)),             # <<<<<<<<<<<<<<
 *                                 self.cmap[idx])
 *             idx+=1
 */
    __pyx_t_6 = (__pyx_v_h + 3);
    __pyx_t_7 = 63;
    if (((__pyx_t_6 < __pyx_t_7) != 0)) {
      __pyx_t_8 = __pyx_t_6;
    } else {
      __pyx_t_8 = __pyx_t_7;
    }

    /* "pyspades/mapmaker.pyx":406
 *             h = int(self.hmap[idx] * 63)
 *             vxl.set_column_fast(x, y, h, 63, int(min(63,h+3)),
 *                                 self.cmap[idx])             # <<<<<<<<<<<<<<
 *             idx+=1
 *         return vxl
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->cmap, __pyx_v_idx, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":405
 *             y = idx // self.height
 *             h = int(self.hmap[idx] * 63)
 *             vxl.set_column_fast(x, y, h, 63, int(min(63,h+3)),             # <<<<<<<<<<<<<<
 *                                 self.cmap[idx])
 *             idx+=1
 */
    ((struct __pyx_vtabstruct_8pyspades_3vxl_VXLData *)__pyx_v_vxl->__pyx_vtab)->set_column_fast(__pyx_v_vxl, __pyx_v_x, __pyx_v_y, __pyx_v_h, 63, ((int)__pyx_t_8), __pyx_t_5, 0);

    /* "pyspades/mapmaker.pyx":407
 *             vxl.set_column_fast(x, y, h, 63, int(min(63,h+3)),
 *                                 self.cmap[idx])
 *             idx+=1             # <<<<<<<<<<<<<<
 *         return vxl
 *     cpdef line_add(self,int x,int y,
 */
    __pyx_v_idx = (__pyx_v_idx + 1);
  }

  /* "pyspades/mapmaker.pyx":408
 *                                 self.cmap[idx])
 *             idx+=1
 *         return vxl             # <<<<<<<<<<<<<<
 *     cpdef line_add(self,int x,int y,
 *                 int x2,int y2,int radius, double depth):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_vxl));
  __pyx_r = ((PyObject *)__pyx_v_vxl);
  goto __pyx_L0;

  /* "pyspades/mapmaker.pyx":392
 *                 y += 1
 * 
 *     cpdef write_vxl(self):             # <<<<<<<<<<<<<<
 *         cdef VXLData vxl = VXLData()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.write_vxl", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_vxl);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_63write_vxl(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_63write_vxl(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_vxl (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_62write_vxl(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_62write_vxl(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("write_vxl", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_write_vxl(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.write_vxl", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":409
 *             idx+=1
 *         return vxl
 *     cpdef line_add(self,int x,int y,             # <<<<<<<<<<<<<<
 *                 int x2,int y2,int radius, double depth):
 *         cdef int posx, posy
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_65line_add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_line_add(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_x2, int __pyx_v_y2, int __pyx_v_radius, double __pyx_v_depth, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_posx;
  int __pyx_v_posy;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  long __pyx_t_5;
  long __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("line_add", 0);

  /* "pyspades/mapmaker.pyx":412
 *                 int x2,int y2,int radius, double depth):
 *         cdef int posx, posy
 *         for c in bresenham_line(x,y,x2,y2):             # <<<<<<<<<<<<<<
 *             posx = c[0]
 *             posy = c[1]
 */
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_bresenham_line(__pyx_v_x, __pyx_v_y, __pyx_v_x2, __pyx_v_y2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 412, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 412, __pyx_L1_error)
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":413
 *         cdef int posx, posy
 *         for c in bresenham_line(x,y,x2,y2):
 *             posx = c[0]             # <<<<<<<<<<<<<<
 *             posy = c[1]
 *             for x in xrange(-radius,radius+1):
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_c, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 413, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_posx = __pyx_t_4;

    /* "pyspades/mapmaker.pyx":414
 *         for c in bresenham_line(x,y,x2,y2):
 *             posx = c[0]
 *             posy = c[1]             # <<<<<<<<<<<<<<
 *             for x in xrange(-radius,radius+1):
 *                 for y in xrange(-radius,radius+1):
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_c, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 414, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_posy = __pyx_t_4;

    /* "pyspades/mapmaker.pyx":415
 *             posx = c[0]
 *             posy = c[1]
 *             for x in xrange(-radius,radius+1):             # <<<<<<<<<<<<<<
 *                 for y in xrange(-radius,radius+1):
 *                     self.add_repeat(posx+x,posy+y,depth)
 */
    __pyx_t_5 = (__pyx_v_radius + 1);
    for (__pyx_t_4 = (-__pyx_v_radius); __pyx_t_4 < __pyx_t_5; __pyx_t_4+=1) {
      __pyx_v_x = __pyx_t_4;

      /* "pyspades/mapmaker.pyx":416
 *             posy = c[1]
 *             for x in xrange(-radius,radius+1):
 *                 for y in xrange(-radius,radius+1):             # <<<<<<<<<<<<<<
 *                     self.add_repeat(posx+x,posy+y,depth)
 *     cpdef line_set(self,int x,int y,
 */
      __pyx_t_6 = (__pyx_v_radius + 1);
      for (__pyx_t_7 = (-__pyx_v_radius); __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
        __pyx_v_y = __pyx_t_7;

        /* "pyspades/mapmaker.pyx":417
 *             for x in xrange(-radius,radius+1):
 *                 for y in xrange(-radius,radius+1):
 *                     self.add_repeat(posx+x,posy+y,depth)             # <<<<<<<<<<<<<<
 *     cpdef line_set(self,int x,int y,
 *                 int x2,int y2,int radius, double height):
 */
        __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_add_repeat(__pyx_v_self, (__pyx_v_posx + __pyx_v_x), (__pyx_v_posy + __pyx_v_y), __pyx_v_depth, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 417, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
    }

    /* "pyspades/mapmaker.pyx":412
 *                 int x2,int y2,int radius, double depth):
 *         cdef int posx, posy
 *         for c in bresenham_line(x,y,x2,y2):             # <<<<<<<<<<<<<<
 *             posx = c[0]
 *             posy = c[1]
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades/mapmaker.pyx":409
 *             idx+=1
 *         return vxl
 *     cpdef line_add(self,int x,int y,             # <<<<<<<<<<<<<<
 *                 int x2,int y2,int radius, double depth):
 *         cdef int posx, posy
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.line_add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_65line_add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_65line_add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_x2;
  int __pyx_v_y2;
  int __pyx_v_radius;
  double __pyx_v_depth;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("line_add (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_x2,&__pyx_n_s_y2,&__pyx_n_s_radius,&__pyx_n_s_depth,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("line_add", 1, 6, 6, 1); __PYX_ERR(0, 409, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("line_add", 1, 6, 6, 2); __PYX_ERR(0, 409, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("line_add", 1, 6, 6, 3); __PYX_ERR(0, 409, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_radius)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("line_add", 1, 6, 6, 4); __PYX_ERR(0, 409, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_depth)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("line_add", 1, 6, 6, 5); __PYX_ERR(0, 409, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "line_add") < 0)) __PYX_ERR(0, 409, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_x = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 409, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 409, __pyx_L3_error)
    __pyx_v_x2 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_x2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 410, __pyx_L3_error)
    __pyx_v_y2 = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_y2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 410, __pyx_L3_error)
    __pyx_v_radius = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_radius == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 410, __pyx_L3_error)
    __pyx_v_depth = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_depth == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 410, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("line_add", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 409, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.line_add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_64line_add(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_x2, __pyx_v_y2, __pyx_v_radius, __pyx_v_depth);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_64line_add(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_x2, int __pyx_v_y2, int __pyx_v_radius, double __pyx_v_depth) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("line_add", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_line_add(__pyx_v_self, __pyx_v_x, __pyx_v_y, __pyx_v_x2, __pyx_v_y2, __pyx_v_radius, __pyx_v_depth, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.line_add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":418
 *                 for y in xrange(-radius,radius+1):
 *                     self.add_repeat(posx+x,posy+y,depth)
 *     cpdef line_set(self,int x,int y,             # <<<<<<<<<<<<<<
 *                 int x2,int y2,int radius, double height):
 *         cdef int posx, posy
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_67line_set(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_line_set(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_x2, int __pyx_v_y2, int __pyx_v_radius, double __pyx_v_height, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_posx;
  int __pyx_v_posy;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  long __pyx_t_5;
  long __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("line_set", 0);

  /* "pyspades/mapmaker.pyx":421
 *                 int x2,int y2,int radius, double height):
 *         cdef int posx, posy
 *         for c in bresenham_line(x,y,x2,y2):             # <<<<<<<<<<<<<<
 *             posx = c[0]
 *             posy = c[1]
 */
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_bresenham_line(__pyx_v_x, __pyx_v_y, __pyx_v_x2, __pyx_v_y2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 421, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 421, __pyx_L1_error)
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":422
 *         cdef int posx, posy
 *         for c in bresenham_line(x,y,x2,y2):
 *             posx = c[0]             # <<<<<<<<<<<<<<
 *             posy = c[1]
 *             for x in xrange(-radius,radius+1):
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_c, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 422, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_posx = __pyx_t_4;

    /* "pyspades/mapmaker.pyx":423
 *         for c in bresenham_line(x,y,x2,y2):
 *             posx = c[0]
 *             posy = c[1]             # <<<<<<<<<<<<<<
 *             for x in xrange(-radius,radius+1):
 *                 for y in xrange(-radius,radius+1):
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_c, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_posy = __pyx_t_4;

    /* "pyspades/mapmaker.pyx":424
 *             posx = c[0]
 *             posy = c[1]
 *             for x in xrange(-radius,radius+1):             # <<<<<<<<<<<<<<
 *                 for y in xrange(-radius,radius+1):
 *                     self.set_repeat(posx+x,posy+y,height)
 */
    __pyx_t_5 = (__pyx_v_radius + 1);
    for (__pyx_t_4 = (-__pyx_v_radius); __pyx_t_4 < __pyx_t_5; __pyx_t_4+=1) {
      __pyx_v_x = __pyx_t_4;

      /* "pyspades/mapmaker.pyx":425
 *             posy = c[1]
 *             for x in xrange(-radius,radius+1):
 *                 for y in xrange(-radius,radius+1):             # <<<<<<<<<<<<<<
 *                     self.set_repeat(posx+x,posy+y,height)
 * 
 */
      __pyx_t_6 = (__pyx_v_radius + 1);
      for (__pyx_t_7 = (-__pyx_v_radius); __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
        __pyx_v_y = __pyx_t_7;

        /* "pyspades/mapmaker.pyx":426
 *             for x in xrange(-radius,radius+1):
 *                 for y in xrange(-radius,radius+1):
 *                     self.set_repeat(posx+x,posy+y,height)             # <<<<<<<<<<<<<<
 * 
 * cdef lim_byte(int val):
 */
        __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_set_repeat(__pyx_v_self, (__pyx_v_posx + __pyx_v_x), (__pyx_v_posy + __pyx_v_y), __pyx_v_height, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 426, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
    }

    /* "pyspades/mapmaker.pyx":421
 *                 int x2,int y2,int radius, double height):
 *         cdef int posx, posy
 *         for c in bresenham_line(x,y,x2,y2):             # <<<<<<<<<<<<<<
 *             posx = c[0]
 *             posy = c[1]
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades/mapmaker.pyx":418
 *                 for y in xrange(-radius,radius+1):
 *                     self.add_repeat(posx+x,posy+y,depth)
 *     cpdef line_set(self,int x,int y,             # <<<<<<<<<<<<<<
 *                 int x2,int y2,int radius, double height):
 *         cdef int posx, posy
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.line_set", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_67line_set(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_67line_set(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_x2;
  int __pyx_v_y2;
  int __pyx_v_radius;
  double __pyx_v_height;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("line_set (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_x2,&__pyx_n_s_y2,&__pyx_n_s_radius,&__pyx_n_s_height,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("line_set", 1, 6, 6, 1); __PYX_ERR(0, 418, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("line_set", 1, 6, 6, 2); __PYX_ERR(0, 418, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("line_set", 1, 6, 6, 3); __PYX_ERR(0, 418, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_radius)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("line_set", 1, 6, 6, 4); __PYX_ERR(0, 418, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("line_set", 1, 6, 6, 5); __PYX_ERR(0, 418, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "line_set") < 0)) __PYX_ERR(0, 418, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_x = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 418, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 418, __pyx_L3_error)
    __pyx_v_x2 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_x2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 419, __pyx_L3_error)
    __pyx_v_y2 = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_y2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 419, __pyx_L3_error)
    __pyx_v_radius = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_radius == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 419, __pyx_L3_error)
    __pyx_v_height = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_height == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 419, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("line_set", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 418, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.line_set", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_66line_set(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_x2, __pyx_v_y2, __pyx_v_radius, __pyx_v_height);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_66line_set(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_x2, int __pyx_v_y2, int __pyx_v_radius, double __pyx_v_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("line_set", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_9HeightMap_line_set(__pyx_v_self, __pyx_v_x, __pyx_v_y, __pyx_v_x2, __pyx_v_y2, __pyx_v_radius, __pyx_v_height, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.line_set", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":154
 * @cython.final
 * cdef class HeightMap:
 *     cdef public int width             # <<<<<<<<<<<<<<
 *     cdef public int height
 *     cdef public object hmap
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_5width_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_5width_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_5width___get__(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_5width___get__(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.width.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pyspades_8mapmaker_9HeightMap_5width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pyspades_8mapmaker_9HeightMap_5width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_5width_2__set__(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_9HeightMap_5width_2__set__(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 154, __pyx_L1_error)
  __pyx_v_self->width = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.width.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":155
 * cdef class HeightMap:
 *     cdef public int width
 *     cdef public int height             # <<<<<<<<<<<<<<
 *     cdef public object hmap
 *     cdef public object cmap
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_6height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_6height_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_6height___get__(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_6height___get__(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->height); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pyspades_8mapmaker_9HeightMap_6height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pyspades_8mapmaker_9HeightMap_6height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_6height_2__set__(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_9HeightMap_6height_2__set__(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 155, __pyx_L1_error)
  __pyx_v_self->height = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.height.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":156
 *     cdef public int width
 *     cdef public int height
 *     cdef public object hmap             # <<<<<<<<<<<<<<
 *     cdef public object cmap
 *     def __init__(self, height):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_4hmap_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_4hmap_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_4hmap___get__(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_4hmap___get__(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->hmap);
  __pyx_r = __pyx_v_self->hmap;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pyspades_8mapmaker_9HeightMap_4hmap_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pyspades_8mapmaker_9HeightMap_4hmap_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_4hmap_2__set__(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_9HeightMap_4hmap_2__set__(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->hmap);
  __Pyx_DECREF(__pyx_v_self->hmap);
  __pyx_v_self->hmap = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pyspades_8mapmaker_9HeightMap_4hmap_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_8pyspades_8mapmaker_9HeightMap_4hmap_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_4hmap_4__del__(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_9HeightMap_4hmap_4__del__(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->hmap);
  __Pyx_DECREF(__pyx_v_self->hmap);
  __pyx_v_self->hmap = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":157
 *     cdef public int height
 *     cdef public object hmap
 *     cdef public object cmap             # <<<<<<<<<<<<<<
 *     def __init__(self, height):
 *         self.width = 512
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_4cmap_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_9HeightMap_4cmap_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_4cmap___get__(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_4cmap___get__(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->cmap);
  __pyx_r = __pyx_v_self->cmap;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pyspades_8mapmaker_9HeightMap_4cmap_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pyspades_8mapmaker_9HeightMap_4cmap_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_4cmap_2__set__(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_9HeightMap_4cmap_2__set__(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->cmap);
  __Pyx_DECREF(__pyx_v_self->cmap);
  __pyx_v_self->cmap = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pyspades_8mapmaker_9HeightMap_4cmap_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_8pyspades_8mapmaker_9HeightMap_4cmap_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_9HeightMap_4cmap_4__del__(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_9HeightMap_4cmap_4__del__(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->cmap);
  __Pyx_DECREF(__pyx_v_self->cmap);
  __pyx_v_self->cmap = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":428
 *                     self.set_repeat(posx+x,posy+y,height)
 * 
 * cdef lim_byte(int val):             # <<<<<<<<<<<<<<
 *     return max(0,min(255,val))
 * 
 */

static PyObject *__pyx_f_8pyspades_8mapmaker_lim_byte(int __pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  long __pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("lim_byte", 0);

  /* "pyspades/mapmaker.pyx":429
 * 
 * cdef lim_byte(int val):
 *     return max(0,min(255,val))             # <<<<<<<<<<<<<<
 * 
 * cpdef inline int make_color(int r, int g, int b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_val;
  __pyx_t_2 = 0xFF;
  if (((__pyx_t_1 < __pyx_t_2) != 0)) {
    __pyx_t_3 = __pyx_t_1;
  } else {
    __pyx_t_3 = __pyx_t_2;
  }
  __pyx_t_2 = __pyx_t_3;
  __pyx_t_3 = 0;
  if (((__pyx_t_2 > __pyx_t_3) != 0)) {
    __pyx_t_4 = __pyx_t_2;
  } else {
    __pyx_t_4 = __pyx_t_3;
  }
  __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "pyspades/mapmaker.pyx":428
 *                     self.set_repeat(posx+x,posy+y,height)
 * 
 * cdef lim_byte(int val):             # <<<<<<<<<<<<<<
 *     return max(0,min(255,val))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyspades.mapmaker.lim_byte", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":431
 *     return max(0,min(255,val))
 * 
 * cpdef inline int make_color(int r, int g, int b):             # <<<<<<<<<<<<<<
 *     return b | (g << 8) | (r << 16) | (<int>128 << 24)
 * 
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_3make_color(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE int __pyx_f_8pyspades_8mapmaker_make_color(int __pyx_v_r, int __pyx_v_g, int __pyx_v_b, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("make_color", 0);

  /* "pyspades/mapmaker.pyx":432
 * 
 * cpdef inline int make_color(int r, int g, int b):
 *     return b | (g << 8) | (r << 16) | (<int>128 << 24)             # <<<<<<<<<<<<<<
 * 
 * cpdef inline int get_r(int color):
 */
  __pyx_r = (((__pyx_v_b | (__pyx_v_g << 8)) | (__pyx_v_r << 16)) | (((int)0x80) << 24));
  goto __pyx_L0;

  /* "pyspades/mapmaker.pyx":431
 *     return max(0,min(255,val))
 * 
 * cpdef inline int make_color(int r, int g, int b):             # <<<<<<<<<<<<<<
 *     return b | (g << 8) | (r << 16) | (<int>128 << 24)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_3make_color(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_3make_color(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_r;
  int __pyx_v_g;
  int __pyx_v_b;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("make_color (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_r,&__pyx_n_s_g,&__pyx_n_s_b,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("make_color", 1, 3, 3, 1); __PYX_ERR(0, 431, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("make_color", 1, 3, 3, 2); __PYX_ERR(0, 431, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "make_color") < 0)) __PYX_ERR(0, 431, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_r = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_r == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 431, __pyx_L3_error)
    __pyx_v_g = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_g == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 431, __pyx_L3_error)
    __pyx_v_b = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_b == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 431, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("make_color", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 431, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.make_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_2make_color(__pyx_self, __pyx_v_r, __pyx_v_g, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_2make_color(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_r, int __pyx_v_g, int __pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("make_color", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_8pyspades_8mapmaker_make_color(__pyx_v_r, __pyx_v_g, __pyx_v_b, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.make_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":434
 *     return b | (g << 8) | (r << 16) | (<int>128 << 24)
 * 
 * cpdef inline int get_r(int color):             # <<<<<<<<<<<<<<
 *     return (color>>16) & 0xFF
 * 
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_5get_r(PyObject *__pyx_self, PyObject *__pyx_arg_color); /*proto*/
static CYTHON_INLINE int __pyx_f_8pyspades_8mapmaker_get_r(int __pyx_v_color, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_r", 0);

  /* "pyspades/mapmaker.pyx":435
 * 
 * cpdef inline int get_r(int color):
 *     return (color>>16) & 0xFF             # <<<<<<<<<<<<<<
 * 
 * cpdef inline int get_g(int color):
 */
  __pyx_r = ((__pyx_v_color >> 16) & 0xFF);
  goto __pyx_L0;

  /* "pyspades/mapmaker.pyx":434
 *     return b | (g << 8) | (r << 16) | (<int>128 << 24)
 * 
 * cpdef inline int get_r(int color):             # <<<<<<<<<<<<<<
 *     return (color>>16) & 0xFF
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_5get_r(PyObject *__pyx_self, PyObject *__pyx_arg_color); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_5get_r(PyObject *__pyx_self, PyObject *__pyx_arg_color) {
  int __pyx_v_color;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_r (wrapper)", 0);
  assert(__pyx_arg_color); {
    __pyx_v_color = __Pyx_PyInt_As_int(__pyx_arg_color); if (unlikely((__pyx_v_color == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 434, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.get_r", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_4get_r(__pyx_self, ((int)__pyx_v_color));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_4get_r(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_color) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_r", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_8pyspades_8mapmaker_get_r(__pyx_v_color, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.get_r", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":437
 *     return (color>>16) & 0xFF
 * 
 * cpdef inline int get_g(int color):             # <<<<<<<<<<<<<<
 *     return (color>>8) & 0xFF
 * 
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_7get_g(PyObject *__pyx_self, PyObject *__pyx_arg_color); /*proto*/
static CYTHON_INLINE int __pyx_f_8pyspades_8mapmaker_get_g(int __pyx_v_color, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_g", 0);

  /* "pyspades/mapmaker.pyx":438
 * 
 * cpdef inline int get_g(int color):
 *     return (color>>8) & 0xFF             # <<<<<<<<<<<<<<
 * 
 * cpdef inline int get_b(int color):
 */
  __pyx_r = ((__pyx_v_color >> 8) & 0xFF);
  goto __pyx_L0;

  /* "pyspades/mapmaker.pyx":437
 *     return (color>>16) & 0xFF
 * 
 * cpdef inline int get_g(int color):             # <<<<<<<<<<<<<<
 *     return (color>>8) & 0xFF
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_7get_g(PyObject *__pyx_self, PyObject *__pyx_arg_color); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_7get_g(PyObject *__pyx_self, PyObject *__pyx_arg_color) {
  int __pyx_v_color;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_g (wrapper)", 0);
  assert(__pyx_arg_color); {
    __pyx_v_color = __Pyx_PyInt_As_int(__pyx_arg_color); if (unlikely((__pyx_v_color == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 437, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.get_g", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_6get_g(__pyx_self, ((int)__pyx_v_color));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_6get_g(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_color) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_g", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_8pyspades_8mapmaker_get_g(__pyx_v_color, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.get_g", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":440
 *     return (color>>8) & 0xFF
 * 
 * cpdef inline int get_b(int color):             # <<<<<<<<<<<<<<
 *     return (color) & 0xFF
 * 
 */

static PyObject *__pyx_pw_8pyspades_8mapmaker_9get_b(PyObject *__pyx_self, PyObject *__pyx_arg_color); /*proto*/
static CYTHON_INLINE int __pyx_f_8pyspades_8mapmaker_get_b(int __pyx_v_color, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_b", 0);

  /* "pyspades/mapmaker.pyx":441
 * 
 * cpdef inline int get_b(int color):
 *     return (color) & 0xFF             # <<<<<<<<<<<<<<
 * 
 * cdef inline int paint_gradient(object zcoltable, int z):
 */
  __pyx_r = (__pyx_v_color & 0xFF);
  goto __pyx_L0;

  /* "pyspades/mapmaker.pyx":440
 *     return (color>>8) & 0xFF
 * 
 * cpdef inline int get_b(int color):             # <<<<<<<<<<<<<<
 *     return (color) & 0xFF
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_9get_b(PyObject *__pyx_self, PyObject *__pyx_arg_color); /*proto*/
static PyObject *__pyx_pw_8pyspades_8mapmaker_9get_b(PyObject *__pyx_self, PyObject *__pyx_arg_color) {
  int __pyx_v_color;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_b (wrapper)", 0);
  assert(__pyx_arg_color); {
    __pyx_v_color = __Pyx_PyInt_As_int(__pyx_arg_color); if (unlikely((__pyx_v_color == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 440, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.get_b", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8get_b(__pyx_self, ((int)__pyx_v_color));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_8get_b(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_color) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_b", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_8pyspades_8mapmaker_get_b(__pyx_v_color, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.get_b", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":443
 *     return (color) & 0xFF
 * 
 * cdef inline int paint_gradient(object zcoltable, int z):             # <<<<<<<<<<<<<<
 *     cdef int zz = z*3
 *     cdef int rnd = random.randint(-4,4)
 */

static CYTHON_INLINE int __pyx_f_8pyspades_8mapmaker_paint_gradient(PyObject *__pyx_v_zcoltable, int __pyx_v_z) {
  int __pyx_v_zz;
  int __pyx_v_rnd;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  long __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("paint_gradient", 0);

  /* "pyspades/mapmaker.pyx":444
 * 
 * cdef inline int paint_gradient(object zcoltable, int z):
 *     cdef int zz = z*3             # <<<<<<<<<<<<<<
 *     cdef int rnd = random.randint(-4,4)
 *     return make_color(lim_byte(zcoltable[zz]+rnd),
 */
  __pyx_v_zz = (__pyx_v_z * 3);

  /* "pyspades/mapmaker.pyx":445
 * cdef inline int paint_gradient(object zcoltable, int z):
 *     cdef int zz = z*3
 *     cdef int rnd = random.randint(-4,4)             # <<<<<<<<<<<<<<
 *     return make_color(lim_byte(zcoltable[zz]+rnd),
 *                       lim_byte(zcoltable[zz+1]+rnd),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_random); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_randint); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rnd = __pyx_t_3;

  /* "pyspades/mapmaker.pyx":446
 *     cdef int zz = z*3
 *     cdef int rnd = random.randint(-4,4)
 *     return make_color(lim_byte(zcoltable[zz]+rnd),             # <<<<<<<<<<<<<<
 *                       lim_byte(zcoltable[zz+1]+rnd),
 *                       lim_byte(zcoltable[zz+2]+rnd)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_zcoltable, __pyx_v_zz, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_rnd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_f_8pyspades_8mapmaker_lim_byte(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyspades/mapmaker.pyx":447
 *     cdef int rnd = random.randint(-4,4)
 *     return make_color(lim_byte(zcoltable[zz]+rnd),
 *                       lim_byte(zcoltable[zz+1]+rnd),             # <<<<<<<<<<<<<<
 *                       lim_byte(zcoltable[zz+2]+rnd)
 *                       )
 */
  __pyx_t_5 = (__pyx_v_zz + 1);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_zcoltable, __pyx_t_5, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_rnd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Add(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_lim_byte(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":448
 *     return make_color(lim_byte(zcoltable[zz]+rnd),
 *                       lim_byte(zcoltable[zz+1]+rnd),
 *                       lim_byte(zcoltable[zz+2]+rnd)             # <<<<<<<<<<<<<<
 *                       )
 * 
 */
  __pyx_t_5 = (__pyx_v_zz + 2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_zcoltable, __pyx_t_5, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_rnd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_f_8pyspades_8mapmaker_lim_byte(__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyspades/mapmaker.pyx":446
 *     cdef int zz = z*3
 *     cdef int rnd = random.randint(-4,4)
 *     return make_color(lim_byte(zcoltable[zz]+rnd),             # <<<<<<<<<<<<<<
 *                       lim_byte(zcoltable[zz+1]+rnd),
 *                       lim_byte(zcoltable[zz+2]+rnd)
 */
  __pyx_r = __pyx_f_8pyspades_8mapmaker_make_color(__pyx_t_3, __pyx_t_6, __pyx_t_7, 0);
  goto __pyx_L0;

  /* "pyspades/mapmaker.pyx":443
 *     return (color) & 0xFF
 * 
 * cdef inline int paint_gradient(object zcoltable, int z):             # <<<<<<<<<<<<<<
 *     cdef int zz = z*3
 *     cdef int rnd = random.randint(-4,4)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pyspades.mapmaker.paint_gradient", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":451
 *                       )
 * 
 * cdef inline list bresenham_line(int x, int y, int x2, int y2):             # <<<<<<<<<<<<<<
 *     cdef int steep = 0
 *     cdef list coords = []
 */

static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_bresenham_line(int __pyx_v_x, int __pyx_v_y, int __pyx_v_x2, int __pyx_v_y2) {
  int __pyx_v_steep;
  PyObject *__pyx_v_coords = 0;
  int __pyx_v_dx;
  int __pyx_v_dy;
  int __pyx_v_sx;
  int __pyx_v_sy;
  int __pyx_v_d;
  CYTHON_UNUSED long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  unsigned int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  long __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("bresenham_line", 0);

  /* "pyspades/mapmaker.pyx":452
 * 
 * cdef inline list bresenham_line(int x, int y, int x2, int y2):
 *     cdef int steep = 0             # <<<<<<<<<<<<<<
 *     cdef list coords = []
 *     cdef int dx, dy, sx, sy, d
 */
  __pyx_v_steep = 0;

  /* "pyspades/mapmaker.pyx":453
 * cdef inline list bresenham_line(int x, int y, int x2, int y2):
 *     cdef int steep = 0
 *     cdef list coords = []             # <<<<<<<<<<<<<<
 *     cdef int dx, dy, sx, sy, d
 *     dx = abs(x2 - x)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_coords = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":455
 *     cdef list coords = []
 *     cdef int dx, dy, sx, sy, d
 *     dx = abs(x2 - x)             # <<<<<<<<<<<<<<
 *     if (x2 - x) > 0: sx = 1
 *     else: sx = -1
 */
  __pyx_t_2 = __Pyx_abs_int((__pyx_v_x2 - __pyx_v_x)); 
  __pyx_v_dx = __pyx_t_2;

  /* "pyspades/mapmaker.pyx":456
 *     cdef int dx, dy, sx, sy, d
 *     dx = abs(x2 - x)
 *     if (x2 - x) > 0: sx = 1             # <<<<<<<<<<<<<<
 *     else: sx = -1
 *     dy = abs(y2 - y)
 */
  __pyx_t_3 = (((__pyx_v_x2 - __pyx_v_x) > 0) != 0);
  if (__pyx_t_3) {
    __pyx_v_sx = 1;
    goto __pyx_L3;
  }

  /* "pyspades/mapmaker.pyx":457
 *     dx = abs(x2 - x)
 *     if (x2 - x) > 0: sx = 1
 *     else: sx = -1             # <<<<<<<<<<<<<<
 *     dy = abs(y2 - y)
 *     if (y2 - y) > 0: sy = 1
 */
  /*else*/ {
    __pyx_v_sx = -1;
  }
  __pyx_L3:;

  /* "pyspades/mapmaker.pyx":458
 *     if (x2 - x) > 0: sx = 1
 *     else: sx = -1
 *     dy = abs(y2 - y)             # <<<<<<<<<<<<<<
 *     if (y2 - y) > 0: sy = 1
 *     else: sy = -1
 */
  __pyx_t_2 = __Pyx_abs_int((__pyx_v_y2 - __pyx_v_y)); 
  __pyx_v_dy = __pyx_t_2;

  /* "pyspades/mapmaker.pyx":459
 *     else: sx = -1
 *     dy = abs(y2 - y)
 *     if (y2 - y) > 0: sy = 1             # <<<<<<<<<<<<<<
 *     else: sy = -1
 *     if dy > dx:
 */
  __pyx_t_3 = (((__pyx_v_y2 - __pyx_v_y) > 0) != 0);
  if (__pyx_t_3) {
    __pyx_v_sy = 1;
    goto __pyx_L4;
  }

  /* "pyspades/mapmaker.pyx":460
 *     dy = abs(y2 - y)
 *     if (y2 - y) > 0: sy = 1
 *     else: sy = -1             # <<<<<<<<<<<<<<
 *     if dy > dx:
 *         steep = 1
 */
  /*else*/ {
    __pyx_v_sy = -1;
  }
  __pyx_L4:;

  /* "pyspades/mapmaker.pyx":461
 *     if (y2 - y) > 0: sy = 1
 *     else: sy = -1
 *     if dy > dx:             # <<<<<<<<<<<<<<
 *         steep = 1
 *         x,y = y,x
 */
  __pyx_t_3 = ((__pyx_v_dy > __pyx_v_dx) != 0);
  if (__pyx_t_3) {

    /* "pyspades/mapmaker.pyx":462
 *     else: sy = -1
 *     if dy > dx:
 *         steep = 1             # <<<<<<<<<<<<<<
 *         x,y = y,x
 *         dx,dy = dy,dx
 */
    __pyx_v_steep = 1;

    /* "pyspades/mapmaker.pyx":463
 *     if dy > dx:
 *         steep = 1
 *         x,y = y,x             # <<<<<<<<<<<<<<
 *         dx,dy = dy,dx
 *         sx,sy = sy,sx
 */
    __pyx_t_4 = __pyx_v_y;
    __pyx_t_5 = __pyx_v_x;
    __pyx_v_x = __pyx_t_4;
    __pyx_v_y = __pyx_t_5;

    /* "pyspades/mapmaker.pyx":464
 *         steep = 1
 *         x,y = y,x
 *         dx,dy = dy,dx             # <<<<<<<<<<<<<<
 *         sx,sy = sy,sx
 *     d = (2 * dy) - dx
 */
    __pyx_t_5 = __pyx_v_dy;
    __pyx_t_4 = __pyx_v_dx;
    __pyx_v_dx = __pyx_t_5;
    __pyx_v_dy = __pyx_t_4;

    /* "pyspades/mapmaker.pyx":465
 *         x,y = y,x
 *         dx,dy = dy,dx
 *         sx,sy = sy,sx             # <<<<<<<<<<<<<<
 *     d = (2 * dy) - dx
 *     for i in xrange(0,dx):
 */
    __pyx_t_4 = __pyx_v_sy;
    __pyx_t_5 = __pyx_v_sx;
    __pyx_v_sx = __pyx_t_4;
    __pyx_v_sy = __pyx_t_5;

    /* "pyspades/mapmaker.pyx":461
 *     if (y2 - y) > 0: sy = 1
 *     else: sy = -1
 *     if dy > dx:             # <<<<<<<<<<<<<<
 *         steep = 1
 *         x,y = y,x
 */
  }

  /* "pyspades/mapmaker.pyx":466
 *         dx,dy = dy,dx
 *         sx,sy = sy,sx
 *     d = (2 * dy) - dx             # <<<<<<<<<<<<<<
 *     for i in xrange(0,dx):
 *         if steep: coords.append((y,x))
 */
  __pyx_v_d = ((2 * __pyx_v_dy) - __pyx_v_dx);

  /* "pyspades/mapmaker.pyx":467
 *         sx,sy = sy,sx
 *     d = (2 * dy) - dx
 *     for i in xrange(0,dx):             # <<<<<<<<<<<<<<
 *         if steep: coords.append((y,x))
 *         else: coords.append((x,y))
 */
  __pyx_t_5 = __pyx_v_dx;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "pyspades/mapmaker.pyx":468
 *     d = (2 * dy) - dx
 *     for i in xrange(0,dx):
 *         if steep: coords.append((y,x))             # <<<<<<<<<<<<<<
 *         else: coords.append((x,y))
 *         while d >= 0:
 */
    __pyx_t_3 = (__pyx_v_steep != 0);
    if (__pyx_t_3) {
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 468, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_x); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 468, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 468, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
      __pyx_t_1 = 0;
      __pyx_t_7 = 0;
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_coords, __pyx_t_8); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 468, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L8;
    }

    /* "pyspades/mapmaker.pyx":469
 *     for i in xrange(0,dx):
 *         if steep: coords.append((y,x))
 *         else: coords.append((x,y))             # <<<<<<<<<<<<<<
 *         while d >= 0:
 *             y = y + sy
 */
    /*else*/ {
      __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_x); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 469, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_y); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 469, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 469, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_7);
      __pyx_t_8 = 0;
      __pyx_t_7 = 0;
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_coords, __pyx_t_1); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 469, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L8:;

    /* "pyspades/mapmaker.pyx":470
 *         if steep: coords.append((y,x))
 *         else: coords.append((x,y))
 *         while d >= 0:             # <<<<<<<<<<<<<<
 *             y = y + sy
 *             d = d - (2 * dx)
 */
    while (1) {
      __pyx_t_3 = ((__pyx_v_d >= 0) != 0);
      if (!__pyx_t_3) break;

      /* "pyspades/mapmaker.pyx":471
 *         else: coords.append((x,y))
 *         while d >= 0:
 *             y = y + sy             # <<<<<<<<<<<<<<
 *             d = d - (2 * dx)
 *         x = x + sx
 */
      __pyx_v_y = (__pyx_v_y + __pyx_v_sy);

      /* "pyspades/mapmaker.pyx":472
 *         while d >= 0:
 *             y = y + sy
 *             d = d - (2 * dx)             # <<<<<<<<<<<<<<
 *         x = x + sx
 *         d = d + (2 * dy)
 */
      __pyx_v_d = (__pyx_v_d - (2 * __pyx_v_dx));
    }

    /* "pyspades/mapmaker.pyx":473
 *             y = y + sy
 *             d = d - (2 * dx)
 *         x = x + sx             # <<<<<<<<<<<<<<
 *         d = d + (2 * dy)
 *     coords.append((x2,y2))
 */
    __pyx_v_x = (__pyx_v_x + __pyx_v_sx);

    /* "pyspades/mapmaker.pyx":474
 *             d = d - (2 * dx)
 *         x = x + sx
 *         d = d + (2 * dy)             # <<<<<<<<<<<<<<
 *     coords.append((x2,y2))
 *     return coords
 */
    __pyx_v_d = (__pyx_v_d + (2 * __pyx_v_dy));
  }

  /* "pyspades/mapmaker.pyx":475
 *         x = x + sx
 *         d = d + (2 * dy)
 *     coords.append((x2,y2))             # <<<<<<<<<<<<<<
 *     return coords
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_x2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_y2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
  __pyx_t_1 = 0;
  __pyx_t_7 = 0;
  __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_coords, __pyx_t_8); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "pyspades/mapmaker.pyx":476
 *         d = d + (2 * dy)
 *     coords.append((x2,y2))
 *     return coords             # <<<<<<<<<<<<<<
 * 
 * from color import *
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_coords);
  __pyx_r = __pyx_v_coords;
  goto __pyx_L0;

  /* "pyspades/mapmaker.pyx":451
 *                       )
 * 
 * cdef inline list bresenham_line(int x, int y, int x2, int y2):             # <<<<<<<<<<<<<<
 *     cdef int steep = 0
 *     cdef list coords = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyspades.mapmaker.bresenham_line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_coords);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":481
 * 
 * class Gradient(object):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.steps = []
 *         for n in xrange(0,64):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_8Gradient_1__init__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_8pyspades_8mapmaker_8Gradient_1__init__ = {"__init__", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_8Gradient_1__init__, METH_O, 0};
static PyObject *__pyx_pw_8pyspades_8mapmaker_8Gradient_1__init__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8Gradient___init__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_8Gradient___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  CYTHON_UNUSED long __pyx_v_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  long __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pyspades/mapmaker.pyx":482
 * class Gradient(object):
 *     def __init__(self):
 *         self.steps = []             # <<<<<<<<<<<<<<
 *         for n in xrange(0,64):
 *             self.steps.append((0,0,0,0))
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_steps, __pyx_t_1) < 0) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":483
 *     def __init__(self):
 *         self.steps = []
 *         for n in xrange(0,64):             # <<<<<<<<<<<<<<
 *             self.steps.append((0,0,0,0))
 *     def set_step_rgb(self, step, rgb):
 */
  for (__pyx_t_2 = 0; __pyx_t_2 < 64; __pyx_t_2+=1) {
    __pyx_v_n = __pyx_t_2;

    /* "pyspades/mapmaker.pyx":484
 *         self.steps = []
 *         for n in xrange(0,64):
 *             self.steps.append((0,0,0,0))             # <<<<<<<<<<<<<<
 *     def set_step_rgb(self, step, rgb):
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_steps); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_Append(__pyx_t_1, __pyx_tuple__5); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 484, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades/mapmaker.pyx":481
 * 
 * class Gradient(object):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.steps = []
 *         for n in xrange(0,64):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.Gradient.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":485
 *         for n in xrange(0,64):
 *             self.steps.append((0,0,0,0))
 *     def set_step_rgb(self, step, rgb):             # <<<<<<<<<<<<<<
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 *     def set_step_hsb(self, step, hsb):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_8Gradient_3set_step_rgb(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pyspades_8mapmaker_8Gradient_3set_step_rgb = {"set_step_rgb", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_8Gradient_3set_step_rgb, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8pyspades_8mapmaker_8Gradient_3set_step_rgb(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_step = 0;
  PyObject *__pyx_v_rgb = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_step_rgb (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_step,&__pyx_n_s_rgb,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_step)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_step_rgb", 1, 3, 3, 1); __PYX_ERR(0, 485, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rgb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_step_rgb", 1, 3, 3, 2); __PYX_ERR(0, 485, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_step_rgb") < 0)) __PYX_ERR(0, 485, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_step = values[1];
    __pyx_v_rgb = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_step_rgb", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 485, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.Gradient.set_step_rgb", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8Gradient_2set_step_rgb(__pyx_self, __pyx_v_self, __pyx_v_step, __pyx_v_rgb);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_8Gradient_2set_step_rgb(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_step, PyObject *__pyx_v_rgb) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("set_step_rgb", 0);

  /* "pyspades/mapmaker.pyx":486
 *             self.steps.append((0,0,0,0))
 *     def set_step_rgb(self, step, rgb):
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)             # <<<<<<<<<<<<<<
 *     def set_step_hsb(self, step, hsb):
 *         rgb = hsb_to_rgb(*hsb)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_rgb, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_rgb, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_rgb, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __Pyx_INCREF(__pyx_int_255);
  __Pyx_GIVEREF(__pyx_int_255);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_int_255);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_steps); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(PyObject_SetItem(__pyx_t_3, __pyx_v_step, __pyx_t_4) < 0)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyspades/mapmaker.pyx":485
 *         for n in xrange(0,64):
 *             self.steps.append((0,0,0,0))
 *     def set_step_rgb(self, step, rgb):             # <<<<<<<<<<<<<<
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 *     def set_step_hsb(self, step, hsb):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyspades.mapmaker.Gradient.set_step_rgb", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":487
 *     def set_step_rgb(self, step, rgb):
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 *     def set_step_hsb(self, step, hsb):             # <<<<<<<<<<<<<<
 *         rgb = hsb_to_rgb(*hsb)
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_8Gradient_5set_step_hsb(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pyspades_8mapmaker_8Gradient_5set_step_hsb = {"set_step_hsb", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_8Gradient_5set_step_hsb, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8pyspades_8mapmaker_8Gradient_5set_step_hsb(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_step = 0;
  PyObject *__pyx_v_hsb = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_step_hsb (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_step,&__pyx_n_s_hsb,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_step)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_step_hsb", 1, 3, 3, 1); __PYX_ERR(0, 487, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hsb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_step_hsb", 1, 3, 3, 2); __PYX_ERR(0, 487, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_step_hsb") < 0)) __PYX_ERR(0, 487, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_step = values[1];
    __pyx_v_hsb = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_step_hsb", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 487, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.Gradient.set_step_hsb", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8Gradient_4set_step_hsb(__pyx_self, __pyx_v_self, __pyx_v_step, __pyx_v_hsb);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_8Gradient_4set_step_hsb(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_step, PyObject *__pyx_v_hsb) {
  PyObject *__pyx_v_rgb = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("set_step_hsb", 0);

  /* "pyspades/mapmaker.pyx":488
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 *     def set_step_hsb(self, step, hsb):
 *         rgb = hsb_to_rgb(*hsb)             # <<<<<<<<<<<<<<
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 *     def rgb(self, start_pos, start_color, end_pos, end_color):
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_hsb_to_rgb); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PySequence_Tuple(__pyx_v_hsb); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_rgb = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pyspades/mapmaker.pyx":489
 *     def set_step_hsb(self, step, hsb):
 *         rgb = hsb_to_rgb(*hsb)
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)             # <<<<<<<<<<<<<<
 *     def rgb(self, start_pos, start_color, end_pos, end_color):
 *         """Linear interpolation of (0-255) RGB values."""
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_rgb, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_rgb, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_rgb, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_1);
  __Pyx_INCREF(__pyx_int_255);
  __Pyx_GIVEREF(__pyx_int_255);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_int_255);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_steps); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_v_step, __pyx_t_4) < 0)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyspades/mapmaker.pyx":487
 *     def set_step_rgb(self, step, rgb):
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 *     def set_step_hsb(self, step, hsb):             # <<<<<<<<<<<<<<
 *         rgb = hsb_to_rgb(*hsb)
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyspades.mapmaker.Gradient.set_step_hsb", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_rgb);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":490
 *         rgb = hsb_to_rgb(*hsb)
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 *     def rgb(self, start_pos, start_color, end_pos, end_color):             # <<<<<<<<<<<<<<
 *         """Linear interpolation of (0-255) RGB values."""
 *         dist = end_pos - start_pos
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_8Gradient_7rgb(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_8Gradient_6rgb[] = "Linear interpolation of (0-255) RGB values.";
static PyMethodDef __pyx_mdef_8pyspades_8mapmaker_8Gradient_7rgb = {"rgb", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_8Gradient_7rgb, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pyspades_8mapmaker_8Gradient_6rgb};
static PyObject *__pyx_pw_8pyspades_8mapmaker_8Gradient_7rgb(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_start_pos = 0;
  PyObject *__pyx_v_start_color = 0;
  PyObject *__pyx_v_end_pos = 0;
  PyObject *__pyx_v_end_color = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rgb (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_start_pos,&__pyx_n_s_start_color,&__pyx_n_s_end_pos,&__pyx_n_s_end_color,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_start_pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rgb", 1, 5, 5, 1); __PYX_ERR(0, 490, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_start_color)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rgb", 1, 5, 5, 2); __PYX_ERR(0, 490, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_end_pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rgb", 1, 5, 5, 3); __PYX_ERR(0, 490, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_end_color)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rgb", 1, 5, 5, 4); __PYX_ERR(0, 490, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rgb") < 0)) __PYX_ERR(0, 490, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_self = values[0];
    __pyx_v_start_pos = values[1];
    __pyx_v_start_color = values[2];
    __pyx_v_end_pos = values[3];
    __pyx_v_end_color = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rgb", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 490, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.Gradient.rgb", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8Gradient_6rgb(__pyx_self, __pyx_v_self, __pyx_v_start_pos, __pyx_v_start_color, __pyx_v_end_pos, __pyx_v_end_color);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_8Gradient_6rgb(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_start_pos, PyObject *__pyx_v_start_color, PyObject *__pyx_v_end_pos, PyObject *__pyx_v_end_color) {
  PyObject *__pyx_v_dist = NULL;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_v_pct = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("rgb", 0);

  /* "pyspades/mapmaker.pyx":492
 *     def rgb(self, start_pos, start_color, end_pos, end_color):
 *         """Linear interpolation of (0-255) RGB values."""
 *         dist = end_pos - start_pos             # <<<<<<<<<<<<<<
 *         for n in xrange(start_pos, end_pos):
 *             pct = float(n - start_pos) / dist
 */
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_end_pos, __pyx_v_start_pos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_dist = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":493
 *         """Linear interpolation of (0-255) RGB values."""
 *         dist = end_pos - start_pos
 *         for n in xrange(start_pos, end_pos):             # <<<<<<<<<<<<<<
 *             pct = float(n - start_pos) / dist
 *             self.set_step_rgb(n, interpolate_rgb(start_color,
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_start_pos);
  __Pyx_GIVEREF(__pyx_v_start_pos);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_start_pos);
  __Pyx_INCREF(__pyx_v_end_pos);
  __Pyx_GIVEREF(__pyx_v_end_pos);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_end_pos);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 493, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 493, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 493, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 493, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 493, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 493, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 493, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyspades/mapmaker.pyx":494
 *         dist = end_pos - start_pos
 *         for n in xrange(start_pos, end_pos):
 *             pct = float(n - start_pos) / dist             # <<<<<<<<<<<<<<
 *             self.set_step_rgb(n, interpolate_rgb(start_color,
 *                                              end_color,
 */
    __pyx_t_2 = PyNumber_Subtract(__pyx_v_n, __pyx_v_start_pos); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 494, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyNumber_Float(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 494, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_v_dist); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 494, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_pct, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyspades/mapmaker.pyx":495
 *         for n in xrange(start_pos, end_pos):
 *             pct = float(n - start_pos) / dist
 *             self.set_step_rgb(n, interpolate_rgb(start_color,             # <<<<<<<<<<<<<<
 *                                              end_color,
 *                                              pct))
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_set_step_rgb); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_interpolate_rgb); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);

    /* "pyspades/mapmaker.pyx":497
 *             self.set_step_rgb(n, interpolate_rgb(start_color,
 *                                              end_color,
 *                                              pct))             # <<<<<<<<<<<<<<
 *     def hsb(self, start_pos, start_color, end_pos, end_color):
 *         """Linear interpolation of (0-360,0-100,0-100) HSB values
 */
    __pyx_t_8 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_9 = 1;
      }
    }
    __pyx_t_10 = PyTuple_New(3+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_start_color);
    __Pyx_GIVEREF(__pyx_v_start_color);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_v_start_color);
    __Pyx_INCREF(__pyx_v_end_color);
    __Pyx_GIVEREF(__pyx_v_end_color);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_v_end_color);
    __Pyx_INCREF(__pyx_v_pct);
    __Pyx_GIVEREF(__pyx_v_pct);
    PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_9, __pyx_v_pct);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_10, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_9 = 1;
      }
    }
    __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_v_n);
    __Pyx_GIVEREF(__pyx_v_n);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_v_n);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyspades/mapmaker.pyx":493
 *         """Linear interpolation of (0-255) RGB values."""
 *         dist = end_pos - start_pos
 *         for n in xrange(start_pos, end_pos):             # <<<<<<<<<<<<<<
 *             pct = float(n - start_pos) / dist
 *             self.set_step_rgb(n, interpolate_rgb(start_color,
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":490
 *         rgb = hsb_to_rgb(*hsb)
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 *     def rgb(self, start_pos, start_color, end_pos, end_color):             # <<<<<<<<<<<<<<
 *         """Linear interpolation of (0-255) RGB values."""
 *         dist = end_pos - start_pos
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pyspades.mapmaker.Gradient.rgb", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dist);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_pct);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":498
 *                                              end_color,
 *                                              pct))
 *     def hsb(self, start_pos, start_color, end_pos, end_color):             # <<<<<<<<<<<<<<
 *         """Linear interpolation of (0-360,0-100,0-100) HSB values
 *             as used in GIMP."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_8Gradient_9hsb(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_8Gradient_8hsb[] = "Linear interpolation of (0-360,0-100,0-100) HSB values\n            as used in GIMP.";
static PyMethodDef __pyx_mdef_8pyspades_8mapmaker_8Gradient_9hsb = {"hsb", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_8Gradient_9hsb, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pyspades_8mapmaker_8Gradient_8hsb};
static PyObject *__pyx_pw_8pyspades_8mapmaker_8Gradient_9hsb(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_start_pos = 0;
  PyObject *__pyx_v_start_color = 0;
  PyObject *__pyx_v_end_pos = 0;
  PyObject *__pyx_v_end_color = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hsb (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_start_pos,&__pyx_n_s_start_color,&__pyx_n_s_end_pos,&__pyx_n_s_end_color,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_start_pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("hsb", 1, 5, 5, 1); __PYX_ERR(0, 498, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_start_color)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("hsb", 1, 5, 5, 2); __PYX_ERR(0, 498, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_end_pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("hsb", 1, 5, 5, 3); __PYX_ERR(0, 498, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_end_color)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("hsb", 1, 5, 5, 4); __PYX_ERR(0, 498, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "hsb") < 0)) __PYX_ERR(0, 498, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_self = values[0];
    __pyx_v_start_pos = values[1];
    __pyx_v_start_color = values[2];
    __pyx_v_end_pos = values[3];
    __pyx_v_end_color = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("hsb", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 498, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.Gradient.hsb", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8Gradient_8hsb(__pyx_self, __pyx_v_self, __pyx_v_start_pos, __pyx_v_start_color, __pyx_v_end_pos, __pyx_v_end_color);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_8Gradient_8hsb(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_start_pos, PyObject *__pyx_v_start_color, PyObject *__pyx_v_end_pos, PyObject *__pyx_v_end_color) {
  PyObject *__pyx_v_dist = NULL;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_v_pct = NULL;
  PyObject *__pyx_v_interp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("hsb", 0);
  __Pyx_INCREF(__pyx_v_start_color);
  __Pyx_INCREF(__pyx_v_end_color);

  /* "pyspades/mapmaker.pyx":501
 *         """Linear interpolation of (0-360,0-100,0-100) HSB values
 *             as used in GIMP."""
 *         dist = end_pos - start_pos             # <<<<<<<<<<<<<<
 *         start_color = (start_color[0]/360.,
 *                        start_color[1]/100.,
 */
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_end_pos, __pyx_v_start_pos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_dist = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":502
 *             as used in GIMP."""
 *         dist = end_pos - start_pos
 *         start_color = (start_color[0]/360.,             # <<<<<<<<<<<<<<
 *                        start_color[1]/100.,
 *                        start_color[2]/100.)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_start_color, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyFloat_DivideObjC(__pyx_t_1, __pyx_float_360_, 360., 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":503
 *         dist = end_pos - start_pos
 *         start_color = (start_color[0]/360.,
 *                        start_color[1]/100.,             # <<<<<<<<<<<<<<
 *                        start_color[2]/100.)
 *         end_color = (end_color[0]/360.,
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_start_color, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyFloat_DivideObjC(__pyx_t_1, __pyx_float_100_, 100., 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":504
 *         start_color = (start_color[0]/360.,
 *                        start_color[1]/100.,
 *                        start_color[2]/100.)             # <<<<<<<<<<<<<<
 *         end_color = (end_color[0]/360.,
 *                        end_color[1]/100.,
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_start_color, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyFloat_DivideObjC(__pyx_t_1, __pyx_float_100_, 100., 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":502
 *             as used in GIMP."""
 *         dist = end_pos - start_pos
 *         start_color = (start_color[0]/360.,             # <<<<<<<<<<<<<<
 *                        start_color[1]/100.,
 *                        start_color[2]/100.)
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_start_color, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":505
 *                        start_color[1]/100.,
 *                        start_color[2]/100.)
 *         end_color = (end_color[0]/360.,             # <<<<<<<<<<<<<<
 *                        end_color[1]/100.,
 *                        end_color[2]/100.)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_end_color, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyFloat_DivideObjC(__pyx_t_1, __pyx_float_360_, 360., 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":506
 *                        start_color[2]/100.)
 *         end_color = (end_color[0]/360.,
 *                        end_color[1]/100.,             # <<<<<<<<<<<<<<
 *                        end_color[2]/100.)
 *         for n in xrange(start_pos, end_pos):
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_end_color, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyFloat_DivideObjC(__pyx_t_1, __pyx_float_100_, 100., 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":507
 *         end_color = (end_color[0]/360.,
 *                        end_color[1]/100.,
 *                        end_color[2]/100.)             # <<<<<<<<<<<<<<
 *         for n in xrange(start_pos, end_pos):
 *             pct = float(n - start_pos) / dist
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_end_color, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyFloat_DivideObjC(__pyx_t_1, __pyx_float_100_, 100., 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":505
 *                        start_color[1]/100.,
 *                        start_color[2]/100.)
 *         end_color = (end_color[0]/360.,             # <<<<<<<<<<<<<<
 *                        end_color[1]/100.,
 *                        end_color[2]/100.)
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_2);
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_end_color, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":508
 *                        end_color[1]/100.,
 *                        end_color[2]/100.)
 *         for n in xrange(start_pos, end_pos):             # <<<<<<<<<<<<<<
 *             pct = float(n - start_pos) / dist
 *             interp = interpolate_hsb(start_color, end_color, pct)
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_start_pos);
  __Pyx_GIVEREF(__pyx_v_start_pos);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_start_pos);
  __Pyx_INCREF(__pyx_v_end_pos);
  __Pyx_GIVEREF(__pyx_v_end_pos);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_end_pos);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 508, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 508, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 508, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 508, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 508, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_6(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 508, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyspades/mapmaker.pyx":509
 *                        end_color[2]/100.)
 *         for n in xrange(start_pos, end_pos):
 *             pct = float(n - start_pos) / dist             # <<<<<<<<<<<<<<
 *             interp = interpolate_hsb(start_color, end_color, pct)
 *             self.set_step_hsb(n, interp)
 */
    __pyx_t_2 = PyNumber_Subtract(__pyx_v_n, __pyx_v_start_pos); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyNumber_Float(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_v_dist); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_pct, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyspades/mapmaker.pyx":510
 *         for n in xrange(start_pos, end_pos):
 *             pct = float(n - start_pos) / dist
 *             interp = interpolate_hsb(start_color, end_color, pct)             # <<<<<<<<<<<<<<
 *             self.set_step_hsb(n, interp)
 *     def array(self):
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_interpolate_hsb); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    __pyx_t_8 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_start_color);
    __Pyx_GIVEREF(__pyx_v_start_color);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_start_color);
    __Pyx_INCREF(__pyx_v_end_color);
    __Pyx_GIVEREF(__pyx_v_end_color);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_end_color);
    __Pyx_INCREF(__pyx_v_pct);
    __Pyx_GIVEREF(__pyx_v_pct);
    PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, __pyx_v_pct);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_interp, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyspades/mapmaker.pyx":511
 *             pct = float(n - start_pos) / dist
 *             interp = interpolate_hsb(start_color, end_color, pct)
 *             self.set_step_hsb(n, interp)             # <<<<<<<<<<<<<<
 *     def array(self):
 *         base = list(self.steps)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_set_step_hsb); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    __pyx_t_4 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_n);
    __Pyx_GIVEREF(__pyx_v_n);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_7, __pyx_v_n);
    __Pyx_INCREF(__pyx_v_interp);
    __Pyx_GIVEREF(__pyx_v_interp);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_7, __pyx_v_interp);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyspades/mapmaker.pyx":508
 *                        end_color[1]/100.,
 *                        end_color[2]/100.)
 *         for n in xrange(start_pos, end_pos):             # <<<<<<<<<<<<<<
 *             pct = float(n - start_pos) / dist
 *             interp = interpolate_hsb(start_color, end_color, pct)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":498
 *                                              end_color,
 *                                              pct))
 *     def hsb(self, start_pos, start_color, end_pos, end_color):             # <<<<<<<<<<<<<<
 *         """Linear interpolation of (0-360,0-100,0-100) HSB values
 *             as used in GIMP."""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyspades.mapmaker.Gradient.hsb", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dist);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_pct);
  __Pyx_XDECREF(__pyx_v_interp);
  __Pyx_XDECREF(__pyx_v_start_color);
  __Pyx_XDECREF(__pyx_v_end_color);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades/mapmaker.pyx":512
 *             interp = interpolate_hsb(start_color, end_color, pct)
 *             self.set_step_hsb(n, interp)
 *     def array(self):             # <<<<<<<<<<<<<<
 *         base = list(self.steps)
 *         base.reverse()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pyspades_8mapmaker_8Gradient_11array(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_8pyspades_8mapmaker_8Gradient_11array = {"array", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_8Gradient_11array, METH_O, 0};
static PyObject *__pyx_pw_8pyspades_8mapmaker_8Gradient_11array(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("array (wrapper)", 0);
  __pyx_r = __pyx_pf_8pyspades_8mapmaker_8Gradient_10array(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pyspades_8mapmaker_8Gradient_10array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_base = NULL;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_rgb = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("array", 0);

  /* "pyspades/mapmaker.pyx":513
 *             self.set_step_hsb(n, interp)
 *     def array(self):
 *         base = list(self.steps)             # <<<<<<<<<<<<<<
 *         base.reverse()
 *         result = []
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_steps); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_base = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyspades/mapmaker.pyx":514
 *     def array(self):
 *         base = list(self.steps)
 *         base.reverse()             # <<<<<<<<<<<<<<
 *         result = []
 *         for rgb in base:
 */
  __pyx_t_3 = PyList_Reverse(__pyx_v_base); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 514, __pyx_L1_error)

  /* "pyspades/mapmaker.pyx":515
 *         base = list(self.steps)
 *         base.reverse()
 *         result = []             # <<<<<<<<<<<<<<
 *         for rgb in base:
 *             result.append(int(rgb[0]))
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_result = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyspades/mapmaker.pyx":516
 *         base.reverse()
 *         result = []
 *         for rgb in base:             # <<<<<<<<<<<<<<
 *             result.append(int(rgb[0]))
 *             result.append(int(rgb[1]))
 */
  __pyx_t_2 = __pyx_v_base; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
  for (;;) {
    if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 516, __pyx_L1_error)
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_rgb, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":517
 *         result = []
 *         for rgb in base:
 *             result.append(int(rgb[0]))             # <<<<<<<<<<<<<<
 *             result.append(int(rgb[1]))
 *             result.append(int(rgb[2]))
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_rgb, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_result, __pyx_t_5); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pyspades/mapmaker.pyx":518
 *         for rgb in base:
 *             result.append(int(rgb[0]))
 *             result.append(int(rgb[1]))             # <<<<<<<<<<<<<<
 *             result.append(int(rgb[2]))
 *         return array.array('i',result)
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_rgb, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_result, __pyx_t_1); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 518, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyspades/mapmaker.pyx":519
 *             result.append(int(rgb[0]))
 *             result.append(int(rgb[1]))
 *             result.append(int(rgb[2]))             # <<<<<<<<<<<<<<
 *         return array.array('i',result)
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_rgb, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_result, __pyx_t_5); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 519, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pyspades/mapmaker.pyx":516
 *         base.reverse()
 *         result = []
 *         for rgb in base:             # <<<<<<<<<<<<<<
 *             result.append(int(rgb[0]))
 *             result.append(int(rgb[1]))
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades/mapmaker.pyx":520
 *             result.append(int(rgb[1]))
 *             result.append(int(rgb[2]))
 *         return array.array('i',result)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_6 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__pyx_t_5) {
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
  }
  __Pyx_INCREF(__pyx_n_s_i);
  __Pyx_GIVEREF(__pyx_n_s_i);
  PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_4, __pyx_n_s_i);
  __Pyx_INCREF(__pyx_v_result);
  __Pyx_GIVEREF(__pyx_v_result);
  PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_4, __pyx_v_result);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyspades/mapmaker.pyx":512
 *             interp = interpolate_hsb(start_color, end_color, pct)
 *             self.set_step_hsb(n, interp)
 *     def array(self):             # <<<<<<<<<<<<<<
 *         base = list(self.steps)
 *         base.reverse()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyspades.mapmaker.Gradient.array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_base);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_rgb);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_8pyspades_8mapmaker_BiomeMap __pyx_vtable_8pyspades_8mapmaker_BiomeMap;

static PyObject *__pyx_tp_new_8pyspades_8mapmaker_BiomeMap(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pyspades_8mapmaker_BiomeMap;
  p->biomes = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->tmap = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->gradients = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pyspades_8mapmaker_BiomeMap(PyObject *o) {
  struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *p = (struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->biomes);
  Py_CLEAR(p->tmap);
  Py_CLEAR(p->gradients);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pyspades_8mapmaker_BiomeMap(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *p = (struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)o;
  if (p->biomes) {
    e = (*v)(p->biomes, a); if (e) return e;
  }
  if (p->tmap) {
    e = (*v)(p->tmap, a); if (e) return e;
  }
  if (p->gradients) {
    e = (*v)(p->gradients, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pyspades_8mapmaker_BiomeMap(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *p = (struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)o;
  tmp = ((PyObject*)p->biomes);
  p->biomes = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->tmap);
  p->tmap = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->gradients);
  p->gradients = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_8pyspades_8mapmaker_8BiomeMap_width(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pyspades_8mapmaker_8BiomeMap_5width_1__get__(o);
}

static int __pyx_setprop_8pyspades_8mapmaker_8BiomeMap_width(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pyspades_8mapmaker_8BiomeMap_5width_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pyspades_8mapmaker_8BiomeMap_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pyspades_8mapmaker_8BiomeMap_6height_1__get__(o);
}

static int __pyx_setprop_8pyspades_8mapmaker_8BiomeMap_height(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pyspades_8mapmaker_8BiomeMap_6height_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pyspades_8mapmaker_8BiomeMap_twidth(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pyspades_8mapmaker_8BiomeMap_6twidth_1__get__(o);
}

static int __pyx_setprop_8pyspades_8mapmaker_8BiomeMap_twidth(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pyspades_8mapmaker_8BiomeMap_6twidth_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pyspades_8mapmaker_8BiomeMap_theight(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pyspades_8mapmaker_8BiomeMap_7theight_1__get__(o);
}

static int __pyx_setprop_8pyspades_8mapmaker_8BiomeMap_theight(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pyspades_8mapmaker_8BiomeMap_7theight_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pyspades_8mapmaker_8BiomeMap_biomes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pyspades_8mapmaker_8BiomeMap_6biomes_1__get__(o);
}

static int __pyx_setprop_8pyspades_8mapmaker_8BiomeMap_biomes(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pyspades_8mapmaker_8BiomeMap_6biomes_3__set__(o, v);
  }
  else {
    return __pyx_pw_8pyspades_8mapmaker_8BiomeMap_6biomes_5__del__(o);
  }
}

static PyObject *__pyx_getprop_8pyspades_8mapmaker_8BiomeMap_tmap(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pyspades_8mapmaker_8BiomeMap_4tmap_1__get__(o);
}

static int __pyx_setprop_8pyspades_8mapmaker_8BiomeMap_tmap(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pyspades_8mapmaker_8BiomeMap_4tmap_3__set__(o, v);
  }
  else {
    return __pyx_pw_8pyspades_8mapmaker_8BiomeMap_4tmap_5__del__(o);
  }
}

static PyObject *__pyx_getprop_8pyspades_8mapmaker_8BiomeMap_gradients(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pyspades_8mapmaker_8BiomeMap_9gradients_1__get__(o);
}

static int __pyx_setprop_8pyspades_8mapmaker_8BiomeMap_gradients(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pyspades_8mapmaker_8BiomeMap_9gradients_3__set__(o, v);
  }
  else {
    return __pyx_pw_8pyspades_8mapmaker_8BiomeMap_9gradients_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_8pyspades_8mapmaker_BiomeMap[] = {
  {"get_repeat", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_8BiomeMap_3get_repeat, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pyspades_8mapmaker_8BiomeMap_2get_repeat},
  {"set_repeat", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_8BiomeMap_5set_repeat, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pyspades_8mapmaker_8BiomeMap_4set_repeat},
  {"noise", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_8BiomeMap_7noise, METH_NOARGS, 0},
  {"random_points", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_8BiomeMap_9random_points, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pyspades_8mapmaker_8BiomeMap_8random_points},
  {"point_flood", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_8BiomeMap_11point_flood, METH_O, __pyx_doc_8pyspades_8mapmaker_8BiomeMap_10point_flood},
  {"jitter", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_8BiomeMap_13jitter, METH_NOARGS, 0},
  {"create_heightmap", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_8BiomeMap_15create_heightmap, METH_NOARGS, __pyx_doc_8pyspades_8mapmaker_8BiomeMap_14create_heightmap},
  {"rect_of_point", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_8BiomeMap_17rect_of_point, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pyspades_8mapmaker_BiomeMap[] = {
  {(char *)"width", __pyx_getprop_8pyspades_8mapmaker_8BiomeMap_width, __pyx_setprop_8pyspades_8mapmaker_8BiomeMap_width, (char *)0, 0},
  {(char *)"height", __pyx_getprop_8pyspades_8mapmaker_8BiomeMap_height, __pyx_setprop_8pyspades_8mapmaker_8BiomeMap_height, (char *)0, 0},
  {(char *)"twidth", __pyx_getprop_8pyspades_8mapmaker_8BiomeMap_twidth, __pyx_setprop_8pyspades_8mapmaker_8BiomeMap_twidth, (char *)0, 0},
  {(char *)"theight", __pyx_getprop_8pyspades_8mapmaker_8BiomeMap_theight, __pyx_setprop_8pyspades_8mapmaker_8BiomeMap_theight, (char *)0, 0},
  {(char *)"biomes", __pyx_getprop_8pyspades_8mapmaker_8BiomeMap_biomes, __pyx_setprop_8pyspades_8mapmaker_8BiomeMap_biomes, (char *)0, 0},
  {(char *)"tmap", __pyx_getprop_8pyspades_8mapmaker_8BiomeMap_tmap, __pyx_setprop_8pyspades_8mapmaker_8BiomeMap_tmap, (char *)0, 0},
  {(char *)"gradients", __pyx_getprop_8pyspades_8mapmaker_8BiomeMap_gradients, __pyx_setprop_8pyspades_8mapmaker_8BiomeMap_gradients, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pyspades_8mapmaker_BiomeMap = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyspades.mapmaker.BiomeMap", /*tp_name*/
  sizeof(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pyspades_8mapmaker_BiomeMap, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    A tilemap containing biome data for a HeightMap.\n    ", /*tp_doc*/
  __pyx_tp_traverse_8pyspades_8mapmaker_BiomeMap, /*tp_traverse*/
  __pyx_tp_clear_8pyspades_8mapmaker_BiomeMap, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pyspades_8mapmaker_BiomeMap, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pyspades_8mapmaker_BiomeMap, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pyspades_8mapmaker_8BiomeMap_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pyspades_8mapmaker_BiomeMap, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap __pyx_vtable_8pyspades_8mapmaker_HeightMap;

static PyObject *__pyx_tp_new_8pyspades_8mapmaker_HeightMap(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pyspades_8mapmaker_HeightMap *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pyspades_8mapmaker_HeightMap;
  p->hmap = Py_None; Py_INCREF(Py_None);
  p->cmap = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pyspades_8mapmaker_HeightMap(PyObject *o) {
  struct __pyx_obj_8pyspades_8mapmaker_HeightMap *p = (struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->hmap);
  Py_CLEAR(p->cmap);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pyspades_8mapmaker_HeightMap(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pyspades_8mapmaker_HeightMap *p = (struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)o;
  if (p->hmap) {
    e = (*v)(p->hmap, a); if (e) return e;
  }
  if (p->cmap) {
    e = (*v)(p->cmap, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pyspades_8mapmaker_HeightMap(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pyspades_8mapmaker_HeightMap *p = (struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)o;
  tmp = ((PyObject*)p->hmap);
  p->hmap = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->cmap);
  p->cmap = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_8pyspades_8mapmaker_9HeightMap_width(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pyspades_8mapmaker_9HeightMap_5width_1__get__(o);
}

static int __pyx_setprop_8pyspades_8mapmaker_9HeightMap_width(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pyspades_8mapmaker_9HeightMap_5width_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pyspades_8mapmaker_9HeightMap_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pyspades_8mapmaker_9HeightMap_6height_1__get__(o);
}

static int __pyx_setprop_8pyspades_8mapmaker_9HeightMap_height(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pyspades_8mapmaker_9HeightMap_6height_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pyspades_8mapmaker_9HeightMap_hmap(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pyspades_8mapmaker_9HeightMap_4hmap_1__get__(o);
}

static int __pyx_setprop_8pyspades_8mapmaker_9HeightMap_hmap(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pyspades_8mapmaker_9HeightMap_4hmap_3__set__(o, v);
  }
  else {
    return __pyx_pw_8pyspades_8mapmaker_9HeightMap_4hmap_5__del__(o);
  }
}

static PyObject *__pyx_getprop_8pyspades_8mapmaker_9HeightMap_cmap(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pyspades_8mapmaker_9HeightMap_4cmap_1__get__(o);
}

static int __pyx_setprop_8pyspades_8mapmaker_9HeightMap_cmap(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pyspades_8mapmaker_9HeightMap_4cmap_3__set__(o, v);
  }
  else {
    return __pyx_pw_8pyspades_8mapmaker_9HeightMap_4cmap_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_8pyspades_8mapmaker_HeightMap[] = {
  {"get", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_3get, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_repeat", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_5get_repeat, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pyspades_8mapmaker_9HeightMap_4get_repeat},
  {"set", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_7set, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_repeat", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_9set_repeat, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pyspades_8mapmaker_9HeightMap_8set_repeat},
  {"add_repeat", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_11add_repeat, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_col", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_13get_col, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_col_repeat", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_15get_col_repeat, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_col_repeat", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_17set_col_repeat, METH_VARARGS|METH_KEYWORDS, 0},
  {"fill_col", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_19fill_col, METH_O, 0},
  {"mult_repeat", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_21mult_repeat, METH_VARARGS|METH_KEYWORDS, 0},
  {"seed", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_23seed, METH_VARARGS|METH_KEYWORDS, 0},
  {"peaking", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_25peaking, METH_NOARGS, __pyx_doc_8pyspades_8mapmaker_9HeightMap_24peaking},
  {"dipping", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_27dipping, METH_NOARGS, __pyx_doc_8pyspades_8mapmaker_9HeightMap_26dipping},
  {"rolling", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_29rolling, METH_NOARGS, __pyx_doc_8pyspades_8mapmaker_9HeightMap_28rolling},
  {"smoothing", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_31smoothing, METH_NOARGS, __pyx_doc_8pyspades_8mapmaker_9HeightMap_30smoothing},
  {"midpoint_displace", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_33midpoint_displace, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pyspades_8mapmaker_9HeightMap_32midpoint_displace},
  {"jitter_heights", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_35jitter_heights, METH_O, __pyx_doc_8pyspades_8mapmaker_9HeightMap_34jitter_heights},
  {"jitter_colors", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_37jitter_colors, METH_O, __pyx_doc_8pyspades_8mapmaker_9HeightMap_36jitter_colors},
  {"level_against_heightmap", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_39level_against_heightmap, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pyspades_8mapmaker_9HeightMap_38level_against_heightmap},
  {"blend_heightmaps", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_41blend_heightmaps, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pyspades_8mapmaker_9HeightMap_40blend_heightmaps},
  {"rect_solid", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_43rect_solid, METH_VARARGS|METH_KEYWORDS, 0},
  {"rect_noise", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_45rect_noise, METH_VARARGS|METH_KEYWORDS, 0},
  {"rect_color", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_47rect_color, METH_VARARGS|METH_KEYWORDS, 0},
  {"truncate", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_49truncate, METH_NOARGS, __pyx_doc_8pyspades_8mapmaker_9HeightMap_48truncate},
  {"offset_z", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_51offset_z, METH_O, 0},
  {"rescale_z", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_53rescale_z, METH_O, 0},
  {"paint_gradient_fill", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_55paint_gradient_fill, METH_O, __pyx_doc_8pyspades_8mapmaker_9HeightMap_54paint_gradient_fill},
  {"rewrite_gradient_fill", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_57rewrite_gradient_fill, METH_O, __pyx_doc_8pyspades_8mapmaker_9HeightMap_56rewrite_gradient_fill},
  {"rgb_noise_colors", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_59rgb_noise_colors, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pyspades_8mapmaker_9HeightMap_58rgb_noise_colors},
  {"smooth_colors", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_61smooth_colors, METH_NOARGS, __pyx_doc_8pyspades_8mapmaker_9HeightMap_60smooth_colors},
  {"write_vxl", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_63write_vxl, METH_NOARGS, 0},
  {"line_add", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_65line_add, METH_VARARGS|METH_KEYWORDS, 0},
  {"line_set", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9HeightMap_67line_set, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pyspades_8mapmaker_HeightMap[] = {
  {(char *)"width", __pyx_getprop_8pyspades_8mapmaker_9HeightMap_width, __pyx_setprop_8pyspades_8mapmaker_9HeightMap_width, (char *)0, 0},
  {(char *)"height", __pyx_getprop_8pyspades_8mapmaker_9HeightMap_height, __pyx_setprop_8pyspades_8mapmaker_9HeightMap_height, (char *)0, 0},
  {(char *)"hmap", __pyx_getprop_8pyspades_8mapmaker_9HeightMap_hmap, __pyx_setprop_8pyspades_8mapmaker_9HeightMap_hmap, (char *)0, 0},
  {(char *)"cmap", __pyx_getprop_8pyspades_8mapmaker_9HeightMap_cmap, __pyx_setprop_8pyspades_8mapmaker_9HeightMap_cmap, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pyspades_8mapmaker_HeightMap = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyspades.mapmaker.HeightMap", /*tp_name*/
  sizeof(struct __pyx_obj_8pyspades_8mapmaker_HeightMap), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pyspades_8mapmaker_HeightMap, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pyspades_8mapmaker_HeightMap, /*tp_traverse*/
  __pyx_tp_clear_8pyspades_8mapmaker_HeightMap, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pyspades_8mapmaker_HeightMap, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pyspades_8mapmaker_HeightMap, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pyspades_8mapmaker_9HeightMap_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pyspades_8mapmaker_HeightMap, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"make_color", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_3make_color, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_r", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_5get_r, METH_O, 0},
  {"get_g", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_7get_g, METH_O, 0},
  {"get_b", (PyCFunction)__pyx_pw_8pyspades_8mapmaker_9get_b, METH_O, 0},
  {0, 0, 0, 0}
};

static int __pyx_import_star_set(PyObject *o, PyObject* py_name, char *name) {
  static const char* internal_type_names[] = {
    "BiomeMap",
    "HeightMap",
    "MapData",
    "VXLData",
    "__pyx_ctuple_Py_ssize_t",
    "__pyx_ctuple_Py_ssize_t_struct",
    "__pyx_ctuple_double",
    "__pyx_ctuple_double_struct",
    "__pyx_ctuple_e36f8__9f91f____dunderpyx_ctuple_long__dunderand_long__dunderand_long__dunderand_long__etc__etc",
    "__pyx_ctuple_e36f8__9f91f____dunderpyx_ctuple_long__dunderand_long__dunderand_long__dunderand_long__etc__etc_struct",
    "__pyx_ctuple_int",
    "__pyx_ctuple_int__and_int",
    "__pyx_ctuple_int__and_int_struct",
    "__pyx_ctuple_int__and_long",
    "__pyx_ctuple_int__and_long_struct",
    "__pyx_ctuple_int_struct",
    "__pyx_ctuple_long",
    "__pyx_ctuple_long__and_Py_ssize_t",
    "__pyx_ctuple_long__and_Py_ssize_t_struct",
    "__pyx_ctuple_long__and_int",
    "__pyx_ctuple_long__and_int__and_int",
    "__pyx_ctuple_long__and_int__and_int_struct",
    "__pyx_ctuple_long__and_int_struct",
    "__pyx_ctuple_long__and_long",
    "__pyx_ctuple_long__and_long__and_long__and_long",
    "__pyx_ctuple_long__and_long__and_long__and_long_struct",
    "__pyx_ctuple_long__and_long_struct",
    "__pyx_ctuple_long_struct",
    "__pyx_opt_args_8pyspades_8mapmaker_8BiomeMap_random_points",
    "__pyx_opt_args_8pyspades_8mapmaker_9HeightMap_midpoint_displace",
    0
  };
  const char** type_name = internal_type_names;
  while (*type_name) {
    if (__Pyx_StrEq(name, *type_name)) {
      PyErr_Format(PyExc_TypeError, "Cannot overwrite C type %s", name);
      goto bad;
    }
    type_name++;
  }
  if (0);
  else {
    if (PyObject_SetAttr(__pyx_m, py_name, o) < 0) goto bad;
  }
  return 0;
  bad:
  return -1;
}

























































































































static int
__Pyx_import_all_from(PyObject *locals, PyObject *v)
{
    PyObject *all = PyObject_GetAttrString(v, "__all__");
    PyObject *dict, *name, *value;
    int skip_leading_underscores = 0;
    int pos, err;

    if (all == NULL) {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError))
            return -1;
        PyErr_Clear();
        dict = PyObject_GetAttrString(v, "__dict__");
        if (dict == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError))
                return -1;
            PyErr_SetString(PyExc_ImportError,
            "from-import-* object has no __dict__ and no __all__");
            return -1;
        }
#if PY_MAJOR_VERSION < 3
        all = PyObject_CallMethod(dict, (char *)"keys", NULL);
#else
        all = PyMapping_Keys(dict);
#endif
        Py_DECREF(dict);
        if (all == NULL)
            return -1;
        skip_leading_underscores = 1;
    }

    for (pos = 0, err = 0; ; pos++) {
        name = PySequence_GetItem(all, pos);
        if (name == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_IndexError))
                err = -1;
            else
                PyErr_Clear();
            break;
        }
        if (skip_leading_underscores &&
#if PY_MAJOR_VERSION < 3
            PyString_Check(name) &&
            PyString_AS_STRING(name)[0] == '_')
#else
            PyUnicode_Check(name) &&
            PyUnicode_AS_UNICODE(name)[0] == '_')
#endif
        {
            Py_DECREF(name);
            continue;
        }
        value = PyObject_GetAttr(v, name);
        if (value == NULL)
            err = -1;
        else if (PyDict_CheckExact(locals))
            err = PyDict_SetItem(locals, name, value);
        else
            err = PyObject_SetItem(locals, name, value);
        Py_DECREF(name);
        Py_XDECREF(value);
        if (err != 0)
            break;
    }
    Py_DECREF(all);
    return err;
}


static int __pyx_import_star(PyObject* m) {

    int i;
    int ret = -1;
    char* s;
    PyObject *locals = 0;
    PyObject *list = 0;
#if PY_MAJOR_VERSION >= 3
    PyObject *utf8_name = 0;
#endif
    PyObject *name;
    PyObject *item;

    locals = PyDict_New();              if (!locals) goto bad;
    if (__Pyx_import_all_from(locals, m) < 0) goto bad;
    list = PyDict_Items(locals);        if (!list) goto bad;

    for(i=0; i<PyList_GET_SIZE(list); i++) {
        name = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 0);
        item = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 1);
#if PY_MAJOR_VERSION >= 3
        utf8_name = PyUnicode_AsUTF8String(name);
        if (!utf8_name) goto bad;
        s = PyBytes_AS_STRING(utf8_name);
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
        Py_DECREF(utf8_name); utf8_name = 0;
#else
        s = PyString_AsString(name);
        if (!s) goto bad;
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
#endif
    }
    ret = 0;

bad:
    Py_XDECREF(locals);
    Py_XDECREF(list);
#if PY_MAJOR_VERSION >= 3
    Py_XDECREF(utf8_name);
#endif
    return ret;
}



#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "mapmaker",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_Biome, __pyx_k_Biome, sizeof(__pyx_k_Biome), 0, 0, 1, 1},
  {&__pyx_n_s_Biome___init, __pyx_k_Biome___init, sizeof(__pyx_k_Biome___init), 0, 0, 1, 1},
  {&__pyx_n_s_Gradient, __pyx_k_Gradient, sizeof(__pyx_k_Gradient), 0, 0, 1, 1},
  {&__pyx_n_s_Gradient___init, __pyx_k_Gradient___init, sizeof(__pyx_k_Gradient___init), 0, 0, 1, 1},
  {&__pyx_n_s_Gradient_array, __pyx_k_Gradient_array, sizeof(__pyx_k_Gradient_array), 0, 0, 1, 1},
  {&__pyx_n_s_Gradient_hsb, __pyx_k_Gradient_hsb, sizeof(__pyx_k_Gradient_hsb), 0, 0, 1, 1},
  {&__pyx_n_s_Gradient_rgb, __pyx_k_Gradient_rgb, sizeof(__pyx_k_Gradient_rgb), 0, 0, 1, 1},
  {&__pyx_n_s_Gradient_set_step_hsb, __pyx_k_Gradient_set_step_hsb, sizeof(__pyx_k_Gradient_set_step_hsb), 0, 0, 1, 1},
  {&__pyx_n_s_Gradient_set_step_rgb, __pyx_k_Gradient_set_step_rgb, sizeof(__pyx_k_Gradient_set_step_rgb), 0, 0, 1, 1},
  {&__pyx_n_s_HeightMap, __pyx_k_HeightMap, sizeof(__pyx_k_HeightMap), 0, 0, 1, 1},
  {&__pyx_n_s__10, __pyx_k__10, sizeof(__pyx_k__10), 0, 0, 1, 1},
  {&__pyx_n_s_alphamap, __pyx_k_alphamap, sizeof(__pyx_k_alphamap), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_biome, __pyx_k_biome, sizeof(__pyx_k_biome), 0, 0, 1, 1},
  {&__pyx_n_s_biomes, __pyx_k_biomes, sizeof(__pyx_k_biomes), 0, 0, 1, 1},
  {&__pyx_n_s_choice, __pyx_k_choice, sizeof(__pyx_k_choice), 0, 0, 1, 1},
  {&__pyx_n_s_col, __pyx_k_col, sizeof(__pyx_k_col), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_s_color, __pyx_k_color, sizeof(__pyx_k_color), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_deepcopy, __pyx_k_deepcopy, sizeof(__pyx_k_deepcopy), 0, 0, 1, 1},
  {&__pyx_n_s_depth, __pyx_k_depth, sizeof(__pyx_k_depth), 0, 0, 1, 1},
  {&__pyx_n_s_deque, __pyx_k_deque, sizeof(__pyx_k_deque), 0, 0, 1, 1},
  {&__pyx_n_s_dist, __pyx_k_dist, sizeof(__pyx_k_dist), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_end_color, __pyx_k_end_color, sizeof(__pyx_k_end_color), 0, 0, 1, 1},
  {&__pyx_n_s_end_pos, __pyx_k_end_pos, sizeof(__pyx_k_end_pos), 0, 0, 1, 1},
  {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
  {&__pyx_n_s_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 0, 1, 1},
  {&__pyx_n_s_generate_classic, __pyx_k_generate_classic, sizeof(__pyx_k_generate_classic), 0, 0, 1, 1},
  {&__pyx_n_s_gradient, __pyx_k_gradient, sizeof(__pyx_k_gradient), 0, 0, 1, 1},
  {&__pyx_n_s_h, __pyx_k_h, sizeof(__pyx_k_h), 0, 0, 1, 1},
  {&__pyx_n_s_height, __pyx_k_height, sizeof(__pyx_k_height), 0, 0, 1, 1},
  {&__pyx_n_s_high, __pyx_k_high, sizeof(__pyx_k_high), 0, 0, 1, 1},
  {&__pyx_kp_s_home_syberic_AOSServer_PySnip_p, __pyx_k_home_syberic_AOSServer_PySnip_p, sizeof(__pyx_k_home_syberic_AOSServer_PySnip_p), 0, 0, 1, 0},
  {&__pyx_n_s_hsb, __pyx_k_hsb, sizeof(__pyx_k_hsb), 0, 0, 1, 1},
  {&__pyx_n_s_hsb_to_rgb, __pyx_k_hsb_to_rgb, sizeof(__pyx_k_hsb_to_rgb), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_interp, __pyx_k_interp, sizeof(__pyx_k_interp), 0, 0, 1, 1},
  {&__pyx_n_s_interpolate_hsb, __pyx_k_interpolate_hsb, sizeof(__pyx_k_interpolate_hsb), 0, 0, 1, 1},
  {&__pyx_n_s_interpolate_rgb, __pyx_k_interpolate_rgb, sizeof(__pyx_k_interpolate_rgb), 0, 0, 1, 1},
  {&__pyx_n_s_jitter, __pyx_k_jitter, sizeof(__pyx_k_jitter), 0, 0, 1, 1},
  {&__pyx_n_s_jittervalue, __pyx_k_jittervalue, sizeof(__pyx_k_jittervalue), 0, 0, 1, 1},
  {&__pyx_n_s_low, __pyx_k_low, sizeof(__pyx_k_low), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_map, __pyx_k_map, sizeof(__pyx_k_map), 0, 0, 1, 1},
  {&__pyx_n_s_math, __pyx_k_math, sizeof(__pyx_k_math), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_midpoint, __pyx_k_midpoint, sizeof(__pyx_k_midpoint), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_mult, __pyx_k_mult, sizeof(__pyx_k_mult), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_noise, __pyx_k_noise, sizeof(__pyx_k_noise), 0, 0, 1, 1},
  {&__pyx_n_s_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
  {&__pyx_n_s_other, __pyx_k_other, sizeof(__pyx_k_other), 0, 0, 1, 1},
  {&__pyx_n_s_pct, __pyx_k_pct, sizeof(__pyx_k_pct), 0, 0, 1, 1},
  {&__pyx_n_s_pi, __pyx_k_pi, sizeof(__pyx_k_pi), 0, 0, 1, 1},
  {&__pyx_n_s_popleft, __pyx_k_popleft, sizeof(__pyx_k_popleft), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_pyspades_mapmaker, __pyx_k_pyspades_mapmaker, sizeof(__pyx_k_pyspades_mapmaker), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qty, __pyx_k_qty, sizeof(__pyx_k_qty), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_n_s_radius, __pyx_k_radius, sizeof(__pyx_k_radius), 0, 0, 1, 1},
  {&__pyx_n_s_randint, __pyx_k_randint, sizeof(__pyx_k_randint), 0, 0, 1, 1},
  {&__pyx_n_s_random, __pyx_k_random, sizeof(__pyx_k_random), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_rgb, __pyx_k_rgb, sizeof(__pyx_k_rgb), 0, 0, 1, 1},
  {&__pyx_n_s_seed, __pyx_k_seed, sizeof(__pyx_k_seed), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_set_step_hsb, __pyx_k_set_step_hsb, sizeof(__pyx_k_set_step_hsb), 0, 0, 1, 1},
  {&__pyx_n_s_set_step_rgb, __pyx_k_set_step_rgb, sizeof(__pyx_k_set_step_rgb), 0, 0, 1, 1},
  {&__pyx_n_s_sin, __pyx_k_sin, sizeof(__pyx_k_sin), 0, 0, 1, 1},
  {&__pyx_n_s_skip, __pyx_k_skip, sizeof(__pyx_k_skip), 0, 0, 1, 1},
  {&__pyx_n_s_spanscalingmultiplier, __pyx_k_spanscalingmultiplier, sizeof(__pyx_k_spanscalingmultiplier), 0, 0, 1, 1},
  {&__pyx_n_s_start_color, __pyx_k_start_color, sizeof(__pyx_k_start_color), 0, 0, 1, 1},
  {&__pyx_n_s_start_pos, __pyx_k_start_pos, sizeof(__pyx_k_start_pos), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_steps, __pyx_k_steps, sizeof(__pyx_k_steps), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_val, __pyx_k_val, sizeof(__pyx_k_val), 0, 0, 1, 1},
  {&__pyx_n_s_variation, __pyx_k_variation, sizeof(__pyx_k_variation), 0, 0, 1, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_width, __pyx_k_width, sizeof(__pyx_k_width), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_x2, __pyx_k_x2, sizeof(__pyx_k_x2), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_y2, __pyx_k_y2, sizeof(__pyx_k_y2), 0, 0, 1, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_object = __Pyx_GetBuiltinName(__pyx_n_s_object); if (!__pyx_builtin_object) __PYX_ERR(0, 35, __pyx_L1_error)
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(0, 65, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(0, 65, __pyx_L1_error)
  #endif
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pyspades/mapmaker.pyx":124
 *             x = idx % self.width
 *             y = idx // self.height
 *             self.tmap[idx] = self.get_repeat(x + random.randint(-1,1),             # <<<<<<<<<<<<<<
 *                                              y + random.randint(-1,1))
 *     cpdef create_heightmap(self):
 */
  __pyx_tuple_ = PyTuple_Pack(2, __pyx_int_neg_1, __pyx_int_1); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "pyspades/mapmaker.pyx":125
 *             y = idx // self.height
 *             self.tmap[idx] = self.get_repeat(x + random.randint(-1,1),
 *                                              y + random.randint(-1,1))             # <<<<<<<<<<<<<<
 *     cpdef create_heightmap(self):
 *         """Return a HeightMap with unfinished color data and a list of
 */
  __pyx_tuple__2 = PyTuple_Pack(2, __pyx_int_neg_1, __pyx_int_1); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "pyspades/mapmaker.pyx":130
 *         gradients. When finished with post-processing, use
 *         hmap.rewrite_gradient_fill(gradients). """
 *         cdef HeightMap hmap = HeightMap(0.)             # <<<<<<<<<<<<<<
 * 
 *         # paste a rectangle into each biome's area
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_float_0_); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "pyspades/mapmaker.pyx":445
 * cdef inline int paint_gradient(object zcoltable, int z):
 *     cdef int zz = z*3
 *     cdef int rnd = random.randint(-4,4)             # <<<<<<<<<<<<<<
 *     return make_color(lim_byte(zcoltable[zz]+rnd),
 *                       lim_byte(zcoltable[zz+1]+rnd),
 */
  __pyx_tuple__4 = PyTuple_Pack(2, __pyx_int_neg_4, __pyx_int_4); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "pyspades/mapmaker.pyx":484
 *         self.steps = []
 *         for n in xrange(0,64):
 *             self.steps.append((0,0,0,0))             # <<<<<<<<<<<<<<
 *     def set_step_rgb(self, step, rgb):
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 */
  __pyx_tuple__5 = PyTuple_Pack(4, __pyx_int_0, __pyx_int_0, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "pyspades/mapmaker.pyx":30
 * cimport cython
 * 
 * def generate_classic(seed):             # <<<<<<<<<<<<<<
 *     cdef VXLData map = VXLData()
 *     genland(seed, map.map)
 */
  __pyx_tuple__6 = PyTuple_Pack(2, __pyx_n_s_seed, __pyx_n_s_map); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__6, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_syberic_AOSServer_PySnip_p, __pyx_n_s_generate_classic, 30, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) __PYX_ERR(0, 30, __pyx_L1_error)

  /* "pyspades/mapmaker.pyx":36
 * 
 * class Biome(object):
 *     def __init__(self, gradient, height, variation, noise):             # <<<<<<<<<<<<<<
 *         """
 *         Create a biome with a Gradient object, typical height(0.0-1.0), and
 */
  __pyx_tuple__8 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_gradient, __pyx_n_s_height, __pyx_n_s_variation, __pyx_n_s_noise); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__8, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_syberic_AOSServer_PySnip_p, __pyx_n_s_init, 36, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) __PYX_ERR(0, 36, __pyx_L1_error)

  /* "pyspades/mapmaker.pyx":481
 * 
 * class Gradient(object):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.steps = []
 *         for n in xrange(0,64):
 */
  __pyx_tuple__11 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_n); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_syberic_AOSServer_PySnip_p, __pyx_n_s_init, 481, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(0, 481, __pyx_L1_error)

  /* "pyspades/mapmaker.pyx":485
 *         for n in xrange(0,64):
 *             self.steps.append((0,0,0,0))
 *     def set_step_rgb(self, step, rgb):             # <<<<<<<<<<<<<<
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 *     def set_step_hsb(self, step, hsb):
 */
  __pyx_tuple__13 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_step, __pyx_n_s_rgb); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_syberic_AOSServer_PySnip_p, __pyx_n_s_set_step_rgb, 485, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(0, 485, __pyx_L1_error)

  /* "pyspades/mapmaker.pyx":487
 *     def set_step_rgb(self, step, rgb):
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 *     def set_step_hsb(self, step, hsb):             # <<<<<<<<<<<<<<
 *         rgb = hsb_to_rgb(*hsb)
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 */
  __pyx_tuple__15 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_step, __pyx_n_s_hsb, __pyx_n_s_rgb); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_syberic_AOSServer_PySnip_p, __pyx_n_s_set_step_hsb, 487, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(0, 487, __pyx_L1_error)

  /* "pyspades/mapmaker.pyx":490
 *         rgb = hsb_to_rgb(*hsb)
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 *     def rgb(self, start_pos, start_color, end_pos, end_color):             # <<<<<<<<<<<<<<
 *         """Linear interpolation of (0-255) RGB values."""
 *         dist = end_pos - start_pos
 */
  __pyx_tuple__17 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_start_pos, __pyx_n_s_start_color, __pyx_n_s_end_pos, __pyx_n_s_end_color, __pyx_n_s_dist, __pyx_n_s_n, __pyx_n_s_pct); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(5, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_syberic_AOSServer_PySnip_p, __pyx_n_s_rgb, 490, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(0, 490, __pyx_L1_error)

  /* "pyspades/mapmaker.pyx":498
 *                                              end_color,
 *                                              pct))
 *     def hsb(self, start_pos, start_color, end_pos, end_color):             # <<<<<<<<<<<<<<
 *         """Linear interpolation of (0-360,0-100,0-100) HSB values
 *             as used in GIMP."""
 */
  __pyx_tuple__19 = PyTuple_Pack(9, __pyx_n_s_self, __pyx_n_s_start_pos, __pyx_n_s_start_color, __pyx_n_s_end_pos, __pyx_n_s_end_color, __pyx_n_s_dist, __pyx_n_s_n, __pyx_n_s_pct, __pyx_n_s_interp); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(5, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_syberic_AOSServer_PySnip_p, __pyx_n_s_hsb, 498, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(0, 498, __pyx_L1_error)

  /* "pyspades/mapmaker.pyx":512
 *             interp = interpolate_hsb(start_color, end_color, pct)
 *             self.set_step_hsb(n, interp)
 *     def array(self):             # <<<<<<<<<<<<<<
 *         base = list(self.steps)
 *         base.reverse()
 */
  __pyx_tuple__21 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_base, __pyx_n_s_result, __pyx_n_s_rgb); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_syberic_AOSServer_PySnip_p, __pyx_n_s_array, 512, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_ = PyFloat_FromDouble(0.); if (unlikely(!__pyx_float_0_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_5 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_float_0_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_100_ = PyFloat_FromDouble(100.); if (unlikely(!__pyx_float_100_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_360_ = PyFloat_FromDouble(360.); if (unlikely(!__pyx_float_360_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_32 = PyInt_FromLong(32); if (unlikely(!__pyx_int_32)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_63 = PyInt_FromLong(63); if (unlikely(!__pyx_int_63)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_255 = PyInt_FromLong(255); if (unlikely(!__pyx_int_255)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_4 = PyInt_FromLong(-4); if (unlikely(!__pyx_int_neg_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initmapmaker(void); /*proto*/
PyMODINIT_FUNC initmapmaker(void)
#else
PyMODINIT_FUNC PyInit_mapmaker(void); /*proto*/
PyMODINIT_FUNC PyInit_mapmaker(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_mapmaker(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("mapmaker", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pyspades__mapmaker) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pyspades.mapmaker")) {
      if (unlikely(PyDict_SetItemString(modules, "pyspades.mapmaker", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_8pyspades_8mapmaker_BiomeMap = &__pyx_vtable_8pyspades_8mapmaker_BiomeMap;
  __pyx_vtable_8pyspades_8mapmaker_BiomeMap.get_repeat = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, int, int, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_8BiomeMap_get_repeat;
  __pyx_vtable_8pyspades_8mapmaker_BiomeMap.set_repeat = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, int, int, PyObject *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_8BiomeMap_set_repeat;
  __pyx_vtable_8pyspades_8mapmaker_BiomeMap.noise = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_8BiomeMap_noise;
  __pyx_vtable_8pyspades_8mapmaker_BiomeMap.random_points = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_8mapmaker_8BiomeMap_random_points *__pyx_optional_args))__pyx_f_8pyspades_8mapmaker_8BiomeMap_random_points;
  __pyx_vtable_8pyspades_8mapmaker_BiomeMap.point_flood = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, PyObject *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_8BiomeMap_point_flood;
  __pyx_vtable_8pyspades_8mapmaker_BiomeMap.jitter = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_8BiomeMap_jitter;
  __pyx_vtable_8pyspades_8mapmaker_BiomeMap.create_heightmap = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_8BiomeMap_create_heightmap;
  __pyx_vtable_8pyspades_8mapmaker_BiomeMap.rect_of_point = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, PyObject *, PyObject *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_8BiomeMap_rect_of_point;
  if (PyType_Ready(&__pyx_type_8pyspades_8mapmaker_BiomeMap) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __pyx_type_8pyspades_8mapmaker_BiomeMap.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pyspades_8mapmaker_BiomeMap.tp_dict, __pyx_vtabptr_8pyspades_8mapmaker_BiomeMap) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "BiomeMap", (PyObject *)&__pyx_type_8pyspades_8mapmaker_BiomeMap) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __pyx_ptype_8pyspades_8mapmaker_BiomeMap = &__pyx_type_8pyspades_8mapmaker_BiomeMap;
  __pyx_vtabptr_8pyspades_8mapmaker_HeightMap = &__pyx_vtable_8pyspades_8mapmaker_HeightMap;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.get = (double (*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_get;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.get_repeat = (double (*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_get_repeat;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.set = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, double, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_set;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.set_repeat = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, double, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_set_repeat;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.add_repeat = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, double, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_add_repeat;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.get_col = (int (*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_get_col;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.get_col_repeat = (int (*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_get_col_repeat;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.set_col_repeat = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_set_col_repeat;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.fill_col = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_fill_col;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.mult_repeat = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, double, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_mult_repeat;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.seed = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, double, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_seed;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.peaking = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_peaking;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.dipping = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_dipping;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.rolling = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_rolling;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.smoothing = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_smoothing;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.midpoint_displace = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, double, int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_8mapmaker_9HeightMap_midpoint_displace *__pyx_optional_args))__pyx_f_8pyspades_8mapmaker_9HeightMap_midpoint_displace;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.jitter_heights = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_jitter_heights;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.jitter_colors = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_jitter_colors;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.level_against_heightmap = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_level_against_heightmap;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.blend_heightmaps = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_blend_heightmaps;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.rect_solid = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int, double, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_rect_solid;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.rect_noise = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int, double, double, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_rect_noise;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.rect_color = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int, int, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_rect_color;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.truncate = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_truncate;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.offset_z = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_offset_z;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.rescale_z = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_rescale_z;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.paint_gradient_fill = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, PyObject *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_paint_gradient_fill;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.rewrite_gradient_fill = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, PyObject *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_rewrite_gradient_fill;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.rgb_noise_colors = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, PyObject *, PyObject *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_rgb_noise_colors;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.smooth_colors = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_smooth_colors;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.write_vxl = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_write_vxl;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.line_add = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int, int, double, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_line_add;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.line_set = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int, int, double, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_line_set;
  if (PyType_Ready(&__pyx_type_8pyspades_8mapmaker_HeightMap) < 0) __PYX_ERR(0, 153, __pyx_L1_error)
  __pyx_type_8pyspades_8mapmaker_HeightMap.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pyspades_8mapmaker_HeightMap.tp_dict, __pyx_vtabptr_8pyspades_8mapmaker_HeightMap) < 0) __PYX_ERR(0, 153, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "HeightMap", (PyObject *)&__pyx_type_8pyspades_8mapmaker_HeightMap) < 0) __PYX_ERR(0, 153, __pyx_L1_error)
  __pyx_ptype_8pyspades_8mapmaker_HeightMap = &__pyx_type_8pyspades_8mapmaker_HeightMap;
  /*--- Type import code ---*/
  __pyx_ptype_8pyspades_3vxl_VXLData = __Pyx_ImportType("pyspades.vxl", "VXLData", sizeof(struct __pyx_obj_8pyspades_3vxl_VXLData), 1); if (unlikely(!__pyx_ptype_8pyspades_3vxl_VXLData)) __PYX_ERR(1, 30, __pyx_L1_error)
  __pyx_vtabptr_8pyspades_3vxl_VXLData = (struct __pyx_vtabstruct_8pyspades_3vxl_VXLData*)__Pyx_GetVtable(__pyx_ptype_8pyspades_3vxl_VXLData->tp_dict); if (unlikely(!__pyx_vtabptr_8pyspades_3vxl_VXLData)) __PYX_ERR(1, 30, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "pyspades/mapmaker.pyx":23
 *     void genland(unsigned long seed, MapData * map)
 * 
 * import array             # <<<<<<<<<<<<<<
 * import random
 * import math
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_array, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array, __pyx_t_1) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":24
 * 
 * import array
 * import random             # <<<<<<<<<<<<<<
 * import math
 * import sys
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_random, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_random, __pyx_t_1) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":25
 * import array
 * import random
 * import math             # <<<<<<<<<<<<<<
 * import sys
 * from collections import deque
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_math, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_math, __pyx_t_1) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":26
 * import random
 * import math
 * import sys             # <<<<<<<<<<<<<<
 * from collections import deque
 * cimport cython
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_1) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":27
 * import math
 * import sys
 * from collections import deque             # <<<<<<<<<<<<<<
 * cimport cython
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_deque);
  __Pyx_GIVEREF(__pyx_n_s_deque);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_deque);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_deque); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_deque, __pyx_t_1) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades/mapmaker.pyx":30
 * cimport cython
 * 
 * def generate_classic(seed):             # <<<<<<<<<<<<<<
 *     cdef VXLData map = VXLData()
 *     genland(seed, map.map)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8pyspades_8mapmaker_1generate_classic, NULL, __pyx_n_s_pyspades_mapmaker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_generate_classic, __pyx_t_2) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades/mapmaker.pyx":35
 *     return map
 * 
 * class Biome(object):             # <<<<<<<<<<<<<<
 *     def __init__(self, gradient, height, variation, noise):
 *         """
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_builtin_object);
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_2, __pyx_n_s_Biome, __pyx_n_s_Biome, (PyObject *) NULL, __pyx_n_s_pyspades_mapmaker, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pyspades/mapmaker.pyx":36
 * 
 * class Biome(object):
 *     def __init__(self, gradient, height, variation, noise):             # <<<<<<<<<<<<<<
 *         """
 *         Create a biome with a Gradient object, typical height(0.0-1.0), and
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pyspades_8mapmaker_5Biome_1__init__, 0, __pyx_n_s_Biome___init, NULL, __pyx_n_s_pyspades_mapmaker, __pyx_d, ((PyObject *)__pyx_codeobj__9)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyspades/mapmaker.pyx":35
 *     return map
 * 
 * class Biome(object):             # <<<<<<<<<<<<<<
 *     def __init__(self, gradient, height, variation, noise):
 *         """
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_Biome, __pyx_t_2, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Biome, __pyx_t_4) < 0) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades/mapmaker.pyx":478
 *     return coords
 * 
 * from color import *             # <<<<<<<<<<<<<<
 * 
 * class Gradient(object):
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s__10);
  __Pyx_GIVEREF(__pyx_n_s__10);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s__10);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_color, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_import_star(__pyx_t_1) < 0) __PYX_ERR(0, 478, __pyx_L1_error);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":480
 * from color import *
 * 
 * class Gradient(object):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.steps = []
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_builtin_object);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_Gradient, __pyx_n_s_Gradient, (PyObject *) NULL, __pyx_n_s_pyspades_mapmaker, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pyspades/mapmaker.pyx":481
 * 
 * class Gradient(object):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.steps = []
 *         for n in xrange(0,64):
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pyspades_8mapmaker_8Gradient_1__init__, 0, __pyx_n_s_Gradient___init, NULL, __pyx_n_s_pyspades_mapmaker, __pyx_d, ((PyObject *)__pyx_codeobj__12)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyspades/mapmaker.pyx":485
 *         for n in xrange(0,64):
 *             self.steps.append((0,0,0,0))
 *     def set_step_rgb(self, step, rgb):             # <<<<<<<<<<<<<<
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 *     def set_step_hsb(self, step, hsb):
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pyspades_8mapmaker_8Gradient_3set_step_rgb, 0, __pyx_n_s_Gradient_set_step_rgb, NULL, __pyx_n_s_pyspades_mapmaker, __pyx_d, ((PyObject *)__pyx_codeobj__14)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_set_step_rgb, __pyx_t_4) < 0) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyspades/mapmaker.pyx":487
 *     def set_step_rgb(self, step, rgb):
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 *     def set_step_hsb(self, step, hsb):             # <<<<<<<<<<<<<<
 *         rgb = hsb_to_rgb(*hsb)
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pyspades_8mapmaker_8Gradient_5set_step_hsb, 0, __pyx_n_s_Gradient_set_step_hsb, NULL, __pyx_n_s_pyspades_mapmaker, __pyx_d, ((PyObject *)__pyx_codeobj__16)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_set_step_hsb, __pyx_t_4) < 0) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyspades/mapmaker.pyx":490
 *         rgb = hsb_to_rgb(*hsb)
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 *     def rgb(self, start_pos, start_color, end_pos, end_color):             # <<<<<<<<<<<<<<
 *         """Linear interpolation of (0-255) RGB values."""
 *         dist = end_pos - start_pos
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pyspades_8mapmaker_8Gradient_7rgb, 0, __pyx_n_s_Gradient_rgb, NULL, __pyx_n_s_pyspades_mapmaker, __pyx_d, ((PyObject *)__pyx_codeobj__18)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_rgb, __pyx_t_4) < 0) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyspades/mapmaker.pyx":498
 *                                              end_color,
 *                                              pct))
 *     def hsb(self, start_pos, start_color, end_pos, end_color):             # <<<<<<<<<<<<<<
 *         """Linear interpolation of (0-360,0-100,0-100) HSB values
 *             as used in GIMP."""
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pyspades_8mapmaker_8Gradient_9hsb, 0, __pyx_n_s_Gradient_hsb, NULL, __pyx_n_s_pyspades_mapmaker, __pyx_d, ((PyObject *)__pyx_codeobj__20)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_hsb, __pyx_t_4) < 0) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyspades/mapmaker.pyx":512
 *             interp = interpolate_hsb(start_color, end_color, pct)
 *             self.set_step_hsb(n, interp)
 *     def array(self):             # <<<<<<<<<<<<<<
 *         base = list(self.steps)
 *         base.reverse()
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pyspades_8mapmaker_8Gradient_11array, 0, __pyx_n_s_Gradient_array, NULL, __pyx_n_s_pyspades_mapmaker, __pyx_d, ((PyObject *)__pyx_codeobj__22)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_array, __pyx_t_4) < 0) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyspades/mapmaker.pyx":480
 * from color import *
 * 
 * class Gradient(object):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.steps = []
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_Gradient, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Gradient, __pyx_t_4) < 0) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades/mapmaker.pyx":1
 * # Copyright (c) James Hofmann 2012.             # <<<<<<<<<<<<<<
 * 
 * # This file is part of pyspades.
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pyspades.mapmaker", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pyspades.mapmaker");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* None */
static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* GetItemInt */
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* None */
static CYTHON_INLINE int __Pyx_mod_int(int a, int b) {
    int r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

/* SetItemInt */
static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* GetModuleGlobalName */
  static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyObjectCallMethO */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
      #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyIntBinop */
        #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* PyObjectCallMethod1 */
        static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            args = PyTuple_New(2);
            if (unlikely(!args)) goto bad;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
bad:
    Py_XDECREF(method);
    return result;
}

/* append */
        static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* PyIntBinop */
        #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyErrFetchRestore */
        #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
        static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyFloatBinop */
        #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyFloat_SubtractObjC(PyObject *op1, PyObject *op2, double floatval, CYTHON_UNUSED int inplace) {
    const double b = floatval;
    double a, result;
    if (likely(PyFloat_CheckExact(op1))) {
        a = PyFloat_AS_DOUBLE(op1);
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        switch (size) {
            case  0: a = 0.0; break;
            case -1: a = -(double) digits[0]; break;
            case  1: a = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -2)
                            a = -a;
                        break;
                    }
                }
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -3)
                            a = -a;
                        break;
                    }
                }
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -4)
                            a = -a;
                        break;
                    }
                }
            default:
        #else
        {
        #endif
            a = PyLong_AsDouble(op1);
            if (unlikely(a == -1.0 && PyErr_Occurred())) return NULL;
        }
    } else {
        return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
    }
        PyFPE_START_PROTECT("subtract", return NULL)
        result = a - b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* None */
          static CYTHON_INLINE int __Pyx_div_int(int a, int b) {
    int q = a / b;
    int r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* ArgTypeTest */
          static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* None */
          static CYTHON_INLINE Py_ssize_t __Pyx_mod_Py_ssize_t(Py_ssize_t a, Py_ssize_t b) {
    Py_ssize_t r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

/* Import */
          static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* None */
          static CYTHON_INLINE long __Pyx_mod_long(long a, long b) {
    long r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

/* PyFloatBinop */
          #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyFloat_DivideObjC(PyObject *op1, PyObject *op2, double floatval, CYTHON_UNUSED int inplace) {
    const double b = floatval;
    double a, result;
    if (likely(PyFloat_CheckExact(op1))) {
        a = PyFloat_AS_DOUBLE(op1);
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        switch (size) {
            case  0: a = 0.0; break;
            case -1: a = -(double) digits[0]; break;
            case  1: a = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -2)
                            a = -a;
                        break;
                    }
                }
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -3)
                            a = -a;
                        break;
                    }
                }
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) (1L<<53))) {
                        if (size == -4)
                            a = -a;
                        break;
                    }
                }
            default:
        #else
        {
        #endif
            a = PyLong_AsDouble(op1);
            if (unlikely(a == -1.0 && PyErr_Occurred())) return NULL;
        }
    } else {
        return (inplace ? __Pyx_PyNumber_InPlaceDivide(op1, op2) : __Pyx_PyNumber_Divide(op1, op2));
    }
        PyFPE_START_PROTECT("divide", return NULL)
        result = a / b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* SetVTable */
            static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* GetVTable */
            static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* ImportFrom */
            static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CalculateMetaclass */
            static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* FetchCommonType */
            static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
            static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_COMPILING_IN_CPYTHON
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
#if CYTHON_COMPILING_IN_PYPY
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    PyObject *self = f->m_self;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0 = PySequence_ITEM(arg, 0);
                if (unlikely(!arg0)) return NULL;
                result = (*meth)(self, arg0);
                Py_DECREF(arg0);
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
#else
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
	return PyCFunction_Call(func, arg, kw);
}
#endif
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_Call,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
#if !CYTHON_COMPILING_IN_PYPY
    __pyx_CyFunctionType_type.tp_call = PyCFunction_Call;
#endif
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* Py3ClassCreate */
                static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CodeObjectCache */
                static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
                #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
                #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
                static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
                static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
                static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
                static CYTHON_INLINE unsigned long __Pyx_PyInt_As_unsigned_long(PyObject *x) {
    const unsigned long neg_one = (unsigned long) -1, const_zero = (unsigned long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned long, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) >= 2 * PyLong_SHIFT) {
                            return (unsigned long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) >= 3 * PyLong_SHIFT) {
                            return (unsigned long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) >= 4 * PyLong_SHIFT) {
                            return (unsigned long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(unsigned long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned long) (((unsigned long)-1)*(((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned long) ((((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned long) (((unsigned long)-1)*(((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned long) ((((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned long) (((unsigned long)-1)*(((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned long) ((((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, long, PyLong_AsLong(x))
            } else if (sizeof(unsigned long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned long) -1;
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned long) -1;
        val = __Pyx_PyInt_As_unsigned_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned long");
    return (unsigned long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned long");
    return (unsigned long) -1;
}

/* CIntFromPy */
                static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CStringEquals */
                static CYTHON_INLINE int __Pyx_StrEq(const char *s1, const char *s2) {
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    return *s1 == *s2;
}

/* CheckBinaryVersion */
                static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
                #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
                #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
                static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
